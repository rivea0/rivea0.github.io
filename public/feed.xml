<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[rivea0]]></title>
        <description><![CDATA[My blog, projects, etc.]]></description>
        <link>https://rivea0.github.io</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Thu, 29 Feb 2024 10:30:32 GMT</lastBuildDate>
        <atom:link href="https://rivea0.github.io/feed.xml" rel="self" type="application/rss+xml"/>
        <language><![CDATA[en]]></language>
        <item>
            <title><![CDATA[LeetCode Meditations — Chapter 2: Two Pointers]]></title>
            <description><![CDATA[<p><img src="/blog/post-images/2024-02-29/09-lm-ch2.png" alt="Cover image"></p>
<p>One of the techniques of iterating through an array is the <em>two pointers technique</em>, and it is as simple as it sounds: we just keep two pointers, one starting from the left, and the other from the right, gradually getting closer to each other.</p>
<p><img src="/blog/post-images/2024-02-29/two-pointers.gif" alt="Two pointers"></p>
<h3>Palindrome example</h3>
<p>A very basic example can be the one where we check if a string is a palindrome or not. A palindrome is a string that reads the same forwards and backwards.</p>
<p>In an imaginary world where all the inputs always consist of lowercase English letters, we can do it like this:</p>
<pre><code class="language-ts">// s consists of lowercase English letters
function isPalindrome(s: string) {
  let left = 0;
  let right = s.length - 1;

  while (left &lt;= right) {
    if (s[left++] !== s[right--]) {
      return false;
    }
  }

  return true;
}
</code></pre>
<p>We initialize two pointers: <code>left</code> and <code>right</code>. <code>left</code> points to the start of the array, while the <code>right</code> points to the last element. As we loop while <code>left</code> is less than <code>right</code>, we check if they are equal. If not, we return <code>false</code> immediately. Otherwise, our <code>left</code> pointer is increased; that is, it&#39;s moved to the <em>right</em> one step, and our <code>right</code> pointer is decreased, meaning that it&#39;s moved to the <em>left</em> one step.<br>When they eventually overlap, the loop terminates, and we return <code>true</code>.</p>
<p>Let&#39;s say our string is <code>&#39;racecar&#39;</code>, which is a palindrome.<br>It will go like this:</p>
<p><img src="/blog/post-images/2024-02-29/palindrome.gif" alt="Palindrome example"></p>
<h3>Squares of a sorted array example</h3>
<p>Another example where we can use the two pointers technique is the problem <a href="https://leetcode.com/problems/squares-of-a-sorted-array" target="_blank" rel="noopener noreferrer">Squares of a Sorted Array</a>.</p>
<p>The description says:</p>
<blockquote>
<p>Given an integer array <code>nums</code> sorted in <strong>non-decreasing</strong> order, return <em>an array of <strong>the squares of each number</strong> sorted in non-decreasing order</em>.</p>
</blockquote>
<p>For example, if the input is <code>[-4, -1, 0, 3, 10]</code>, the output should be <code>[0, 1, 9, 16, 100]</code>. </p>
<p>Now obviously, we can just square each one, and then sort the array with a built-in sort method, and be done with it. But a sorting operation is never better than $O(n \ log \ n)$ runtime, so we can do it using two pointers in just $O(n)$ time:</p>
<pre><code class="language-ts">function sortedSquares(nums: number[]): number[] {
  let left = 0;
  let right = nums.length - 1;
  let result = [];

  while (left &lt;= right) {
    if (Math.abs(nums[left]) &gt; Math.abs(nums[right])) {
      result.push(nums[left++] ** 2);
    } else {
      result.push(nums[right--] ** 2);
    }
  }

  return result.reverse();
};
</code></pre>
<p>We compare the absolute value of the items that <code>left</code> and <code>right</code> are pointing to, and push the square of the greater one to our <code>result</code> array. And we return the reversed version of it. </p>
<Note>
The reason we return the reversed result is that the array is initially already sorted, and we get the largest absolute value first. The reason that works is related to how _two pointers_ work: as we start from both ends, we initially start with the smallest and largest values in the array.
</Note>

<p>Because we only make one pass through the array while comparing, and then later reversing, it ends up being $O(n)$, a better runtime than $O(n \ log \ n)$.</p>
<p>That is for the concept of Two Pointers.<br>The first problem we&#39;ll see in this chapter will be <a href="https://leetcode.com/problems/valid-palindrome" target="_blank" rel="noopener noreferrer">Valid Palindrome</a>, which requires a more careful approach than the simplified version shown here.<br>Until then, happy coding.</p>
]]></description>
            <link>https://rivea0.github.io/blog/leetcode-meditations-chapter-2-two-pointers</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/leetcode-meditations-chapter-2-two-pointers</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Thu, 29 Feb 2024 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[LeetCode Meditations: Longest Consecutive Sequence]]></title>
            <description><![CDATA[<p><img src="/blog/post-images/2024-02-27/08-lm.png" alt="Cover image"></p>
<p>The description for <a href="https://leetcode.com/problems/longest-consecutive-sequence/" target="_blank" rel="noopener noreferrer">Longest Consecutive Sequence</a> states:</p>
<blockquote>
<p>Given an unsorted array of integers <code>nums</code>, return <em>the length of the longest consecutive elements sequence.</em></p>
<p>You must write an algorithm that runs in <code>O(n)</code> time.</p>
</blockquote>
<p>For example:</p>
<pre><code class="language-ts">longestConsecutive([100, 4, 200, 1, 3, 2]);
// -&gt; 4
// The longest consecutive elements sequence is `[1, 2, 3, 4]`, the length is 4.

longestConsecutive([0, 3, 7, 2, 5, 8, 4, 6, 0, 1]);
// -&gt; 9
</code></pre>
<hr>
<p>The first idea is to get the non-duplicate elements, sort them, and then count how many of them follows a consecutive series. However, it won&#39;t be $O(n)$ time as the description says: any sorting can&#39;t be better than $O(n \ log \ n)$. But let&#39;s see how we can go about it nonetheless.</p>
<p>Getting the non-duplicate ones is easy: we can use a <code>Set</code>.<br>Sorting them is no problem either, but how can we count the consecutive ones?<br>Looping through each element, we can&#39;t just check if the current element + 1 is in the set and update the count, because that doesn&#39;t mean that there is a consecutive order.</p>
<p>So instead, we can keep track of <em>multiple counts</em>, rather than holding just one count variable.<br>In order to do that, we need to keep multiple starting points for each sequence that potentially exists. </p>
<p>The tricky part is when the sequences change. For example, in a sorted array like <code>[1, 2, 3, 4, 100, 150]</code>, it is obvious that the first sequence is of length $4$, but when it comes to <code>100</code>, we need to <em>reset our count</em> to start a new sequence.</p>
<p>In TypeScript, it might look like this:</p>
<pre><code class="language-ts">function longestConsecutive(nums: number[]): number {
  if (!nums.length) { 
    return 0; 
  }

  let counts: number[] = [];
  let count = 0;
  let numsSorted = [...new Set(nums)].sort((a, b) =&gt; a - b);

  for (let i = 0; i &lt; numsSorted.length; i++) {
    counts.push(++count);
    if (numsSorted[i + 1] !== numsSorted[i] + 1) {
      count = 0;
    }
  }

  return Math.max(...counts);
};
</code></pre>
<p>So, as we loop through each element, we keep count, and add it to our <code>counts</code> array, and only reset it when the next element is not the next one in sequence.</p>
<p>This solution passes the tests, but note that when we get to the last element, <code>numsSorted[i + 1]</code> is just <code>undefined</code>, so checking for inequality is meaningless. </p>
<h4>Time and space complexity</h4>
<p>Since we are sorting <code>nums</code>, time complexity can&#39;t be better than $O(n \ log \ n)$. The space complexity will be $O(n)$ because of the additional storage for <code>numsSorted</code> and <code>counts</code> arrays, which will grow linearly as the length <code>nums</code> increases.</p>
<p>In fact, there is a much better way of doing this, so let&#39;s take a deep breath, and see how we can improve.</p>
<hr>
<p>When you notice that we use a <code>Set</code> anyway, why not use it for what it&#39;s already good at, checking if an element is in it, instead of just pruning the duplicate elements?<br>The good part is that we don&#39;t even need to sort them.</p>
<pre><code class="language-ts">function longestConsecutive(nums: number[]): number {
  if (!nums.length) { 
    return 0;
  }

  let count: number;
  let nums_ = new Set(nums);
  let longestSeq = 0;
    
  for (let n of nums) {
    if (!nums_.has(n - 1)) {
      count = 0;
      while (nums_.has(n + count)) {
        count++;
      }

      if (count &gt; longestSeq) {
        longestSeq = count;
      }
    }
  }

  return longestSeq;
};
</code></pre>
<p>This time we check if an element has a previous one that comes <em>before</em> it; if not, we reset <code>count</code> and continue incrementing it while there is a consecutive sequence from that element onward. We update the longest sequence accordingly if the current count is greater than the previous longest sequence.</p>
<p>Here is the Python version:</p>
<pre><code class="language-python">class Solution:
    def longestConsecutive(self, nums: List[int]) -&gt; int:
        if not nums:
            return 0

        nums_ = set(nums)
        longest_seq = 0

        for n in nums:
            if n - 1 not in nums_:
                count = 0
                while n + count in nums_:
                    count += 1

                if count &gt; longest_seq:
                    longest_seq = count

        return longest_seq
</code></pre>
<h4>Time and space complexity</h4>
<p>The time complexity is just $O(n)$ this time, as we only iterate through the <code>nums</code> array.<br>The space complexity is again $O(n)$ though, because we need to allocate space for <code>nums_</code>.</p>
<hr>
<p>This was the last problem in Arrays &amp; Hashing section in <a href="https://neetcode.io/practice" target="_blank" rel="noopener noreferrer">Blind 75</a>. Next up, we&#39;ll look at the <a href="https://leetcodethehardway.com/tutorials/basic-topics/two-pointers" target="_blank" rel="noopener noreferrer">Two Pointers</a> technique. Until then, happy coding.</p>
]]></description>
            <link>https://rivea0.github.io/blog/leetcode-meditations-longest-consecutive-sequence</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/leetcode-meditations-longest-consecutive-sequence</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Tue, 27 Feb 2024 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[LeetCode Meditations: Product of Array Except Self]]></title>
            <description><![CDATA[<p><img src="/blog/post-images/2024-02-25/07-lm.png" alt="Cover image"></p>
<p>The description of <a href="https://leetcode.com/problems/product-of-array-except-self/" target="_blank" rel="noopener noreferrer">this problem</a> states that:</p>
<blockquote>
<p>Given an integer array <code>nums</code>, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is equal to the product of all the elements of</em> <code>nums</code> <em>except</em> <code>nums[i]</code>.</p>
<p>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</p>
<p>You must write an algorithm that runs in <code>O(n)</code> time and without using the division operation.</p>
</blockquote>
<p>For example:</p>
<pre><code class="language-ts">productExceptSelf([1, 2, 3, 4]);
// -&gt; [24, 12, 8, 6]

productExceptSelf([-1, 1, 0, -3, 3]);
// -&gt; [0, 0, 9, 0, 0]
</code></pre>
<hr>
<p>If we want to ignore the runtime having to be $O(n)$, a <em>very</em> naive idea is to get the product of the <em>filtered</em> version of the array... <em>for each element</em> (where the indices of the array do not include the current item&#39;s index).</p>
<p>Yes, I know that sounds terrible, but well, it works for most of the test cases until it hits one with a <strong>Time Limit Exceeded</strong> error because it&#39;s far from optimal:</p>
<pre><code class="language-ts">function productExceptSelf(nums: number[]): number[] {
  let result = [];
  for (let i = 0; i &lt; nums.length; i++) {
    result[i] = nums
      .filter((_, idx) =&gt; idx !== i)
      .reduce((acc, item) =&gt; acc * item, 1);
  }

  return result;
};
</code></pre>
<h4>Time and space complexity</h4>
<p>This is <strong>not</strong> a solution to the problem, but the time complexity will be $O(n^3)$ as we do filter and reduce for each element. As we create another array using <code>filter()</code> for each iteration, the space complexity is, I think, $O(n^2)$.</p>
<p>So, after a deep breath, let&#39;s see <a href="https://neetcode.io/" target="_blank" rel="noopener noreferrer">NeetCode</a>&#39;s solution.</p>
<hr>
<p>Here is a very <a href="https://youtu.be/bNvIQI2wAjk?si=XTH7V8HePypZOcY_&t=129" target="_blank" rel="noopener noreferrer">clever solution</a>. We&#39;ll make use of <em>prefix</em> and <em>postfix</em> variables. They have to be <code>1</code> as default, as it is the identity for multiplication. <em>Prefix</em> will start from the first element of the array and calculate the product so far up to the last element, and it&#39;ll be updated with the new value as we go.</p>
<p>So, for example, if the <code>nums</code> array is <code>[2, 3, 5]</code>, we&#39;ll go up to <code>5</code>:</p>
<pre><code>[2, 3, 5] // nums


1 -&gt; initial value of prefix


2 * 1 = 2 -&gt; nums[0] * prefix = new prefix

3 * 2 = 6 -&gt; nums[1] * prefix = new prefix


[1, 2, 6] // result
</code></pre>
<p>It might be easier to see with code:</p>
<pre><code class="language-ts">let result: number[] = [];
let prefix = 1; // Initial value

for (let i = 0; i &lt; nums.length; i++) {
  result[i] = prefix;
  prefix *= nums[i];
}
</code></pre>
<p><em>Postfix</em> will start from the end of the array, and starting from the last item, it&#39;ll calculate the products so far as well. But we need to multiply it with the values calculated with the prefix, so that we get what we want: the total product of all elements <em>before</em> and <em>after</em> the $i$th element.</p>
<p>In the example above, our result looked like <code>[1, 2, 6]</code> so far. We&#39;re going reverse this time, starting from the last element, up to the first one:</p>
<pre><code>[2, 3, 5] // nums
[1, 2, 6] // result created so far thanks to prefix

1 -&gt; initial value for postfix


6 * 1 = 6
-&gt; result[result.length - 1] * postfix = new result[result.length - 1]

5 * 1 = 5
-&gt; nums[nums.length - 1] * postfix = new postfix



2 * 5 = 10
-&gt; result[result.length - 2] * postfix = new result[result.length - 2]

3 * 5 = 15
-&gt; nums[nums.length - 2] * postfix = new postfix



1 * 15 = 15
-&gt; result[result.length - 3] * postfix = new result[result.length - 3]


[15, 10, 6] // end result
</code></pre>
<p>Again, in code:</p>
<pre><code class="language-ts">let result: number[] = [];
let prefix = 1; // Initial value

for (let i = 0; i &lt; nums.length; i++) {
  result[i] = prefix;
  prefix *= nums[i];
}

// focus(1:6)
let postfix = 1; // Initial value

for (let i = nums.length - 1; i &gt; -1; i--) {
  result[i] *= postfix;
  postfix *= nums[i];
}
</code></pre>
<Note>
We multiply the value in `result[i]` with `postfix` this time, instead of just assigning `result[i]` the value of `postfix` (as we did with `prefix`).
</Note>

<hr>
<p>One deep breath, and here is the Python version of the whole thing:</p>
<pre><code class="language-python">class Solution:
    def productExceptSelf(self, nums: List[int]) -&gt; List[int]:
        result = [1] * (len(nums))
        prefix = 1
        postfix = 1

        for i in range(len(nums)):
            result[i] = prefix
            prefix *= nums[i]

        for i in range(len(nums) - 1, -1, -1):
            result[i] *= postfix
            postfix *= nums[i]

        return result
</code></pre>
<p>And here is the TypeScript version:</p>
<pre><code class="language-ts">function productExceptSelf(nums: number[]): number[] {
    let result = Array.from({ length: nums.length }, () =&gt; 1);
    let prefix = 1;
    let postfix = 1;

    for (let i = 0; i &lt; nums.length; i++) {
        result[i] = prefix;
        prefix *= nums[i];
    }

    for (let i = nums.length - 1; i &gt; -1; i--) {
        result[i] *= postfix;
        postfix *= nums[i];
    }

    return result;
};
</code></pre>
<hr>
<p>Once again, to understand the idea better, if our array is <code>[🌸, 🍁, 🍀, 🌼]</code> then, at the end of the first loop where we used <code>prefix</code>, <code>result</code> looks like this:</p>
<pre><code>[
    1, 
    🌸, 
    🌸 * 🍁, 
    🌸 * 🍁 * 🍀
]
</code></pre>
<p>And, after the second loop where we used <code>postfix</code>, <code>result</code> looks like this:</p>
<pre><code>[
    🍁 * 🍀 * 🌼 * (1),
    🍀 * 🌼 * (🌸),
    🌼 * (🌸 * 🍁),
    1 * (🌸 * 🍁 * 🍀)
]
</code></pre>
<Note>
The values inside the parentheses are the previous values of `result`.
</Note>

<h4>Time and space complexity</h4>
<p>This version has $O(n)$ time complexity, as each loop just iterates through the elements of <code>nums</code> once, which is linear time.</p>
<p>Since we use a fixed amount of space, the space complexity is technically $O(n)$ because we initialize <code>result</code> with the length of <code>nums</code>, but the description for this problem states that <em>the output array <strong>does not</strong> count as extra space</em>, so it is $O(1)$.</p>
<hr>
<p>Next up is <a href="https://leetcode.com/problems/longest-consecutive-sequence/" target="_blank" rel="noopener noreferrer">Longest Consecutive Sequence</a>, until then, happy coding.</p>
]]></description>
            <link>https://rivea0.github.io/blog/leetcode-meditations-product-of-array-except-self</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/leetcode-meditations-product-of-array-except-self</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Sun, 25 Feb 2024 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[LeetCode Meditations: Top K Frequent Elements]]></title>
            <description><![CDATA[<p><img src="/blog/post-images/2024-02-23/06-lm.png" alt="Cover image"></p>
<p>Let&#39;s start with the description for <a href="https://leetcode.com/problems/top-k-frequent-elements/" target="_blank" rel="noopener noreferrer">Top K Frequent Elements</a>:</p>
<blockquote>
<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k</code> <em>most frequent elements</em>. You may return the answer in <strong>any order</strong>.</p>
</blockquote>
<p>For example:</p>
<pre><code class="language-ts">topKFrequent([1, 1, 1, 2, 2, 3], 2);
// -&gt; Output: [1, 2]

topKFrequent([1], 1);
// -&gt; Output: [1]
</code></pre>
<p>One of the constraints indicates that <em>it is <strong>guaranteed</strong> that the answer is <strong>unique</strong>.</em></p>
<hr>
<p>The first obvious idea is to keep a frequency map. We can do it easily like:</p>
<pre><code class="language-ts">let count = new Map();

nums.forEach(n =&gt; {
  count.set(n, (count.get(n) ?? 0) + 1);
});
</code></pre>
<Note>
What we do here is a bit similar to `setdefault()` in Python; when `n` does not exist in `count`, we first set its value to `0`, otherwise just increment it.
</Note>

<p>Since we need to return the <em>k most frequent elements</em>, we need to do a bit more work. My idea is to sort the <code>count</code> map by values (the <em>frequencies</em>) in reverse order to keep the most frequent elements in front, then get only the keys (the <em>numbers</em>), and slice it until <em>k</em>:</p>
<pre><code class="language-ts">return [...count.entries()]
  .sort(([, a], [, b]) =&gt; b - a)
  .map((i) =&gt; i[0])
  .slice(0, k);
</code></pre>
<p>All in all, it looks like this:</p>
<pre><code class="language-ts">function topKFrequent(nums: number[], k: number): number[] {
  let count = new Map();

  nums.forEach(n =&gt; {
    count.set(n, (count.get(n) ?? 0) + 1);
  });

  return [...count.entries()]
    .sort(([, a], [, b]) =&gt; b - a)
    .map(i =&gt; i[0])
    .slice(0, k);
};
</code></pre>
<h4>Time and space complexity</h4>
<p>Since we have a sorting operation, the time complexity cannot be better than $O(n \ log \ n)$. The space complexity is $O(n)$ as it will grow linearly as the <code>nums</code> array grows.</p>
<hr>
<h5>Using Python</h5>
<p>After one deep breath, we can try converting the above code into Python:</p>
<pre><code class="language-python">class Solution:
    def topKFrequent(self, nums: List[int], k: int) -&gt; List[int]:
        count = {}

        for n in nums:
            count[n] = count.get(n, 0) + 1

        sorted_items = sorted(count.items(), key=lambda i: i[1], reverse=True)

        return list(map(lambda x: x[0], sorted_items))[:k]
</code></pre>
<p>What we do is pretty much the same as the TypeScript version above. </p>
<p>The problem description also adds a &quot;<strong>follow up</strong>,&quot; that the algorithm&#39;s time complexity must be better than $O(n \ log \ n)$, where $n$ is the array&#39;s size. Because we&#39;re doing the sorting, it doesn&#39;t satisfy this criterion. So, after one more deep breath, let&#39;s see <a href="https://neetcode.io/" target="_blank" rel="noopener noreferrer">NeetCode</a>&#39;s solution.</p>
<hr>
<p>It turns out, there is a <a href="https://youtu.be/YPTqKIgVk-k?si=-3tyBJiMZ1e0K0W3&t=178" target="_blank" rel="noopener noreferrer">better solution</a> with $O(n)$ time complexity using the <a href="https://en.wikipedia.org/wiki/Bucket_sort" target="_blank" rel="noopener noreferrer">bucket sort algorithm</a>.</p>
<p>We can create an array of size $n$ where each index corresponds to the <em>count</em> of elements. So, the values that occur twice will be stored in the second index, if all the elements are unique, all of them will be in the index <code>1</code>, etc. </p>
<p>In that case, if all elements are the same, they will be at the very last index because the count of that element will be $n$, the length of the <code>nums</code> array.</p>
<pre><code class="language-python">class Solution:
    def topKFrequent(self, nums: List[int], k: int) -&gt; List[int]:
        count = {}
        freq = [[] for i in range(len(nums) + 1)]

        for n in nums:
            count[n] = 1 + count.get(n, 0)
        for n, c in count.items():
            freq[c].append(n)

        res = []
        for i in range(len(freq) - 1, 0, -1):
            for n in freq[i]:
                res.append(n)
                if len(res) == k:
                    return res
</code></pre>
<p>Note that in the last loop, we go in reverse, because higher the index, higher the frequency of values.</p>
<p>In TypeScript, it might look like this:</p>
<pre><code class="language-ts">function topKFrequent(nums: number[], k: number): number[] {
  let count = new Map();
  let freq = Array.from({ length: nums.length + 1 }, () =&gt; []);

  for (const n of nums) {
    count.set(n, (count.get(n) ?? 0) + 1);
  }

  for (const [n, c] of count.entries()) {
    freq[c].push(n);
  }
    
  let res = [];
  for (let i = freq.length - 1; i &gt; 0; i--) {
    for (const n of freq[i]) {
      res.push(n);
      if (res.length === k) { 
        return res;
      }
    }
  }
};
</code></pre>
<h4>Time and space complexity</h4>
<p>The time complexity is $O(n)$ this time, because in the worst case where each element is unique, each loop will iterate over $n$ elements at most. And, the space complexity is $O(n)$ as well, because the storage we use will grow linearly as the <code>nums</code> itself grows.</p>
<hr>
<p>Next up is the problem <a href="https://leetcode.com/problems/product-of-array-except-self/" target="_blank" rel="noopener noreferrer">Product of Array Except Self</a>. Until then, don&#39;t forget to take deep breaths, and happy coding.</p>
]]></description>
            <link>https://rivea0.github.io/blog/leetcode-meditations-top-k-frequent-elements</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/leetcode-meditations-top-k-frequent-elements</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Fri, 23 Feb 2024 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[LeetCode Meditations: Group Anagrams]]></title>
            <description><![CDATA[<p><img src="/blog/post-images/2024-02-21/05-lm.png" alt="Cover image"></p>
<p>Let&#39;s start with the description for <a href="https://leetcode.com/problems/group-anagrams/description/" target="_blank" rel="noopener noreferrer">Group Anagrams</a>:</p>
<blockquote>
<p>Given an array of strings <code>strs</code>, group <strong>the anagrams</strong> together. You can return the answer in <strong>any order</strong>.</p>
<p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>
</blockquote>
<p>For example:</p>
<pre><code class="language-ts">groupAnagrams([&#39;eat&#39;, &#39;tea&#39;, &#39;tan&#39;, &#39;ate&#39;, &#39;nat&#39;, &#39;bat&#39;]);
// -&gt; [ [&#39;bat&#39;], [&#39;nat&#39;, &#39;tan&#39;], [&#39;ate&#39;, &#39;eat&#39;, &#39;tea&#39;] ]

groupAnagrams([&#39;&#39;]);
// -&gt; [ [&#39;&#39;] ]

groupAnagrams([&#39;a&#39;]);
// -&gt; [ [&#39;a&#39;] ]
</code></pre>
<p>And, as one of the constraints says, <em>each of the strings will consist of lowercase English letters</em>.</p>
<hr>
<p>One thing to remember from the previous <a href="https://rivea0.github.io/blog/leetcode-meditations-valid-anagram" target="_blank" rel="noopener noreferrer">Valid Anagram</a> problem is that we can easily check if two strings are anagrams of each other by comparing their <em>sorted</em> versions.</p>
<p>So, we can use a hash table to store the sorted words. In that case, all words that are anagrams of each other will be grouped together in an <em>array</em>, and share the same key:</p>
<pre><code class="language-ts">function groupAnagrams(strs: string[]): string[][] {
  let words: { [word: string]: string[] } = {};

  for (let s of strs) {
    let sortedWord = [...s].sort().join(&#39;&#39;);
    (sortedWord in words) ? words[sortedWord].push(s) : words[sortedWord] = [s];
  }

  return Object.values(words);
};
</code></pre>
<h4>Time and space complexity</h4>
<p>Since we&#39;re using the sorting operation, time complexity will be $O(n \ log \ n)$ as it is the best we can do with sorting. But we&#39;re doing the sorting operation <em>for each element in <code>strs</code></em>, so the loop itself has an $O(n)$ time complexity.<br>To not confuse ourselves, we&#39;ll use another variable, $m$, to denote the length of <code>strs</code>, that is, the number of times we&#39;ll iterate for each element. Overall, the time complexity will be $O(m \cdot n \ log \ n)$.</p>
<p>We can say that space complexity is $O(m \cdot n)$ where $m$ is the length of <code>strs</code> and $n$ is the length of the longest string, because in the worst case where all strings are anagrams of each other, the value array can contain $m$ strings, and the key&#39;s length will be $n$, so, <code>words</code> will grow proportionally.</p>
<h5>Using Python</h5>
<Note>
To reflect the ternary operation in the TypeScript version:

<pre><code class="language-ts">(sortedWord in words) ? words[sortedWord].push(s) : words[sortedWord] = [s];
</code></pre>
<p>We could write it in Python like:</p>
<pre><code class="language-python">words[sorted_word].append(s) if sorted_word in words else words[sorted_word] = [s]
</code></pre>
<p>But since it&#39;s a bit clunky, we can use <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" target="_blank" rel="noopener noreferrer"><code>setdefault()</code></a> where we&#39;re setting the default value of  <code>words[sorted_word]</code> to <code>[]</code>.<br></Note></p>
<p>It might look like this in Python:</p>
<pre><code class="language-python">class Solution:
    def groupAnagrams(self, strs: List[str]) -&gt; List[List[str]]:
        words = {}

        for s in strs:
            sorted_word = &#39;&#39;.join(sorted(s))
            words.setdefault(sorted_word, []).append(s)

        return words.values()
</code></pre>
<p>Now, after taking a deep breath, we can look at NeetCode&#39;s solution.</p>
<hr>
<p>And, voilà, <a href="https://youtu.be/vzdNOK2oB2E?si=Y4OxVBiArZYomm5t&t=118" target="_blank" rel="noopener noreferrer">a more efficient solution</a> exists:</p>
<pre><code class="language-python">from collections import defaultdict

class Solution:
    def groupAnagrams(self, strs: List[str]) -&gt; List[List[str]]:
        res = defaultdict(list)

        for s in strs:
            count = [0] * 26 # a ... z

            for c in s:
                count[ord(c) - ord(&#39;a&#39;)] += 1

            res[tuple(count)].append(s)

        return res.values()
</code></pre>
<p>Here, the constraint we mentioned in the beginning gives some perspective to this solution:<br>For each string, we can count the number of characters from <code>&#39;a&#39;</code> to <code>&#39;z&#39;</code>, because the strings will be just lowercase English letters. </p>
<p>We can still use a hash table, and map each of the 26 letters to an index, and increase the value at that index every time we see that letter. The keys will be these arrays of length 26, and the values will be the arrays of strings themselves.</p>
<p>For example, if we have these strings:</p>
<pre><code class="language-python">[&#39;eat&#39;, &#39;tea&#39;, &#39;tan&#39;]
</code></pre>
<p>Then, <code>res</code> will look like this:</p>
<pre><code class="language-python">{
    (1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0): [&#39;tan&#39;],
    (1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0): [&#39;eat&#39;, &#39;tea&#39;]
}
</code></pre>
<Note>
`count` is converted into a `tuple` because `list`s cannot be keys as they are mutable. You can [read more on this](https://wiki.python.org/moin/DictionaryKeys).
</Note>

<p>Also note that in the code, we use the ASCII numbers of the characters to get their index, for example, the count of <code>&#39;a&#39;</code> will be at the 0th index, so it&#39;s basic offset arithmetic.</p>
<p>For instance, the ASCII number of <code>&#39;z&#39;</code> is <code>122</code>, and <code>&#39;a&#39;</code> is <code>97</code>, when you get the difference, it will be <code>25</code>, meaning that the <code>&#39;z&#39;</code> will be at the end of the array, that is, the 25th index.</p>
<hr>
<p>After taking another deep breath, let&#39;s try converting it into TypeScript:</p>
<pre><code class="language-ts">function groupAnagrams(strs: string[]): string[][] {
  let result: { [count: string]: string[] } = {};

  for (let s of strs) {
    let count = new Array(26).fill(0);

    for (let c of s) {
      count[c.charCodeAt(0) - &#39;a&#39;.charCodeAt(0)]++;
    }

    const key = count.toString();

    !(key in result) ? result[key] = [s] : result[key].push(s);
  }

  return Object.values(result);
};
</code></pre>
<Note>
While we couldn't use lists as keys in the Python version, we'll just convert the `count` array into string with `toString()` in this TypeScript version and use it as key. 
</Note>

<h4>Time and space complexity</h4>
<p>The time complexity will be $O(m \cdot n)$ where $m$ is the total number of strings and the $n$ is the length of a string.</p>
<p>For the space complexity, the dominant item will be the <code>res</code> variable (<em>the <code>count</code> array won&#39;t matter much because it won&#39;t grow with the input size, it is constant, or $O(1)$</em>).<br>In the case where each key is unique, the space complexity will be $O(m \cdot n)$ where $m$ is the total number of strings, and $n$ is the length of the longest string.</p>
<hr>
<p>And, that&#39;s the end of Group Arrays. The next one will be <a href="https://leetcode.com/problems/top-k-frequent-elements/" target="_blank" rel="noopener noreferrer">Top K Frequent Elements</a>, until then, happy coding.</p>
]]></description>
            <link>https://rivea0.github.io/blog/leetcode-meditations-group-anagrams</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/leetcode-meditations-group-anagrams</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Wed, 21 Feb 2024 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[LeetCode Meditations: Two Sum]]></title>
            <description><![CDATA[<p><img src="/blog/post-images/2024-02-19/04-lm.png" alt="Cover image"></p>
<p>Let&#39;s see what the description says for <a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener noreferrer">this one</a>:</p>
<blockquote>
<p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>
<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>
<p>You can return the answer in any order. </p>
</blockquote>
<p>For example:</p>
<pre><code class="language-ts">twoSum([2, 7, 11, 15], 9);
// -&gt; [0, 1]
// Because nums[0] + nums[1] == 9, we return [0, 1].

twoSum([3, 2, 4], 6);
// -&gt; [1, 2]

twoSum([3, 3], 6);
// -&gt; [0, 1]
</code></pre>
<p>And, as the constraints say, <strong>only one valid answer exists</strong>.</p>
<hr>
<p>The very first naive solution I thought of was this:</p>
<pre><code class="language-ts">function twoSum(nums: number[], target: number): number[] {
  for (let i = 0; i &lt; nums.length; i++) {
    for (let j = i + 1; j &lt; nums.length; j++) {
      if (nums[i] + nums[j] === target) {
        return [i, j];
      }
    }
  }
};
</code></pre>
<h4>Time and space complexity</h4>
<p>This solution passes the tests alright, but, the time complexity is $O(n^2)$ because we have a nested loop. The good thing is that the space complexity is $O(1)$ as we don&#39;t use additional memory.</p>
<p>Still, the time complexity ruins our day, so there must be a better way.</p>
<hr>
<p>A better way is a &quot;one-pass solution,&quot; where NeetCode explains the concept <a href="https://youtu.be/KLlXCFG5TnA?t=111" target="_blank" rel="noopener noreferrer">around the second minute mark of the video</a>.</p>
<p>The idea is that for each item, we can check if <code>target - item</code> exists in the array that has a different index than that item. And the crux of the idea is that we can use a hash table to store the indices, and return immediately after finding the complementary item:</p>
<pre><code class="language-ts">function twoSum(nums: number[], target: number): number[] {
  let indicesOfNums: { [n: number]: number } = {};

  for (let i = 0; i &lt; nums.length; i++) {
    if (target - nums[i] in indicesOfNums) {
      return [indicesOfNums[target - nums[i]], i];
    }
    indicesOfNums[nums[i]] = i;
  }
};
</code></pre>
<p>And, indeed, it passes the tests. 🎉</p>
<h4>Time and space complexity</h4>
<p>Here, time complexity is $O(n)$ because in the worst case, we&#39;re iterating through the whole array, so, as the length of the array increases, the time complexity will increase linearly. Nevertheless, it is better than our initial solution. </p>
<p>The space complexity, however, becomes $O(n)$ because we&#39;re storing an additional data structure, and in the worst case, it is proportional to the array&#39;s length.</p>
<h5>Using Python</h5>
<p>We can translate the above code into Python:</p>
<pre><code class="language-python">class Solution:
    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:
        indices_of_nums = {}

        for i, num in enumerate(nums):
            if target - num in indices_of_nums:
                return [indices_of_nums[target - num], i]
            
            indices_of_nums[num] = i
</code></pre>
<p>Now it&#39;s time to take a deep breath. </p>
<p>Let&#39;s take a look at NeetCode&#39;s solution.</p>
<hr>
<p>NeetCode&#39;s solution turns out to be the same as the Python version above, except that it is slightly more explicit:</p>
<pre><code class="language-python">class Solution:
    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:
        prevMap = {} # val : index

        for i, n in enumerate(nums):
            diff = target - n
            if diff in prevMap:
                return [prevMap[diff], i]
            prevMap[n] = i
        
        return
</code></pre>
<p>And, that&#39;s it for Two Sums, we can take one more deep breath. </p>
<p>Next up is <a href="https://leetcode.com/problems/group-anagrams/" target="_blank" rel="noopener noreferrer">Group Anagrams</a>, until then, happy coding.</p>
]]></description>
            <link>https://rivea0.github.io/blog/leetcode-meditations-two-sum</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/leetcode-meditations-two-sum</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Mon, 19 Feb 2024 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[LeetCode Meditations: Valid Anagram]]></title>
            <description><![CDATA[<p><img src="/blog/post-images/2024-02-17/03-lm.png" alt="Cover image"></p>
<p>For <a href="https://leetcode.com/problems/valid-anagram" target="_blank" rel="noopener noreferrer">this one</a>, let&#39;s start with the description:</p>
<blockquote>
<p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> <em>if</em> <code>t</code> <em>is an anagram of</em> <code>s</code><em>, and</em> <code>false</code> <em>otherwise</em>.</p>
<p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>
</blockquote>
<p>And, both arguments will consist of lowercase English letters.</p>
<p>For example:</p>
<pre><code class="language-ts">isAnagram(&#39;anagram&#39;, &#39;nagaram&#39;);
// -&gt; true

isAnagram(&#39;rat&#39;, &#39;car&#39;);
// -&gt; false
</code></pre>
<hr>
<p>Here, we can use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="noopener noreferrer"><code>Map</code></a> to store the letter counts in both strings. If the same letter in the second string doesn&#39;t occur the same number of times as in the first string, we know that they are not anagrams.</p>
<p>Of course, the first thing to check is if the lengths of the strings are equal, because if they are not, then there is no way they are anagrams in the first place.</p>
<pre><code class="language-ts">function isAnagram(s: string, t: string): boolean {
  if (s.length !== t.length) {
    return false;
  }

  let isValid = true;

  let sDict = new Map();
  let tDict = new Map();

  // Initialize the objects with letters mapping to letter counts 
  for (const letter of s) {
    const letterCount = sDict.get(letter);
    !letterCount ? sDict.set(letter, 1) : sDict.set(letter, letterCount + 1);
  }

  for (const letter of t) {
    const letterCount = tDict.get(letter);
    !letterCount ? tDict.set(letter, 1) : tDict.set(letter, letterCount + 1);
  }
    
  // Check if a letter doesn&#39;t occur the same number of times
  sDict.forEach((letterCount, letter) =&gt; {
    if (tDict.get(letter) !== letterCount) {
      isValid = false;
    }
  });

  return isValid;
};
</code></pre>
<h4>Time and space complexity</h4>
<p>My guess for the time complexity is $O(n)$ as we iterate through the string&#39;s length to create the map. Space complexity would be $O(n)$ as well, because creating the map grows linearly as the length of the string increases.</p>
<h5>Using Python</h5>
<p>Many things are potential one-liners in Python, so </p>
<pre><code class="language-python">collections.Counter(s) == collections.Counter(t)
</code></pre>
<p>is the easiest thing to do. </p>
<p>But to recreate the above code, it might look like this:</p>
<pre><code class="language-python">class Solution:
    def isAnagram(self, s: str, t: str) -&gt; bool:
        if len(s) != len(t):
            return False
        
        s_dict = {}
        t_dict = {}

        for letter in s:
            s_dict[letter] = s_dict.get(letter, 0) + 1

        for letter in t:
            t_dict[letter] = t_dict.get(letter, 0) + 1

        for letter, letter_count in s_dict.items():
            if t_dict.get(letter, 0) != letter_count:
                return False
        
        return True
</code></pre>
<p>Note that we don&#39;t need an <code>isValid</code> flag in this case, as we&#39;re not checking the letter counts inside a function with limited scope inside some function like a <code>forEach</code>.</p>
<p>Also inside the last loop, as the letter in <code>s_dict</code> may not be in <code>t_dict</code>, we&#39;re using <code>t_dict.get(letter, 0)</code>, so if it doesn&#39;t exist, it would be initialized with the count <code>0</code>.<br>I don&#39;t think that&#39;s a good solution at all, though.<br>So let&#39;s take a deep breath, and look at NeetCode&#39;s solution.</p>
<hr>
<p>NeetCode&#39;s solution was pretty similar to the Python version above.</p>
<pre><code class="language-python">class Solution:
    def isAnagram(self, s: str, t: str) -&gt; bool:
        if len(s) != len(t):
            return False
        
        countS, countT = {}, {}

        for i in range(len(s)):
            countS[s[i]] = 1 + countS.get(s[i], 0)
            countT[t[i]] = 1 + countT.get(t[i], 0)

        for c in countS:
            if countS[c] != countT.get(c, 0):
                return False
        
        return True
</code></pre>
<p>The time and space complexity in this case are $O(n)$ as well.</p>
<p>To get rid of the extra memory usage and make the space complexity $O(1)$, he mentions the solution where you can compare the sorted versions of the strings:</p>
<pre><code class="language-python">sorted(s) == sorted(t)
</code></pre>
<p>In the case of TypeScript (or JavaScript) it could be:</p>
<pre><code class="language-ts">[...s].sort().join(&#39;&#39;) === [...t].sort().join(&#39;&#39;);
</code></pre>
<Note>
This one wouldn't work as intended:

<pre><code class="language-ts">[...s].sort() === [...t].sort();
</code></pre>
<p>Because <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#description" target="_blank" rel="noopener noreferrer">arrays are objects</a>, they&#39;ll be equal to each other only if they point to the same object in memory. In this case, even if <code>[...s].sort()</code> and <code>[...t].sort()</code> look like they are the same, they won&#39;t be equal to each other.<br></Note></p>
<p>But, of course, sorting algorithms can&#39;t get better than $O(n \ log \ n)$ when it comes to time complexity, and some of them use $O(n)$ space to create additional storage as well, so it&#39;s another trade-off.</p>
<p>We can take one more deep breath now.</p>
<p>Next up is <a href="https://leetcode.com/problems/two-sum" target="_blank" rel="noopener noreferrer">Two Sum</a>, until then, happy coding.</p>
]]></description>
            <link>https://rivea0.github.io/blog/leetcode-meditations-valid-anagram</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/leetcode-meditations-valid-anagram</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Sat, 17 Feb 2024 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[LeetCode Meditations: Contains Duplicate]]></title>
            <description><![CDATA[<p><img src="/blog/post-images/2024-02-15/02-lm.png" alt="Cover image"></p>
<p>For <a href="https://leetcode.com/problems/contains-duplicate/description/" target="_blank" rel="noopener noreferrer">this problem</a>, let&#39;s start with the description: </p>
<blockquote>
<p>Given an integer array <code>nums</code>, return <code>true</code> if any value appears <strong>at least twice</strong> in the array, and return <code>false</code> if every element is distinct.</p>
</blockquote>
<p>For example:</p>
<pre><code class="language-ts">[1, 2, 3, 1] // true
[1, 2, 3, 4] // false
[1, 1, 1, 3, 3, 4, 3, 2, 4, 2] // true
</code></pre>
<hr>
<p>We can use a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="noopener noreferrer"><code>Set</code></a> which only keeps the values without duplicates.</p>
<p>For each example, it would look like this:</p>
<pre><code class="language-js">new Set([1, 2, 3, 1]);
// -&gt; Set(3) { 1, 2, 3 }

new Set([1, 2, 3, 4]);
// -&gt; Set(4) { 1, 2, 3, 4 }

new Set([1, 1, 1, 3, 3, 4, 3, 2, 4, 2]);
// -&gt; Set(4) { 1, 3, 4, 2 }
</code></pre>
<p>In that case, the difference between the <em>size</em> of the set and the length of the original array will tell us whether it contains duplicates or not. If they are not equal to each other, that means the array has duplicates.</p>
<p>Using TypeScript, my solution was this:</p>
<pre><code class="language-ts">function containsDuplicate(nums: number[]): boolean {
  return !(new Set(nums).size === nums.length);
};
</code></pre>
<p>It&#39;s obvious from the size and length comparison that this solution works, and indeed, it passes the tests.</p>
<h4>Time &amp; space complexity</h4>
<p>My guess for the time complexity is that it&#39;s $O(n)$, because the <code>Set</code> constructor iterates over each element in the array it is given as the argument.<br>I think that the space complexity is also $O(n)$, because in the worst case where each element is unique, <code>Set</code> needs to allocate memory for each of them. </p>
<h5>Using Python</h5>
<p>We can translate this solution into Python like this as well:</p>
<pre><code class="language-python">class Solution:
    def containsDuplicate(self, nums: List[int]) -&gt; bool:
        return len(set(nums)) != len(nums)
</code></pre>
<hr>
<p>It&#39;s now time to take a breath.</p>
<p>Let&#39;s look at <a href="https://www.youtube.com/watch?v=3OamzN90kPg" target="_blank" rel="noopener noreferrer">NeetCode&#39;s solution</a>:</p>
<pre><code class="language-python">class Solution:
    def containsDuplicate(self, nums: List[int]) -&gt; bool:
        hashset = set()

        for n in nums:
            if n in hashset:
                return True
            hashset.add(n)

        return False
</code></pre>
<p>The worst case is still $O(n)$, and space complexity is $O(n)$ as well in the case of each element being unique.</p>
<p>However, I think it&#39;s an improvement as compared to my initial solution, because instead of creating the set in one go, we can return immediately if the element is in the set as we go through adding each one.</p>
<p>As we have reached the end of this meditation, we can take one more deep breath. Next up is the <a href="https://leetcode.com/problems/valid-anagram/" target="_blank" rel="noopener noreferrer">Valid Anagram</a> problem. Until then, happy coding.</p>
]]></description>
            <link>https://rivea0.github.io/blog/leetcode-meditations-contains-duplicate</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/leetcode-meditations-contains-duplicate</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Thu, 15 Feb 2024 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[LeetCode Meditations — Chapter 1: Arrays & Hashing]]></title>
            <description><![CDATA[<p><img src="/blog/post-images/2024-02-13/01-lm-ch1.png" alt="Cover image"></p>
<p>Before starting the <a href="https://neetcode.io/practice" target="_blank" rel="noopener noreferrer">Arrays &amp; Hashing section in the Blind 75 list</a>, let&#39;s <em>very briefly</em> get to know our prerequisite topics for now:</p>
<ul>
<li>dynamic arrays</li>
<li>hash tables</li>
<li>prefix sums</li>
</ul>
<br />

<h2>Dynamic Arrays</h2>
<p>Dynamic arrays are, well, dynamic. They&#39;re flexible, and can change their size during execution.</p>
<p>Python&#39;s <code>list</code> type is a dynamic array.<br>We can create an <code>items</code> list, for example:</p>
<pre><code class="language-python">items = [3, 5]
</code></pre>
<p>The <em>length</em> of <code>items</code> is obviously 2, but its <em>capacity</em> is greater than or equal to its length. In fact, <strong>capacity</strong> refers to the total size, whereas <strong>length</strong> is the actual size.</p>
<p>Since dynamic arrays are still arrays, they need a <em>contiguous block of memory</em>.</p>
<p>We can easily add an item to <code>items</code>:</p>
<pre><code class="language-python">items.append(7)
</code></pre>
<p>And add some more:</p>
<pre><code class="language-python">items.append(9)
items.append(11)
items.append(13)
</code></pre>
<p>All the while, the length and capacity of <code>items</code> keeps growing dynamically.</p>
<p><img src="/blog/post-images/2024-02-13/dynamic-arrays.gif" alt="Dynamic arrays example"></p>
<h4>Time and space complexity</h4>
<p>Accessing an element is $O(1)$ as we have <a href="https://en.wikipedia.org/wiki/Random_access" target="_blank" rel="noopener noreferrer">random access</a>.</p>
<p>Inserting a new element or deleting an element is $O(n)$ (think about having to shift all the elements before inserting or after deleting an item). But, <a href="https://en.wikipedia.org/wiki/Amortized_analysis" target="_blank" rel="noopener noreferrer">in order to not be too pessimistic, we can look at amortized analysis</a>, in that case, inserting/deleting at the end of the array becomes $O(1)$.  </p>
<p>Space complexity is $O(n)$, because of the excess space.</p>
<br />

<h2>Hash Tables</h2>
<p>A hash table maps keys to values, implementing an <em>associative array</em>.</p>
<p>Python&#39;s <code>dict</code> is one example:</p>
<pre><code class="language-python">number_of_petals = {
    &#39;Euphorbia&#39;: 2, 
    &#39;Trillium&#39;: 3, 
    &#39;Columbine&#39;: 5,
}
</code></pre>
<p>Also JavaScript&#39;s &quot;object&quot;s:</p>
<pre><code class="language-js">let numberOfMoons = {
  &#39;Earth&#39;: 1,
  &#39;Mars&#39;: 2,
  &#39;Jupiter&#39;: 95,
  &#39;Saturn&#39;: 146,
  &#39;Uranus&#39;: 27,
  &#39;Neptune&#39;: 14,
};
</code></pre>
<p>There are two important ingredients for a hash table:</p>
<ul>
<li>an array of &quot;buckets&quot; to store the data</li>
<li>a hash function to map the data to a specific index in the array</li>
</ul>
<p>Hashes are usually large integers, so to find an index, we can take the result of the hash modulo the array&#39;s length.</p>
<p><img src="/blog/post-images/2024-02-13/hash-tables.gif" alt="Hash tables example"></p>
<Note>
The **hash function** that's mapping the elements to buckets is <mark>not</mark> the `hash()` used in the visual (it's just a [Python function](https://docs.python.org/3/library/functions.html#hash) to calculate the hash value of an object). The hash function in this case is the modulo ( `%` ) operation.
</Note>

<p>Here, with the hash value of each item&#39;s key, we calculate the remainder when it&#39;s divided by the length of the array to find which &quot;bucket&quot; it should go to.</p>
<p>The ratio of the number of elements to the number of buckets is called the <strong>load factor</strong>, and the higher it gets, the more <strong>collisions</strong> (when elements have to be inserted at the same place in the array) occur.</p>
<p>There are some collusion resolution tactics like <strong>linear probing</strong> (probing through the array until finding an empty bucket) and <strong>chaining</strong> (chaining multiple elements as linked lists), but we&#39;ll not go into those for now.</p>
<h4>Time and Space Complexity</h4>
<p>The average case for searching, inserting, and deleting operations are $O(1)$ as we use keys to look up the values.</p>
<p>Space complexity is $O(n)$ as it grows linearly with the amount of elements.</p>
<br />

<h2>Prefix Sums</h2>
<p>A prefix sum is the sequence of numbers we get after adding the sums of running totals of another sequence.<br>It&#39;s also called the <strong>cumulative sum</strong>.</p>
<p>The first element of the resulting array is the first element of the input array. That&#39;s fine. We start at the second item, and add the previous numbers each time as we go. That is:</p>
<p>$$result[i] = \begin{cases} nums[0] &amp; \text{if } i \text{ is zero} \ result[i - 1] + nums[i] &amp; \text{if  } i \geq 1 \end{cases}$$</p>
<p>In code, we can implement that easily:</p>
<pre><code class="language-python">def runningSum(nums):
    result = [nums[0]]
    
    for i in range(1, len(nums)):
        result.append(result[i - 1] + nums[i])

    return result
</code></pre>
<p><img src="/blog/post-images/2024-02-13/prefix-sums.gif" alt="Prefix sums example"></p>
<h4>Time and space complexity</h4>
<p>Time complexity for a prefix sum is $O(n)$ because we&#39;re iterating over each of the elements in the array.<br>The space complexity is also $O(n)$ because the need of space grows as the length of the original array grows.</p>
<hr>
<p>And, we&#39;re done with the introduction to the first chapter, now it&#39;s time to take a breath and notice your surroundings. Maybe it&#39;s raining, or a bird sings nearby, or there&#39;s just the silence of the night. Or neither of them, that&#39;s all fine.</p>
<p>The first problem to look at will be <a href="https://leetcode.com/problems/contains-duplicate/" target="_blank" rel="noopener noreferrer">Contains Duplicate</a>, so until then, happy coding.</p>
<h5>References</h5>
<ul>
<li><a href="https://brilliant.org/wiki/dynamic-arrays/#dynamic-arrays-in-python" target="_blank" rel="noopener noreferrer">Dynamic Arrays in Python - brilliant.org</a></li>
<li><a href="https://brilliant.org/wiki/hash-tables" target="_blank" rel="noopener noreferrer">Hash Tables - brilliant.org</a></li>
<li><a href="https://medium.com/basecs/taking-hash-tables-off-the-shelf-139cbf4752f0" target="_blank" rel="noopener noreferrer">&quot;Taking Hash Tables Off The Shelf&quot; - Vaidehi Joshi</a></li>
<li><a href="https://leetcodethehardway.com/tutorials/basic-topics/prefix-sum" target="_blank" rel="noopener noreferrer">Prefix Sum - LeetCode The Hard Way</a></li>
</ul>
]]></description>
            <link>https://rivea0.github.io/blog/leetcode-meditations-chapter-1-arrays-and-hashing</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/leetcode-meditations-chapter-1-arrays-and-hashing</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Tue, 13 Feb 2024 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[LeetCode Meditations: Introduction]]></title>
            <description><![CDATA[<p><img src="/blog/post-images/2024-02-13/00-lm-intro.png" alt="Cover image"></p>
<p>The words &quot;LeetCode&quot; and &quot;meditation&quot; sound like an oxymoron when used together, after all, one thing that almost everyone can agree is that <a href="https://leetcode.com/" target="_blank" rel="noopener noreferrer">LeetCode</a> is challenging. It&#39;s called <em>grinding</em> LeetCode for a reason.</p>
<p>It doesn&#39;t have anything to do with the platform, of course, but rather what it represents: tackling problems for hours on end, usually to find a solution that is even harder to understand.</p>
<p>However, what is more challenging is finding a roadmap to solving those problems with very little knowledge of data structures and algorithms. There are prerequisites to solve one type of problem, and there are prerequisites to understanding those prerequisites in the first place.<br>It&#39;s just intimidating when you consider yourself a beginner.</p>
<p>That&#39;s why finding out about <a href="https://neetcode.io/roadmap" target="_blank" rel="noopener noreferrer">this roadmap</a> from <a href="https://neetcode.io/" target="_blank" rel="noopener noreferrer">neetcode.io</a> gave me an idea. LeetCode can be a good resource as you go about learning the concepts. In fact, why not take a more structured and <em>calmer</em> approach? If you don&#39;t have interest in competitive programming or things of that sort, it doesn&#39;t have to be a pain.<br>We can treat learning about the topics and solving the problems in the list like taking a brief walk in nature, maybe even pay attention to our breathing as much as we pay attention to the runtime analyses.<br>Also an important point, it&#39;s not necessary to spend way too much time trying to solve one problem; it is not only unhealthy, but it won&#39;t provide any value after some point.</p>
<p>The NeetCode roadmap contains a lot of problems, but in this series, I intend to follow the <a href="https://leetcode.com/discuss/general-discussion/460599/Blind-75-LeetCode-Questions/1057039" target="_blank" rel="noopener noreferrer">Blind 75</a> list as the roadmap also includes it. I aim to &quot;get-to-know&quot; (or at least, introduce myself to if I&#39;m unfamiliar with) the &quot;prerequisite&quot; topics before each section, and for the problems, try my attempt at a solution one at a time. And here is a disclaimer: it is very likely that my initial attempts for some solutions will be horrible as I don&#39;t have formal technical background (did I tell you I was an English major?), and when I get stuck, I&#39;ll at least try to reason about <em>an idea</em> of a solution. And, if I get really stuck and can&#39;t come up with an idea as well, then it&#39;s time to take a breath.</p>
<p>In fact, if you&#39;ve read this far, why not take a deep breath now, too?</p>
<p>The premium problems won&#39;t be included, as I want this series to be accessible. I&#39;ll provide NeetCode&#39;s solutions for comparison at the end of each problem as well.</p>
<p>Now time for some introspection, is it likely that five years or so later I&#39;ll regret putting up my bad first attempts for solutions to those problems? Probably. Will I be satisfied that writing about them is an aid to my learning, and shows an aspect of it? Yes, I guess.<br>Will I be satisfied that there is a chance this series might help someone out there? Absolutely.</p>
<p>Solving hundreds of LeetCode problems may be the gate to go through to get an interview at big tech companies, but learning the topics the problems are about is not under anyone&#39;s monopoly. </p>
<p>With that said, let&#39;s start the <a href="https://rivea0.github.io/blog/leetcode-meditations-chapter-1-arrays-and-hashing" target="_blank" rel="noopener noreferrer">first chapter</a>.</p>
]]></description>
            <link>https://rivea0.github.io/blog/leetcode-meditations-introduction</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/leetcode-meditations-introduction</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Tue, 13 Feb 2024 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[A recursive algorithm for incrementing natural numbers]]></title>
            <description><![CDATA[<p>Incrementing a natural number is simple as adding $1$ to it, so why would we ever want to think about a fancy way of doing it? All we need to do is to go from $y$ to $y + 1$, and well, that&#39;s pretty obvious.</p>
<p>But, let&#39;s take a look at one example:</p>
<pre><code class="language-python">from math import floor

def increment(y):
    if y == 0:
        return 1
    elif y % 2 == 1:
        return 2 * increment(floor(y / 2))

    return y + 1
</code></pre>
<p>It&#39;s a beautiful recursive algorithm for incrementing natural numbers, taken from Steven Skiena’s <em>The Algorithm Design Manual</em>.</p>
<p>But how do we know that it&#39;s correct?</p>
<p>The book answers it, by using <a href="https://rivea0.github.io/bite-sized-math-for-cs/unit-01-proofs/induction/" target="_blank" rel="noopener noreferrer">induction</a>.</p>
<p>The <em>base case</em> is when $y$ equals $0$, and if that&#39;s the case, we return $1$. That is correct: $0 + 1 = 1$.</p>
<p>Our <em>induction hypothesis</em> is that $\text{Increment}(n - 1)$ is $n$.<br>We assume that is the case, and go on to show that $\text{Increment}(n)$ holds as well, that is, $\text{Increment}(n) = n + 1$.</p>
<p>When $y$ is an even number (when $y \text{ mod }  2 = 0$), we return $y + 1$ in the last line, so that&#39;s correct.</p>
<p>So what&#39;s the deal with odd numbers, then?</p>
<p>When $y$ is odd (when $y \text{ mod }  2 = 1$), what is returned from the <code>increment</code> function is:</p>
<pre><code class="language-python">2 * increment(floor(y / 2))
</code></pre>
<p>Remember that we need to prove $\text{Increment}(n) = n + 1$, so we need to prove that what we return here is indeed <code>y + 1</code>.</p>
<p>When $y$ is odd, we can write it as $2m + 1$, for some integer $m$. In that case, what we have is:</p>
<pre><code class="language-python">2 * increment(floor(((2 * m) + 1) / 2))
</code></pre>
<p>Or:</p>
<p>$$2 \cdot \text{Increment}(\lfloor(2m + 1) / 2\rfloor)$$</p>
<Note>
$\lfloor$ and $\rfloor$ indicate the [floor function](https://en.wikipedia.org/wiki/Floor_and_ceiling_functions).
</Note>

<p>We can simplify it by dividing the terms inside $\text{Increment}$ by $2$:</p>
<p>$$2 \cdot \text{Increment}(\lfloor{m + 1 / 2}\rfloor)$$</p>
<p>Taking the floor of $m + 1/2$, we have just $m$ (remember that $m$ is an integer):</p>
<p>$$ 2 \cdot \text{Increment}(m)$$</p>
<p>...which is (by our <em>induction hypothesis</em>):</p>
<p>$$2(m + 1)$$</p>
<p>...which is:</p>
<p>$$2m + 2$$</p>
<p>We said that $y$ is $2m + 1$. And the result of our increment function returns $2m + 2$, which is the correct answer: $y + 1$ 🎉</p>
<p>This is certainly a bit tricky at first, but it provides an important lesson that induction is a solid way of proving correctness, even though most of it feels like magic.</p>
<hr>
<p><em>The lectures based on the book <em>The Algorithm Design Manual</em> can be found <a href="https://www3.cs.stonybrook.edu/~skiena/373/videos/" target="_blank" rel="noopener noreferrer">here</a>.</em></p>
]]></description>
            <link>https://rivea0.github.io/blog/a-recursive-algorithm-for-incrementing-natural-numbers</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/a-recursive-algorithm-for-incrementing-natural-numbers</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Sat, 03 Feb 2024 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[When in need of a Promise]]></title>
            <description><![CDATA[<p>If you&#39;re using a library that uses callbacks extensively, like <a href="https://www.npmjs.com/package/sqlite3" target="_blank" rel="noopener noreferrer"><code>sqlite3</code></a>, there&#39;s a good chance that it creates some frustration. There are libraries that add a promise-based API to <code>sqlite3</code>, such as <a href="https://www.npmjs.com/package/sqlite" target="_blank" rel="noopener noreferrer"><code>sqlite</code></a> that might be more convenient to use, but let&#39;s narrow our focus for now and take a look at a very simple (and somewhat contrived) case.</p>
<p>Let&#39;s say we have an <code>insertRow</code> function that simply inserts data into some <code>entries</code> table:</p>
<pre><code class="language-js">async function insertRow(db, data) {
  const { title, description, date } = data;

  db.run(
    `INSERT INTO entries(title, description, date) VALUES(?, ?, ?);`,
    title, 
    description, 
    date,
    async function (error) {
      if (error) {
        throw new Error(error.message);
      } else {
        console.log(
          `Inserted a row to entries with the ID: ${this.lastID}`
        );
      }
    }
  );
}
</code></pre>
<p>...which is called by <code>insert</code>:</p>
<pre><code class="language-js">async function insert(data) {
  const db = new sqlite3.Database(filepath);
  try {
    await insertRow(db, data);
  } catch (error) {
    throw new Error(error.message);
  }
}
</code></pre>
<p>...which is called by <code>createEntry</code>:</p>
<pre><code class="language-js">async function createEntry(formData) {
  const data = {
    title: formData.get(&#39;title&#39;),
    description: formData.get(&#39;description&#39;),
    date: formData.get(&#39;date&#39;),
  };

  try {
    await insert(data);
  } catch (error) {
    return { message: `Failed to create entry ${data.title}` };
  }
}
</code></pre>
<p>It might indeed be a contrived example, but if you&#39;re quick to notice, we&#39;re trying to rethrow the error (which was first thrown by <code>insertRow</code>) in <code>insert</code>, and catch it in <code>createEntry</code>. However, in <code>insertRow</code>, the error is thrown inside the callback, which is passed to <code>db.run</code> — which means it will never be caught, unless we do something about it. </p>
<p>Instead, we can return a promise from <code>insertRow</code> that <em>rejects</em> when an error happens:</p>
<pre><code class="language-js">async function insertRow(db, data) {
  const { title, description, date } = data;

  return new Promise((resolve, reject) =&gt; {
    db.run(
      `INSERT INTO entries(title, description, date) VALUES(?, ?, ?);`,
      title, 
      description, 
      date,
      async function (error) {
        if (error) {
          reject(error);
        } else {
          console.log(
            `Inserted a row to entries with the ID: ${this.lastID}`
          );
          resolve();
        }
      }
    );
  });
}
</code></pre>
<p>Since we&#39;re using <code>try...catch</code> in <code>insert</code> and rethrow the error, we&#39;ll eventually return with </p>
<pre><code class="language-js">{ message: `Failed to create entry ${data.title}` };
</code></pre>
<p>inside <code>createEntry</code> as we catch the error there.</p>
<p>This might not be ideal, and using a library that provides a promise-based API would be a better idea, but when you have to use a callback-based approach, wrapping it as a Promise is something to keep in mind.</p>
]]></description>
            <link>https://rivea0.github.io/blog/when-in-need-of-a-promise</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/when-in-need-of-a-promise</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Sat, 13 Jan 2024 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[The curious case of recursive and iterative processes]]></title>
            <description><![CDATA[<p>Note that the title is not <em>recursion vs. iteration</em>. Usually, the distinction between these two terms is clear-cut: recursion is about functions that call themselves, while iteration is  done through looping. That is correct, but here, we specifically refer to the shape of how a function evolves. </p>
<p>What do we mean by <em>the shape of how a function evolves</em>?</p>
<p>Let&#39;s say for now that if the shape grows and shrinks, then it is recursive, if it doesn&#39;t, then it is an iterative process.</p>
<p>The terminology here might be a bit confusing, but one thing to keep in mind throughout this post is:</p>
<p align="center">recursive function !== recursive process</p>

<p>Which means, what if there are recursive functions that have iterative processes?</p>
<p>Is this a recursive function?</p>
<pre><code class="language-ts">function plus(a, b) {
  if (a === 0) {
    return b;
  } else {
    return 1 + plus(a - 1, b);
  }
}
</code></pre>
<p>What about this one?</p>
<pre><code class="language-js">function plus(a, b) {
  if (a === 0) {
    return b;
  } else {
    return plus(a - 1, b + 1);
  }
}
</code></pre>
<p>They are both recursive functions alright, but the processes they generate are different. In fact, the second one is what is called a tail-recursive function, but let&#39;s not get ahead of ourselves.</p>
<p>Let&#39;s say we want to see how <code>plus(2, 3)</code> works with both examples.</p>
<p>With the first function, <code>a</code> is not equal to <code>0</code>, so we return <code>1 + plus(a - 1, b)</code>. But we first need to compute <code>plus(a - 1, b)</code> for that. So, we go on and call <code>plus</code> with new arguments: <code>plus(1, 3)</code>. Again, <code>a</code> is not equal to <code>0</code>, so we return <code>1 + plus(a - 1, b)</code>. But again, we need to do a recursive call first, so we go on to <code>plus(0, 3)</code>. Now the base case holds, and we return <code>b</code>, which is <code>3</code>. As this function is popped off the stack, the previous function takes this value and adds <code>1</code> to it. Our value is now <code>4</code>. When this one is popped off the stack as well, we&#39;re left with the very first function call; it adds <code>1</code> to the value it gets, which is <code>4</code>, and the result is <code>5</code>. And, we&#39;re done. This is good old recursion as we know it.</p>
<p>Here is a visual display of what is just described:</p>
<p><img src="/blog/post-images/2023-12-23/recursive-process.gif" alt="Recursive process"></p>
<p>To see the <em>shape</em> more clearly, let&#39;s give it different arguments: <code>5</code> and <code>3</code> this time. The process would look like this:</p>
<pre><code>plus(5, 3)
1 + plus(4, 3)
1 + (1 + plus(3, 3))
1 + (1 + (1 + plus(2, 3)))
1 + (1 + (1 + (1 + plus(1, 3))))
1 + (1 + (1 + (1 + (1 + plus(0, 3)))))
1 + (1 + (1 + (1 + (1 + 3))))
1 + (1 + (1 + (1 + 4)))
1 + (1 + (1 + 5))
1 + (1 + 6)
1 + 7
8
</code></pre>
<p>Now the <em>grow-and-shrink</em> part is more obvious.</p>
<p>The actual work of adding <code>1</code> is done on the way out, so to speak.</p>
<p>With the second example, though, things are a bit different. With this one, note that the final operation is a recursive call, there is no waiting to add <code>1</code> like in the other example. </p>
<p>Let&#39;s see it again with the same arguments, <code>plus(2, 3)</code>.</p>
<p><code>a</code> is not equal to <code>0</code>, so we call <code>plus(1, 4)</code>.</p>
<p>Once again, <code>a</code> is not equal to <code>0</code>, so we go on to <code>plus(0, 5)</code>.<br>And now the base case holds, <code>a</code> is <code>0</code>, so we return <code>b</code> which is <code>5</code>.</p>
<p>Here&#39;s how it goes:</p>
<p><img src="/blog/post-images/2023-12-23/iterative-process.gif" alt="Iterative process"></p>
<p>If we were to use <code>5</code> and <code>3</code>:</p>
<pre><code>plus(5, 3)
plus(4, 4)
plus(3, 5)
plus(2, 6)
plus(1, 7)
plus(0, 8)
8
</code></pre>
<p>So, while the first example has a <em><strong>recursive process</strong></em>, the second one has an <em><strong>iterative process</strong></em>.</p>
<p>The second one is also an example of a tail-recursive function because there is nothing left to do after the recursive call.</p>
<p>Note that the second function is still a recursive function, it calls itself, but it has an iterative process.</p>
<p>Most of these sound like a confusion of terminology, but they eventually make sense.</p>
<p>More information can be found at <a href="https://sourceacademy.org/sicpjs/1.2.1" target="_blank" rel="noopener noreferrer">https://sourceacademy.org/sicpjs/1.2.1</a>, in fact, the example is adapted from one of the exercises.<br>You can also read the section from <a href="https://web.mit.edu/6.001/6.037/sicp.pdf#subsection.1.2.1" target="_blank" rel="noopener noreferrer">the original book</a> or watch <a href="https://archive.org/details/ucberkeley_webcast_0G3tNuBBO5I" target="_blank" rel="noopener noreferrer">Brian Harvey&#39;s lecture</a>, which dives into the subject at the 17~ minute mark.</p>
<p><em>The animated GIFs are inspired by <a href="https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif" target="_blank" rel="noopener noreferrer">Lydia Hallie&#39;s JavaScript Visualized series</a>.</em></p>
]]></description>
            <link>https://rivea0.github.io/blog/the-curious-case-of-recursive-and-iterative-processes</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/the-curious-case-of-recursive-and-iterative-processes</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Sat, 23 Dec 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Applicative-order vs. normal-order evaluation]]></title>
            <description><![CDATA[<p>Let&#39;s look at this interesting sentence:</p>
<blockquote>
<p><em>The most noticeable effect of applicative-order evaluation is that recursive functions may not terminate.</em><a href="https://sookocheff.com/post/fp/evaluating-lambda-expressions/" target="_blank" rel="noopener noreferrer">^1</a></p>
</blockquote>
<p>Out of context, it sounds like a lot is going on.</p>
<p><em>Applicative-order evaluation?</em></p>
<p><em>Recursive functions that may not terminate?</em></p>
<p>It sounds very thrilling, in the sense that it might be straight out of your nightmares, especially when it comes to non-terminating recursive functions.</p>
<p>When it comes to functions, it is no mystery how they are evaluated in the code we write — even if you don&#39;t use the term <em>substitution</em>, you&#39;re aware of what is going on here:</p>
<pre><code class="language-js">function add(x, y) { 
  return x + y; 
}

add(7, 5); // 12
</code></pre>
<p>What is happening is that <code>7</code> is substituted for <code>x</code>, and <code>5</code> is substituted for <code>y</code>. That&#39;s great.</p>
<p>But first, let&#39;s look at an example.</p>
<p>Let&#39;s say we have to find the square root of a number, and we want to do it using <a href="https://ocw.mit.edu/courses/18-335j-introduction-to-numerical-methods-spring-2019/0a734ecc94b60a26213488e68588bc8d_MIT18_335JS19_lec1.pdf" target="_blank" rel="noopener noreferrer">Newton&#39;s method</a> of approximating guesses.</p>
<p>How it goes is simple. We take a guess for the square root of a number $a$, and we improve our guess until we have a good enough answer that is <em>really close</em> to the actual square root of $a$.</p>
<p>How to improve our guess looks like this:</p>
<p>$$x_{n + 1} = \frac{1}{2}\Big(x_n + \frac{a}{x_n}\Big)$$</p>
<p>Let&#39;s unpack it a bit.</p>
<ul>
<li>$a$ is the number that we want to know the square root of.</li>
<li>$x_n$ is our current guess.</li>
<li>$x_{n + 1}$ is the next (the <em>improved</em>) guess.</li>
</ul>
<p>So, the next guess will be the average of two numbers: <em>our guess</em> ($x_n$) and <em>the number we want to know the square root of divided by our guess</em> ($\frac{a}{x_n}$).</p>
<p>The example is not particularly important, so if you don&#39;t feel very warm with math, that&#39;s fine. The gist is that we improve our guess until it&#39;s very very close to the actual number.</p>
<p>In JavaScript, it can be written like this:</p>
<pre><code class="language-js">function square(x) {
  return x * x;
}

function average(x, y) {
  return (x + y) / 2;
}

function is_good_enough(guess, x) {
  return Math.abs(square(guess) - x) &lt; 0.001;
}

function improve(guess, x) {
  return average(guess, x / guess);
}

function sqrt_iter(guess, x) {
  return is_good_enough(guess, x) ? guess : sqrt_iter(improve(guess, x), x);
}

sqrt_iter(1, 4); // 2.0000000929222947
</code></pre>
<p>But, let&#39;s say we don&#39;t like ternary operations up in our face in <code>sqrt_iter</code>, so we want to abstract it out still further:</p>
<pre><code class="language-js">function check(predicate, then_clause, else_clause) {
  return predicate ? then_clause : else_clause;
}
</code></pre>
<Note>
A [predicate](https://en.wikipedia.org/wiki/Propositional_function) is just a function that returns a boolean.
</Note>

<p>Then we can use it like this, perhaps:</p>
<pre><code class="language-js">function sqrt_iter(guess, x) {
  return check(
    is_good_enough(guess, x),
    guess,
    sqrt_iter(improve(guess, x), x)
  );
}
</code></pre>
<p>However, when we run it, we have an error that you might be very familiar when doing recursion: <code>Maximum call stack size exceeded</code>.</p>
<p>Why is that?</p>
<p>In the first iteration, when <code>sqrt_iter</code> was looking like this:</p>
<pre><code class="language-js">function sqrt_iter(guess, x) {
  return is_good_enough(guess, x) ? guess : sqrt_iter(improve(guess, x), x);
}
</code></pre>
<p>Everything worked fine, and we got our answer.</p>
<p>Why do we have an error when passing the recursive call to another function, then?</p>
<p>Well, the quote was a foreshadowing. The reason is what is called the evaluation order.</p>
<p>If you&#39;ve ever read or intend to read <a href="https://web.mit.edu/6.001/6.037/sicp.pdf" target="_blank" rel="noopener noreferrer"><em>the wizard book</em></a>, this is one of the subjects that is touched upon in the early pages.</p>
<p>The authors (or <em>wizards</em>, I should say) talk about two distinct evaluation orders:</p>
<ul>
<li><strong>applicative-order --&gt;</strong> &quot;evaluate the arguments and then apply&quot;</li>
<li><strong>normal-order --&gt;</strong> &quot;fully expand and then reduce&quot;</li>
</ul>
<p>With <em>applicative-order</em>, a function&#39;s arguments are evaluated before the function is applied, and with <em>normal-order</em>, none of the arguments are evaluated until they are needed in the function body.</p>
<p>In our example, when we pass <code>sqrt_iter</code> to <code>check</code>, it is evaluated first, hence the recursion error. The reason is that JavaScript makes use of applicative-order, so the arguments are evaluated first.</p>
<p>Let&#39;s see it with a much simpler example, using Python this time. Let&#39;s say we have a <code>sum_of_squares</code> function that returns, well, <em>the sum of squares</em> of two numbers <code>n</code> and <code>m</code>:</p>
<pre><code class="language-python">def sum_of_squares(n, m):
    return square(n) + square(m)

def square(x):
    return x * x
</code></pre>
<p>And, we pass <code>5 + 1</code> and <code>5 * 2</code> as arguments:</p>
<pre><code class="language-python">sum_of_squares(5 + 1, 5 * 2)
</code></pre>
<p>With applicative-order, the process looks like this:</p>
<pre><code>-&gt;  square(6) + square(10)
-&gt;    (6 * 6) + (10 * 10)
-&gt;         36 + 100
-&gt;           136
</code></pre>
<p>But with normal-order:</p>
<pre><code>-&gt;      square(5 + 1)   +   square(5 * 2)
-&gt;  ((5 + 1) * (5 + 1)) + ((5 * 2) * (5 * 2))
-&gt;             (6 * 6)  +  (10 * 10)
-&gt;                36    +    100
-&gt;                     136
</code></pre>
<p>Note that with normal-order, the evaluations of <code>(5 + 1)</code> and <code>(5 * 2)</code> are done twice, so we&#39;re doing extra work.</p>
<p>With languages like JavaScript that most people are familiar with, it looks like what&#39;s being used is applicative-order evaluation. I guess that is sort of true, but neither are said to be used in the <em>strict sense</em>:</p>
<blockquote>
<p>In practice, no programming language uses normal-order evaluation because of the performance penalty, and it is also difficult to use strict applicative-order evaluation because of the increase in non-terminating cases. Rather, programming languages tend to use <em>lazy-evaluation</em> as a means of enabling the performance benefit of applicative-order evaluation without the risk.<a href="https://sookocheff.com/post/fp/evaluating-lambda-expressions/#summary" target="_blank" rel="noopener noreferrer">^2</a></p>
</blockquote>
<p>As another nightmare fuel for the non-terminating recursive case, let&#39;s take a look at this one last example:</p>
<pre><code class="language-js">function p() { 
  return p(); 
}

function test(x, y) {
  return x === 0 ? 0 : y;
}

test(0, p());
</code></pre>
<p>With applicative-order, what will happen when we call <code>test</code> is that both of the arguments will get evaluated first. When we call <code>p()</code>, you know what will happen: a good old <code>Maximum call stack size exceeded</code>. So, it will never terminate.</p>
<p>With normal-order evaluation, though, realize what happens.<br>The evaluation of the arguments won&#39;t happen until <code>test</code> goes on to evaluate <code>x === 0 ? 0 : y</code>. Only then, <code>0</code> is substituted for <code>x</code>, and since <code>0 === 0</code> is true, the function will return <code>0</code> and terminate. It doesn&#39;t need to evaluate <code>p()</code> further because of <a href="https://en.wikipedia.org/wiki/Short-circuit_evaluation" target="_blank" rel="noopener noreferrer">short-circuiting</a>; the else condition (<code>:</code>) is not reached.</p>
<p>So, it is not true that both kinds of evaluations will yield the same answer all the time. </p>
<p>The takeaway is that, like many things, there is a tradeoff.<br>It is entertaining, though, that even a simple matter of substitution has intricacies, probably far more than what is mentioned in this post.</p>
<hr>
<p><em><code>sum_of_squares</code> is adapted from the original <a href="https://web.mit.edu/6.001/6.037/sicp.pdf#subsection.1.1.5" target="_blank" rel="noopener noreferrer">Structure and Interpretation of Computer Programming</a>, and the JavaScript examples are adapted from the JavaScript version of the book (yes, <a href="https://sourceacademy.org/sicpjs" target="_blank" rel="noopener noreferrer">it does exist</a>).</em></p>
]]></description>
            <link>https://rivea0.github.io/blog/applicative-order-vs-normal-order</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/applicative-order-vs-normal-order</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Thu, 21 Dec 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Converting MDX files with frontmatter into an MDX Component in Next.js 13]]></title>
            <description><![CDATA[<p><a href="https://mdxjs.com" target="_blank" rel="noopener noreferrer">MDX</a> <em>is a superset of markdown that lets you write JSX directly in markdown files</em>.<br>If you&#39;re using Next.js (this post was written for Next.js 13 specifically), you might know that it has a built-in support for MDX. You can read more about how to configure it <a href="https://nextjs.org/docs/app/building-your-application/configuring/mdx" target="_blank" rel="noopener noreferrer">in the docs</a>.</p>
<p>The most basic way to use it looks like this:</p>
<pre><code class="language-tsx">import HelloWorld from &#39;./hello.mdx&#39;

export default function Page() {
  return &lt;HelloWorld /&gt;
}
</code></pre>
<p>If you get the files dynamically, though, and use a frontmatter, things might be a bit confusing.</p>
<p>The MDX documentation <a href="https://mdxjs.com/guides/frontmatter/" target="_blank" rel="noopener noreferrer">recommends using a remark plugin, <code>remark-frontmatter</code></a> to ignore the frontmatter and get only the MDX content like this:</p>
<pre><code class="language-tsx">import fs from &#39;node:fs/promises&#39;
import remarkFrontmatter from &#39;remark-frontmatter&#39;
import {compile} from &#39;@mdx-js/mdx&#39;

console.log(
  await compile(await fs.readFile(`./posts/${params.slug}.mdx`), {
    remarkPlugins: [remarkFrontmatter]
  })
)
</code></pre>
<p>Say, if we have a <code>hello.mdx</code> file that looks something like this:</p>
<pre><code class="language-mdx">---
title: Hello world
---

# Hi

This is an example MDX file.
</code></pre>
<p>What is logged for that <code>hello.mdx</code> looks like this:</p>
<pre><code>VFile {
  data: {},
  messages: [],
  history: [],
  cwd: &#39;/Users/me/projects/demo-site&#39;,
  value: &#39;/*@jsxRuntime automatic @jsxImportSource react*/\n&#39; +
    &#39;import {Fragment as _Fragment, jsxDEV as _jsxDEV} from &quot;react/jsx-dev-runtime&quot;;\n&#39; +
    &#39;function _createMdxContent(props) {\n&#39; +
    &#39;  const _components = Object.assign({\n&#39; +
    &#39;    h1: &quot;h1&quot;,\n&#39; +
    &#39;    p: &quot;p&quot;\n&#39; +
    &#39;  }, props.components);\n&#39; +
    &#39;  return _jsxDEV(_Fragment, {\n&#39; +
    &#39;    children: [_jsxDEV(_components.h1, {\n&#39; +
    &#39;      children: &quot;Hi&quot;\n&#39; +
    &#39;    }, undefined, false, {\n&#39; +
    &#39;      fileName: &quot;&lt;source.js&gt;&quot;,\n&#39; +
    &#39;      lineNumber: 5,\n&#39; +
    &#39;      columnNumber: 1\n&#39; +
    &#39;    }, this), &quot;\\n&quot;, _jsxDEV(_components.p, {\n&#39; +
    &#39;      children: &quot;This is an example MDX file.&quot;\n&#39; +
    &#39;    }, undefined, false, {\n&#39; +
    &#39;      fileName: &quot;&lt;source.js&gt;&quot;,\n&#39; +
    &#39;      lineNumber: 6,\n&#39; +
    &#39;      columnNumber: 1\n&#39; +
    &#39;    }, this)]\n&#39; +
    &#39;  }, undefined, true, {\n&#39; +
    &#39;    fileName: &quot;&lt;source.js&gt;&quot;,\n&#39; +
    &#39;    lineNumber: 1,\n&#39; +
    &#39;    columnNumber: 1\n&#39; +
    &#39;  }, this);\n&#39; +
    &#39;}\n&#39; +
    &#39;function MDXContent(props = {}) {\n&#39; +
    &#39;  const {wrapper: MDXLayout} = props.components || ({});\n&#39; +
    &#39;  return MDXLayout ? _jsxDEV(MDXLayout, Object.assign({}, props, {\n&#39; +
    &#39;    children: _jsxDEV(_createMdxContent, props, undefined, false, {\n&#39; +
    &#39;      fileName: &quot;&lt;source.js&gt;&quot;\n&#39; +
    &#39;    }, this)\n&#39; +
    &#39;  }), undefined, false, {\n&#39; +
    &#39;    fileName: &quot;&lt;source.js&gt;&quot;\n&#39; +
    &#39;  }, this) : _createMdxContent(props);\n&#39; +
    &#39;}\n&#39; +
    &#39;export default MDXContent;\n&#39;,
  map: undefined
}
</code></pre>
<p>That is an object called <code>VFile</code>.<br>What matters is its <code>value</code> because that is the function body that we are going to <em>run</em> to compile MDX content into JavaScript.</p>
<p>In order to do that, we need to add the <code>outputFormat</code> option as <code>&#39;function-body&#39;</code> to the <code>compile()</code> function, and also change the development to <code>false</code>. We also convert it into a <code>String</code>:</p>
<pre><code class="language-tsx">import fs from &#39;node:fs/promises&#39;
import remarkFrontmatter from &#39;remark-frontmatter&#39;
import {compile} from &#39;@mdx-js/mdx&#39;

const code = String(
  await compile(
    await fs.readFile(`./posts/${params.slug}.mdx`, {
      remarkPlugins: [remarkFrontmatter],
      outputFormat: &#39;function-body&#39;,
      development: false
      /* …otherOptions */
    })
  )
)
</code></pre>
<p>The default <code>outputFormat</code> of <code>compile()</code> is <code>&#39;program&#39;</code>, it uses <code>import</code> and <code>export</code> statements, but we need to change it into <code>function-body</code>, otherwise we&#39;ll get a dreaded error: <code>Error: Cannot use import statement outside a module</code>.<br>These are not so important details, you can read more in the <a href="https://mdxjs.com/packages/mdx/#optionsoutputformat" target="_blank" rel="noopener noreferrer">docs</a>.</p>
<p>The only thing left is to run it, and we can finally return it as an MDX component with these two more lines:</p>
<pre><code class="language-tsx">const {default: Content} = await run(code, runtime)

return &lt;Content /&gt;
</code></pre>
<p>Putting it together, what we have written looks like this:</p>
<pre><code class="language-blog/[slug]/page.tsx">export default async function Page({ params }: {
  params: { slug: string }
}) {
  const code = String(
    await compile(await fs.readFile(`./posts/${params.slug}.mdx`), {
      remarkPlugins: [remarkFrontmatter],
      outputFormat: &#39;function-body&#39;,
      development: false
    })
  )

  const {default: Content} = await run(code, runtime)

  return &lt;Content /&gt;
}
</code></pre>
<p>We can do many different things such as overriding the components of <code>Content</code>, using plugins to add KateX support, etc. MDX offers a lot of flexibility.<br>As always, the first place to check out more of what we can do is <a href="https://mdxjs.com/docs/" target="_blank" rel="noopener noreferrer">the official docs</a>.</p>
]]></description>
            <link>https://rivea0.github.io/blog/converting-mdx-files-with-frontmatter-into-an-mdx-component-nextjs-13</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/converting-mdx-files-with-frontmatter-into-an-mdx-component-nextjs-13</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Tue, 29 Aug 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Implicit vs. explicit JOINs]]></title>
            <description><![CDATA[<p>Let&#39;s say we have a <code>customers</code> table that looks similar to this:</p>
<Table>
| customer_id | first_name | last_name |
| --- | --- | --- |
| 1 | John | Doe |
| 2 | Jane | Smith |
</Table>

<p>And an <code>items_ordered</code> table that&#39;s looking like this:</p>
<Table>
| customer_id | order_date | item | price |
| --- | --- | --- | ---|
| 1 | 2020-01-01 | Apple | 1.99 |
| 2 | 2020-02-02 | Banana | 0.99 |
</Table>

<p>Usually, we can join them using the <code>INNER JOIN</code> (or just <code>JOIN</code>) clause:</p>
<pre><code class="language-sql">SELECT customer_id, first_name, last_name, order_date, item, price
FROM customers
INNER JOIN items_ordered
ON customers.customer_id = items_ordered.customer_id;
</code></pre>
<p>But, there is also another way to do the same thing, which is the <em>implicit JOIN</em>:</p>
<pre><code class="language-sql">SELECT
    customers.customer_id,
    customers.first_name,
    customers.last_name,
    items_ordered.order_date,
    items_ordered.item,
    items_ordered.price
FROM customers, items_ordered
WHERE customers.customer_id = items_ordered.customer_id;
</code></pre>
<p>Looks a bit more cluttered.</p>
<p>For clarity&#39;s sake, using an explicit JOIN syntax makes more sense, and from what I&#39;ve read, it seems to be no significant performance difference between the two, and the ANSI 92 standard is <a href="https://stackoverflow.com/a/53061589" target="_blank" rel="noopener noreferrer">said to be recommending</a> using modern explicit joins.</p>
]]></description>
            <link>https://rivea0.github.io/blog/implicit-vs-explicit-joins</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/implicit-vs-explicit-joins</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Sat, 19 Aug 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[A simple example of a nested SQL query]]></title>
            <description><![CDATA[<p>Let&#39;s say we have this table:</p>
<Table>
|city|country|population|latitude|longitude|
|---|---|---|---|---|
|Guadalajara|Mexico|1500800|20.659699|-103.349609|
|Toronto|Canada|2795060|43.653226|-79.383184|
|Houston|United States|2195914|29.760427|-95.369803|
|New York|United States|8405837|40.712784|-74.005941|
|Philadelphia|United States|1553165|39.952584|-75.165222|
|Havana|Cuba|2106146|23.05407|-82.345189|
|Mexico City|Mexico|8555500|19.432608|-99.133208|
|Phoenix|United States|1513367|33.448377|-112.074037|
|Los Angeles|United States|3884307|34.052234|-118.243685|
|Ecatepec de Morelos|Mexico|1742000|19.601841|-99.050674|
|Montreal|Canada|1717767|45.501689|-73.567256|
|Chicago|United States|2718782|41.878114|-87.629798|
</Table>

<p>We want to get all the cities west of Chicago.<br>As we go towards the west, the longitude must be less than the longitude of Chicago — the west of the prime meridian has longitudes that are negative numbers.</p>
<p>Here is the pseudocode:</p>
<pre><code>SELECT * FROM north_american_cities
WHERE longitude &lt; ${Chicago&#39;s longitude}
</code></pre>
<p>So, what we need to do is somehow get the value of Chicago&#39;s longitude and use it as comparison.<br>It is by itself easy:</p>
<pre><code class="language-sql">SELECT longitude FROM north_american_cities
WHERE city = &#39;Chicago&#39;;
</code></pre>
<p>What we can do is simply put it inside the parenthesis and use it as a value itself, just like a variable:</p>
<pre><code class="language-sql">SELECT * FROM north_american_cities
WHERE longitude &lt; (
    SELECT longitude
    FROM north_american_cities
    WHERE city = &#39;Chicago&#39;
);
</code></pre>
<p>The result is this:</p>
<Table>
|city|country|population|latitude|longitude|
|---|---|---|---|---|
|Guadalajara|Mexico|1500800|20.659699|-103.349609|
|Houston|United States|2195914|29.760427|-95.369803|
|Mexico City|Mexico|8555500|19.432608|-99.133208|
|Phoenix|United States|1513367|33.448377|-112.074037|
|Los Angeles|United States|3884307|34.052234|-118.243685|
|Ecatepec de Morelos|Mexico|1742000|19.601841|-99.050674|
</Table>

<p>Furthermore, we can order the longitudes from west to east using the <code>ORDER BY</code> clause:</p>
<pre><code class="language-sql">SELECT * FROM north_american_cities
WHERE longitude &lt; (
    SELECT longitude
    FROM north_american_cities
    WHERE city = &#39;Chicago&#39;
)
ORDER BY longitude;
</code></pre>
<p>And, voilà:</p>
<Table>
|city|country|population|latitude|longitude|
|---|---|---|---|---|
|Los Angeles|United States|3884307|34.052234|-118.243685|
|Phoenix|United States|1513367|33.448377|-112.074037|
|Guadalajara|Mexico|1500800|20.659699|-103.349609|
|Mexico City|Mexico|8555500|19.432608|-99.133208|
|Ecatepec de Morelos|Mexico|1742000|19.601841|-99.050674|
|Houston|United States|2195914|29.760427|-95.369803|
</Table>

<p><em>The example is taken from <a href="https://sqlbolt.com/lesson/select_queries_review" target="_blank" rel="noopener noreferrer">sqlbolt.com</a></em>.</p>
]]></description>
            <link>https://rivea0.github.io/blog/a-simple-example-of-a-nested-sql-query</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/a-simple-example-of-a-nested-sql-query</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Wed, 16 Aug 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[A reminder to use single quotes when writing commit messages]]></title>
            <description><![CDATA[<p>Using backticks in the shell results in <em>command expansion</em>, for example:</p>
<pre><code>echo `which cp`
</code></pre>
<p>is the same as </p>
<pre><code>echo $(which cp)
</code></pre>
<p>It finds the directory the <code>cp</code> command is in (executes the <code>which</code> command), and then prints it to the screen.</p>
<p>Normally, when using double quotes, many types of expansions do not work (like word-splitting and brace expansions), but with command expansion, this is not the case.</p>
<p>Commands inside backticks are executed if they are inside double quotes.</p>
<p>When writing a message to <code>git commit</code>, rendering the name of a function in monospace, for example, is easy to do using backticks.</p>
<p>So, my hypothesis is that when I do something like</p>
<pre><code>git commit -m &quot;Add `doThis` function&quot;
</code></pre>
<p>If <code>doThis</code> is a command, it will be executed.</p>
<p>So, if we write something like:</p>
<pre><code>git commit -m &quot;Add `which cp` thing&quot;
</code></pre>
<p>It will replace it with the directory that <code>cp</code> is in, so that our commit message will look like:</p>
<pre><code>Add /bin/cp thing
</code></pre>
<p>In fact, after trying it, it turns out to be true, and this <a href="https://stackoverflow.com/a/71155997" target="_blank" rel="noopener noreferrer">Stack Overflow answer</a> has a nice short explanation.</p>
<p>Single quotes, on the other hand, suppress all expansions, so if written like this:</p>
<pre><code>git commit -m &#39;Add `which cp` thing&#39;
</code></pre>
<p>It won&#39;t execute <code>which cp</code>, but write it as it is: </p>
<pre><code>Add `which cp` thing
</code></pre>
<p>So, I think it is safer to use single quotes, whether you want to use a code block a la markdown styling or not.</p>
<hr>
<p><em>This enlightenment is thanks to the &quot;Seeing the World as the Shell Sees It&quot; chapter from William E. Shotts&#39; book <a href="https://archive.org/details/tlcl-19.01/page/76/mode/2up" target="_blank" rel="noopener noreferrer">The Linux Command Line: A Complete Introduction</a>.</em></p>
]]></description>
            <link>https://rivea0.github.io/blog/a-reminder-to-use-single-quotes-when-writing-commit-messages</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/a-reminder-to-use-single-quotes-when-writing-commit-messages</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Thu, 13 Jul 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Excluding files (and folders) with `git add`]]></title>
            <description><![CDATA[<p>When you&#39;re using <code>git add</code>, there is a chance that you might be in a situation where you want to include a bunch of files (or folders) but exclude only some of them. Adding each file one by one manually is, of course, unthinkable, but thankfully there is a very short and sweet way to do it. </p>
<p>Here comes the magical command:</p>
<pre><code>git add -A &#39;:!&lt;file_path&gt;&#39;
</code></pre>
<p>In my case, I had to rename a lot of folders, and wanted to <code>git add</code> them all at once, but exclude one of the untracked folders and a couple of other modified files. </p>
<p>Besides tons of other deleted files, <code>git status</code> was showing this:</p>
<p><img src="/blog/post-images/2023-07-03/git-add-screenshot0.png" alt="Changes not staged for commit and untracked files"></p>
<p>Since I wanted to exclude only the <code>list-ops</code> folder and the <code>wordy</code> files, I had to use the command:</p>
<pre><code>git add -A &#39;:!list-ops&#39; &#39;:!wordy/wordy.py&#39; &#39;:!wordy/wordy_test.py&#39;
</code></pre>
<p>And, it worked 🎉:</p>
<p><img src="/blog/post-images/2023-07-03/git-add-screenshot.png" alt="Changes to be commited with those not staged for commit and untracked files"></p>
<p>All thanks to <a href="https://kodewithchirag.com/easy-way-to-exclude-files-during-git-add" target="_blank" rel="noopener noreferrer">Chirag Chhuchha&#39;s blog post</a>.</p>
]]></description>
            <link>https://rivea0.github.io/blog/excluding-files-with-git-add</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/excluding-files-with-git-add</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Mon, 03 Jul 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[MongoDB Aggregation Pipeline Stages 101]]></title>
            <description><![CDATA[<p>In database management, <strong>aggregation</strong> is defined as (to quote Wikipedia):</p>
<blockquote>
<p>a function where the values of multiple rows are grouped together to form a single summary value.</p>
</blockquote>
<p>Simply, it is the <em>collection and summary of data</em>.</p>
<p>In MongoDB, an <strong>aggregation pipeline</strong> is a <em>series of stages completed on the data in order</em>, where a <strong>stage</strong> is a built-in method that does not permanently alter the data.<br>Aggregation pipeline can be used for many tasks like filtering or grouping data.</p>
<p>To use an aggregation operation, we can use <code>.aggregate()</code> method on the collection, like below:</p>
<pre><code class="language-js">db.collection.aggregate([
  {
    $match: {
      { size: &quot;small&quot; }
    },
    ...
  }
])
</code></pre>
<p>In this example, <code>.aggregate()</code> is the <em>aggregation method</em>, <code>$match</code> is the <em>aggregation stage</em>, and <code>{ size: &quot;small&quot; }</code> is the <em>expression</em> we use to query the collection where the <code>size</code> field is <code>&quot;small&quot;</code>. After <code>$match</code>, we can continue listing stages in the aggregation pipeline. Of course, since this is a pipeline, and each stage forwards the values on to the next stage, the ordering of stages matters.</p>
<p>Let&#39;s take a look at some of the aggregation pipeline stages we can use in MongoDB.</p>
<h3>Using <code>$match</code></h3>
<p><code>$match</code> filters the documents that match a given expression, and pass them to the next stage in the pipeline.<br>Since it filters the documents, it reduces the number of documents to operate on, and therefore lessens the amount of processing required. So, it is better if we use it early in our pipeline.</p>
<h3>Using <code>$group</code></h3>
<p><code>$group</code>, groups the documents by a given group key, and for each unique value of a group key, the output is only one document.</p>
<p>Let&#39;s look at an example data first. To see a sample document in a given collection, we can use <code>.findOne()</code> method.</p>
<p>Let&#39;s say we&#39;re inside a <code>bird_data</code> database and want to look at how a document looks like in the <code>sightings</code> collection:</p>
<pre><code class="language-js">db.sightings.findOne()
</code></pre>
<p>A sample document is returned:</p>
<pre><code class="language-js">{
  _id: ObjectId(&quot;62cf32bdcfe5bbb25ee815fc&quot;),
  species_common: &#39;Eastern Bluebird&#39;,
  species_scientific: &#39;Sialia sialis&#39;,
  date: ISODate(&quot;2022-01-18T18:24:00.000Z&quot;),
  location: { type: &#39;Point&#39;, coordinates: [ 40, -73 ] }
}
</code></pre>
<p>Let&#39;s now use an aggregation pipeline:</p>
<pre><code class="language-js">db.sightings.aggregate([
  {
    $match: {
      &quot;species_common&quot;: &quot;Eastern Bluebird&quot;
    }
  }, 
  {
    $group: {
      _id: &quot;$location.coordinates&quot;, 
      number_of_sightings: { $count: { } }
    }
  }
])
</code></pre>
<p>In this example, we first want to filter a specific bird species, Eastern Bluebird. We do that with <code>$match</code>.<br>Then we create a <code>$group</code> stage where we group the documents based on location coordinates. And, within the groups, we create a field called <code>number_of_sightings</code> to show how many documents there are in each group.</p>
<p>The output looks like this:</p>
<pre><code class="language-js">[
  { _id: [ 40, -74 ], number_of_sightings: 3 },
  { _id: [ 41, -74 ], number_of_sightings: 1 },
  { _id: [ 40, -73 ], number_of_sightings: 1 }
]
</code></pre>
<h3>Using <code>$sort</code></h3>
<p><code>$sort</code> does what you think it does, it sorts the documents. If the value given is <code>1</code>, it sorts in the ascending order, if the value is <code>-1</code> —you guessed it— it sorts in the descending order.</p>
<h3>Using <code>$limit</code></h3>
<p><code>$limit</code> is also clear, it limits the number of documents to show.<br>We know that the order is important, and here is a chance to remember that. Say, we are going to use both <code>$sort</code> and <code>$limit</code> stages. If we sort before limit, the output will be the first <code>&lt;number-of-limit&gt;</code> documents on sorted data. Otherwise, if we limit before sorting, it will return the sorted version of the first <code>&lt;number-of-limit&gt;</code> documents in our collection.</p>
<p>Let&#39;s see an example of them together:</p>
<pre><code class="language-js">db.sightings.aggregate([
  {
    $sort: { &quot;location.latitude&quot;: 1 } 
  }, 
  {
    $limit: 4
  }
])
</code></pre>
<p>Here, we have a <code>$sort</code> stage that sorts the data according to the <code>location.latitude</code> field in the ascending order. <em>Then</em>, we limit the number of documents to 4.</p>
<h3>Using <code>$set</code></h3>
<p>To create new fields, or change the value of existing fields, we can use the <code>$set</code> stage.</p>
<pre><code class="language-js">db.birds.aggregate([
  {
    $set: { &quot;class&quot;: &quot;bird&quot; }
  }
])
</code></pre>
<p>It simply adds the field of <code>class</code> with the value of <code>&quot;bird&quot;</code> to the returned document.</p>
<h3>Using <code>$count</code></h3>
<p><code>$count</code> creates a new document with the given field name with the value of the number of documents at that stage in the aggregation pipeline.</p>
<p>An example usage after the <code>$match</code> stage:</p>
<pre><code class="language-js">db.sightings.aggregate([ 
  { 
    $match: { 
      date: { 
        $gt: ISODate(&#39;2022-01-01T00:00:00.000Z&#39;), 
        $lt: ISODate(&#39;2023-01-01T00:00:00.000Z&#39;) 
      }, 
      species_common: &#39;Eastern Bluebird&#39; 
    } 
  }, 
  { 
    $count: &#39;bluebird_sightings_2022&#39; 
  } 
])
</code></pre>
<h3>Using <code>$project</code></h3>
<p>We can choose to include or exclude fields with the <code>$project</code> stage. It is similar to the <code>.find()</code> method, where the second value we pass is the <em>projection</em>. The value <code>1</code> indicates that we want that field to be included, <code>0</code> indicates that we want it to be excluded. </p>
<p><code>$project</code> stage is more appropriate to use last in the aggregation pipeline, as it just <em>projects</em> the given fields.</p>
<p>Here is an example where we only want the fields of <code>date</code>, <code>species_common</code>, and <code>_id</code> to be shown:</p>
<pre><code class="language-js">db.sightings.aggregate([
  {
    $project: { &quot;date&quot;: 1, &quot;species_common&quot;: 1, _id: 1 } 
  }
])
</code></pre>
<h3>Using <code>$out</code></h3>
<p><code>$out</code> is a stage that you can only use as the last one, it just writes the documents in an aggregation pipeline into a collection. If the collection exists, it overwrites it.</p>
<pre><code class="language-js">db.sightings.aggregate([
  {
    $match: {
      date: {
        $gte: ISODate(&quot;2022-01-01T00:00:00.000Z&quot;)
      }
    }
  }, 
  {
    $out: &quot;sightings_2022&quot;
  }
])
</code></pre>
<p>There are a lot of aggregation pipeline stages to use, and as always, the best place to look for and learn about them is the <a href="https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/" target="_blank" rel="noopener noreferrer">official documentation</a>.</p>
<p>Happy coding.</p>
]]></description>
            <link>https://rivea0.github.io/blog/mongodb-aggregation-pipeline-stages-101</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/mongodb-aggregation-pipeline-stages-101</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Fri, 05 May 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Learning React's `useReducer` with a Very Basic Example]]></title>
            <description><![CDATA[<p>If you are setting the value of a state variable in multiple places in your React application, the state hook <code>useReducer</code> might be another option to consider.</p>
<p>The first example that I&#39;m going to use is an extremely basic and somewhat stupid one, nevertheless, I think we need the simplest examples when learning something new. And, this is by no means how <code>useReducer</code> should be used — <strong>quite the opposite</strong>, for simple state management, <code>useState</code> is more than enough, and you absolutely don&#39;t even need a reducer at all. This is just for <em>&quot;explain me like I&#39;m five&quot; kind of</em> demonstration purposes.</p>
<p>With that said, now let&#39;s say we have this piece of code:</p>
<pre><code class="language-jsx">import { useState } from &#39;react&#39;;

export default function App() {
  const [text, setTextValue] = useState(&#39;&#39;);

  function handleChange(e) {
    setTextValue(e.target.value);
  }

  function handleClearClick() {
    setTextValue(&#39;&#39;);
  }

  return (
    &lt;div&gt;
      &lt;InputForm
        text={text}
        handleChange={handleChange}
        handleClearClick={handleClearClick}
      /&gt;
    &lt;/div&gt;
  );
}

function InputForm({ text, handleChange, handleClearClick }) {
  return (
    &lt;form onClick={e =&gt; e.preventDefault()}&gt;
      &lt;input type=&quot;text&quot; name=&quot;text&quot; value={text} onChange={handleChange} /&gt;
      &lt;ClearButton onClick={handleClearClick} /&gt;
    &lt;/form&gt;
  );
}

function ClearButton({ onClick }) {
  return (
    &lt;button onClick={onClick} type=&quot;button&quot;&gt;
      Clear
    &lt;/button&gt;
  );
}
</code></pre>
<p>What it is, is obvious, the <code>App</code> component renders the <code>InputForm</code>, which returns a form element that has an <code>&lt;input&gt;</code> field, and a <code>ClearButton</code> component as a button. </p>
<p>Now imagine for a moment that you&#39;ve read about <a href="https://react.dev/learn/extracting-state-logic-into-a-reducer" target="_blank" rel="noopener noreferrer">extracting state logic into a reducer</a> for the first time, and are still a little confused. Let&#39;s see how we might use it for our code above.</p>
<pre><code class="language-jsx">import { useReducer } from &#39;react&#39;;

export default function App() {
  const [text, dispatch] = useReducer(textReducer, &#39;&#39;);

  function handleChange(e) {
    dispatch({
      type: &#39;changed&#39;,
      text: e.target.value,
    });
  }

  function handleClearClick() {
    dispatch({
      type: &#39;clear_click&#39;,
    });
  }

  return (
    &lt;div&gt;
      &lt;InputForm
        text={text}
        handleChange={handleChange}
        handleClearClick={handleClearClick}
      /&gt;
    &lt;/div&gt;
  );
}

function InputForm({ text, handleChange, handleClearClick }) {
  return (
    &lt;form onClick={e =&gt; e.preventDefault()}&gt;
      &lt;input type=&quot;text&quot; name=&quot;text&quot; value={text} onChange={handleChange} /&gt;
      &lt;ClearButton onClick={handleClearClick} /&gt;
    &lt;/form&gt;
  );
}

function ClearButton({ onClick }) {
  return (
    &lt;button onClick={onClick} type=&quot;button&quot;&gt;
      Clear
    &lt;/button&gt;
  );
}

function textReducer(state, action) {
  switch (action.type) {
    case &#39;changed&#39;: {
      return action.text;
    }
    case &#39;clear_click&#39;: {
      return &#39;&#39;;
    }
    default:
      throw new Error(&#39;error: this shouldn\&#39;t have happened&#39;);
  }
}
</code></pre>
<p><em>Note that components usually have to be on their own files, but we use all of them together in this example for simplicity&#39;s sake.</em></p>
<p>You can see how unpleasant this is, especially with the unused variable <code>state</code> inside <code>textReducer()</code>. It is because we&#39;re missing the point, the purpose of a reducer is to accumulate actions over time. From the React docs:</p>
<blockquote>
<p>[a reducer] takes the <em>result so far</em> and the <em>current item,</em> then it returns the <em>next result.</em></p>
</blockquote>
<p>The example above has nothing to do with the previous state, each time it is set anew. But, you can understand the idea, after all. We used the <code>dispatch</code> function inside our handler functions, and give it an <a href="https://react.dev/reference/react/useReducer#dispatch-parameters" target="_blank" rel="noopener noreferrer"><em>action object</em></a> that has information about what happened. And, inside <code>handleChange</code>, we also provided <code>e.target.value</code> as the value of <code>text</code> property.</p>
<p>Maybe a better example could be a simple counter that actually needs the previous state. Let&#39;s see how we can do it with <code>useState</code> first:</p>
<pre><code class="language-jsx">import { useState } from &#39;react&#39;;

export default function Counter() {
  const [count, setCount] = useState(0);

  function increment() {
    setCount(prevCount =&gt; prevCount + 1);
  }

  function decrement() {
    setCount(prevCount =&gt; prevCount - 1);
  }

  return (
    &lt;div&gt;
      &lt;p&gt;Count: {count}&lt;/p&gt;
      &lt;button onClick={increment}&gt;+&lt;/button&gt;
      &lt;button onClick={decrement}&gt;-&lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre>
<p>It is self-explanatory. Now let&#39;s see how we might do it with <code>useReducer</code>:</p>
<pre><code class="language-jsx">import { useReducer } from &#39;react&#39;;

export default function Counter() {
  const [count, dispatch] = useReducer(countReducer, 0);

  function increment() {
    dispatch({
      type: &#39;increment&#39;,
    });
  }

  function decrement() {
    dispatch({
      type: &#39;decrement&#39;,
    });
  }

  return (
    &lt;div&gt;
      &lt;p&gt;Count: {count}&lt;/p&gt;
      &lt;button onClick={increment}&gt;+&lt;/button&gt;
      &lt;button onClick={decrement}&gt;-&lt;/button&gt;
    &lt;/div&gt;
  );
}

function countReducer(state, action) {
  switch (action.type) {
    case &#39;increment&#39;: {
      return state + 1;
    }
    case &#39;decrement&#39;: {
      return state - 1;
    }
    default: {
      throw new Error(&#39;error: this shouldn\&#39;t have happened&#39;);
    }
  }
}
</code></pre>
<p>Realize that we don&#39;t have to separately define <code>increment</code> and <code>decrement</code> functions, we can pass them directly to <code>onClick</code>:</p>
<pre><code class="language-jsx">&lt;button onClick={() =&gt; dispatch({ type: &#39;increment&#39; })}&gt;+&lt;/button&gt;
</code></pre>
<pre><code class="language-jsx">&lt;button onClick={() =&gt; dispatch({ type: &#39;decrement&#39; })}&gt;-&lt;/button&gt;
</code></pre>
<p>Let&#39;s now compare both versions. This is the <code>useState</code> version:</p>
<pre><code class="language-jsx">import { useState } from &#39;react&#39;;

export default function CounterWithState() {
  const [count, setCount] = useState(0);
  return (
    &lt;div&gt;
      &lt;p&gt;Count: {count}&lt;/p&gt;
      &lt;button onClick={() =&gt; setCount(prevCount =&gt; prevCount + 1)}&gt;+&lt;/button&gt;
      &lt;button onClick={() =&gt; setCount(prevCount =&gt; prevCount - 1)}&gt;-&lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre>
<p>And, this is the <code>useReducer</code> one:</p>
<pre><code class="language-jsx">import { useReducer } from &#39;react&#39;;

export default function CounterWithReducer() {
  const [count, dispatch] = useReducer(countReducer, 0);
  return (
    &lt;div&gt;
      &lt;p&gt;Count: {count}&lt;/p&gt;
      &lt;button onClick={() =&gt; dispatch({ type: &#39;increment&#39; })}&gt;+&lt;/button&gt;
      &lt;button onClick={() =&gt; dispatch({ type: &#39;decrement&#39; })}&gt;-&lt;/button&gt;
    &lt;/div&gt;
  );
}

function countReducer(state, action) {
  switch (action.type) {
    case &#39;increment&#39;: {
      return state + 1;
    }
    case &#39;decrement&#39;: {
      return state - 1;
    }
    default: {
      throw new Error(&#39;error: this shouldn\&#39;t have happened&#39;);
    }
  }
}
</code></pre>
<p>Inside <code>countReducer</code>, returning something like <code>state + 1</code> is a bit ambiguous, so let&#39;s define our state as an object instead. In that case, the final code should look like this:</p>
<pre><code class="language-jsx">import { useReducer } from &#39;react&#39;;

export default function CounterWithReducer() {
  const initialState = { count: 0 };
  const [state, dispatch] = useReducer(countReducer, initialState);

  return (
    &lt;div&gt;
      &lt;p&gt;Count: {state.count}&lt;/p&gt;
      &lt;button onClick={() =&gt; dispatch({ type: &#39;increment&#39; })}&gt;+&lt;/button&gt;
      &lt;button onClick={() =&gt; dispatch({ type: &#39;decrement&#39; })}&gt;-&lt;/button&gt;
    &lt;/div&gt;
  );
}

function countReducer(state, action) {
  switch (action.type) {
    case &#39;increment&#39;: {
      return { count: state.count + 1 };
    }
    case &#39;decrement&#39;: {
      return { count: state.count - 1 };
    }
    default: {
      throw new Error(&#39;error: this shouldn\&#39;t have happened&#39;);
    }
  }
}
</code></pre>
<p>Even though <code>useState</code> and <code>useReducer</code> <a href="https://react.dev/learn/extracting-state-logic-into-a-reducer#comparing-usestate-and-usereducer" target="_blank" rel="noopener noreferrer">are equivalent</a>, <code>useReducer</code> can be used especially when you have to update the state in a lot of places, and for refactoring, but in the most simple cases, <code>useState</code> might be a better option. </p>
<p>Lastly, if we try to implement the <code>useReducer</code> hook ourselves, this is how it might look like: </p>
<pre><code class="language-jsx">import { useState } from &#39;react&#39;;

export function useReducer(reducer, initialState) {
  const [state, setState] = useState(initialState);

  function dispatch(action) {
    setState(s =&gt; reducer(s, action));
  }

  return [state, dispatch];
}
</code></pre>
<p>There are a lot of places where you can learn about <code>useReducer</code>, but as always, the first place to go is <a href="https://react.dev/reference/react/useReducer" target="_blank" rel="noopener noreferrer">the official docs</a> when learning about something new. I&#39;ve found <a href="https://dmitripavlutin.com/react-usereducer/" target="_blank" rel="noopener noreferrer">Dmitri Pavlutin&#39;s blog post</a> very helpful as well. As he also points out, <code>useReducer</code> introduces a lot more complexity, so, you&#39;re probably good with <code>useState</code> for simple state management.</p>
]]></description>
            <link>https://rivea0.github.io/blog/learning-reacts-useReducer-with-a-very-simple-example</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/learning-reacts-useReducer-with-a-very-simple-example</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Sat, 08 Apr 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Solving Some Config Issues for Testing React]]></title>
            <description><![CDATA[<p>Now that the <a href="https://github.com/reactjs/react.dev/pull/5487#issuecomment-1409720741" target="_blank" rel="noopener noreferrer">Create React App is already dead</a> (and, <a href="https://react.dev/" target="_blank" rel="noopener noreferrer">the new React docs</a> don&#39;t even mention it), when using a great tool like <a href="https://vitejs.dev/" target="_blank" rel="noopener noreferrer">Vite</a>, you might realize that it does not come with the usual testing libraries included as opposed to Create React App. While there is <a href="https://vitest.dev/guide/" target="_blank" rel="noopener noreferrer">Vitest</a> that is powered by Vite itself for unit testing, let&#39;s take a look at solving some basic configuration problems for Vite using <a href="https://jestjs.io/" target="_blank" rel="noopener noreferrer">Jest</a> and <a href="https://testing-library.com/" target="_blank" rel="noopener noreferrer">Testing Library</a>.</p>
<p><em>Note that this post is written assuming that you already have a working app, but want to try using Jest and Testing Library. This is of course not the way of test-driven development, but hey, we&#39;re just learning.</em></p>
<p>The very first thing is to install Jest:</p>
<pre><code class="language-shell">npm install --save-dev jest
</code></pre>
<p>Since we are using Testing Library, we need to install it as well:</p>
<pre><code class="language-shell">npm install --save-dev @testing-library/react
</code></pre>
<p>Of course, we need to add <code>&quot;test&quot;: &quot;jest&quot;</code> to <code>&quot;scripts&quot;</code> in our <code>package.json</code> so that we can use <code>npm run test</code> command:</p>
<pre><code class="language-package.json">&quot;scripts&quot;: {
  &quot;test&quot;: &quot;jest&quot;
}
</code></pre>
<p>Note that if you are using <code>eslint</code>, we need to add the piece below to our <code>.eslintrc.json</code> (or, your choice of <code>eslint</code> config file) so that you don&#39;t get any <code>undefined</code> errors:</p>
<pre><code class="language-.eslintrc.json">&quot;env&quot;: {
  &quot;jest&quot;: true
}
</code></pre>
<p>Considering that we already have an <code>App.jsx</code>, and created an <code>App.test.jsx</code> with the most basic form of something like this:</p>
<pre><code class="language-App.test.jsx">import React from &#39;react&#39;;
import { render, screen } from &#39;@testing-library/react&#39;;

import App from &#39;./App&#39;;

describe(&#39;App&#39;, () =&gt; {
  it(&#39;renders App component&#39;, () =&gt; {
    render(&lt;App /&gt;);
    screen.getByRole(&#39;heading&#39;, { level: 1, name: &#39;This is a heading&#39; });
  });
});
</code></pre>
<p>If we are quick to run <code>npm run test</code>, we might get some errors related to encountering an &quot;unexpected token.&quot; Such as this one:</p>
<p><img src="/blog/post-images/2023-04-03/jest-unexpected-token.png" alt="Jest error: Jest encountered an unexpected token"></p>
<p>The hint might be related to Babel, indeed, we need to install Babel to get things working:</p>
<pre><code class="language-shell">npm install --save-dev babel-jest @babel/core @babel/preset-env @babel/preset-react
</code></pre>
<p>Also, we need to create a <code>babel.config.json</code> and include this in it:</p>
<pre><code class="language-babel.config.json">{
  &quot;presets&quot;: [
    [
      &quot;@babel/preset-env&quot;,
      {
        &quot;targets&quot;: {
          &quot;node&quot;: &quot;current&quot;
        }
      }
    ],
    [&quot;@babel/preset-react&quot;, {&quot;runtime&quot;: &quot;automatic&quot;}]
  ]
}
</code></pre>
<p>Now, everything is almost okay, but not quite. Let&#39;s run <code>npm run test</code> again, and take a look at what we might see this time:</p>
<p><img src="/blog/post-images/2023-04-03/jest-jsdom.png" alt="Jest error: Consider using the &quot;jsdom&quot; test environment."></p>
<p>Now, for versions previous to 28, adding this to <code>package.json</code> would have been enough:</p>
<pre><code class="language-package.json">&quot;jest&quot;: {
  &quot;testEnvironment&quot;: &quot;jsdom&quot;
}
</code></pre>
<p>But, we need to install <code>jest-environment-jsdom</code> explicitly in order for this to work because <a href="https://jestjs.io/blog/2022/04/25/jest-28#breaking-changes" target="_blank" rel="noopener noreferrer">Jest removed it from the default package</a>.  See <a href="https://stackoverflow.com/a/69228464" target="_blank" rel="noopener noreferrer">this Stack Overflow answer</a> for a better explanation.</p>
<p>So, let&#39;s install it as well:</p>
<pre><code class="language-shell">npm install --save-dev jest-environment-jsdom
</code></pre>
<p>Now, everything is alright.<br>Perhaps.</p>
<p>If you have an <code>import</code> statement for, say, a CSS file like the one below in one of your files, you might encounter yet another <code>Jest encountered an unexpected token</code> error:</p>
<pre><code class="language-js">import &#39;katex/dist/katex.min.css&#39;; // Or, any kind of css file
</code></pre>
<p>We can use a proxy to mock CSS modules. And yes, we can install yet another package for that:</p>
<pre><code class="language-shell">npm install --save-dev identity-obj-proxy
</code></pre>
<p>We also need to update our config. You can add the below in our <code>package.json</code>&#39;s <code>jest</code> configuration (depending on the files you have, you might add additional extensions):</p>
<pre><code class="language-package.json">moduleNameMapper: {
  &quot;\\.(css|less)$&quot;: &quot;identity-obj-proxy&quot;
}
</code></pre>
<p>It is what the <a href="https://jestjs.io/docs/webpack#mocking-css-modules" target="_blank" rel="noopener noreferrer">Jest docs say about mocking CSS modules</a> as well.</p>
<p>If you don&#39;t like your Jest configs being in <code>package.json</code>, you can create a whole new <code>jest.config.json</code> as its own configuration file. This is how it looks like for now:</p>
<pre><code class="language-jest.config.json">{
  &quot;testEnvironment&quot;: &quot;jsdom&quot;,
  &quot;moduleNameMapper&quot;: {
    &quot;\\.(css|less)$&quot;: &quot;identity-obj-proxy&quot;
  }
}
</code></pre>
<p>And, for now, it is enough to get going. Of course, there is never a catch-all solution for all kinds of problems, but it works for my current setting, and I hope someone might find it helpful as well.</p>
]]></description>
            <link>https://rivea0.github.io/blog/solving-some-config-issues-for-testing-react</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/solving-some-config-issues-for-testing-react</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Mon, 03 Apr 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[async and await: Promises Simplified]]></title>
            <description><![CDATA[<p><a href="https://rivea0.github.io/blog/javascript-promises/" target="_blank" rel="noopener noreferrer">Promises in JavaScript</a> were there to save the day from being stuck in callback hell. But the thing is, <code>.then()</code> chains could eventually turn into a hell of their own. Since the human mind works synchronously, it might be hard to grasp asynchronous code when it becomes too tangled. Luckily, we have yet another thing to save the day — <code>async</code> and <code>await</code>!</p>
<p>We can write asynchronous functions that look like synchronous code with the keyword <code>async</code> in front of the <code>function</code> keyword:</p>
<pre><code class="language-javascript">async function doStuff { /* body */ }
</code></pre>
<p>Async functions always return a promise implicitly, even if you do something like this:</p>
<pre><code class="language-javascript">async function getTheMeaning() {
  return 42;
}
</code></pre>
<p>What is returned will be a promise with the resolved value of <code>42</code>.<br>It might look similar to the piece of code below (there will come a &quot;<em>but</em>&quot;):  </p>
<pre><code class="language-javascript">function getTheMeaning() {
  return Promise.resolve(42);
}
</code></pre>
<p><em>But</em>, they are not equivalent. The subtlety lies in the references these two functions will point to for a given promise. For example, let&#39;s create a new promise that both the plain function and the async function will resolve:</p>
<pre><code class="language-javascript">let theMeaning = new Promise((resolve, reject) =&gt; {
  resolve(42);
});

function plainGetTheMeaning() {
  return Promise.resolve(theMeaning);
}

async function asyncGetTheMeaning() {
  return theMeaning;
}
</code></pre>
<p>When we inspect if they are pointing to the same value, we see that they behave differently:</p>
<pre><code class="language-javascript">console.log(theMeaning === plainGetTheMeaning()); // true
console.log(theMeaning === asyncGetTheMeaning()); // false
</code></pre>
<p>So, in fact, maybe it is better to think of an <code>async</code> function as a function that returns a promise, and wrapped around our original function, like this one:</p>
<pre><code class="language-javascript">function getTheMeaning() {
  return new Promise(function(resolve, reject) {
    try {
      resolve((function() { return 42; } )()); 
    }
    catch(e) {
      reject(e);
    }
  });
}
</code></pre>
<p>Now in this case, we see that it is not like <code>plainGetTheMeaning()</code>, and much more like the <code>async</code> function itself when it comes to references:</p>
<pre><code class="language-javascript">let theMeaning = new Promise((resolve, reject) =&gt; {
  resolve(42);
});

function getTheMeaning() {
  return new Promise(function(resolve, reject) {
    try {
      resolve((function() { return 42; } )());
    }
    catch(e) {
      reject(e);
    }
  });
}

console.log(theMeaning === getTheMeaning()); // false
</code></pre>
<p><code>async</code> functions can also have <code>await</code> expressions. In fact, <code>await</code> can only be used within <code>async</code> functions (as long as it is <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await" target="_blank" rel="noopener noreferrer">not inside a module</a>).</p>
<p><code>await</code> basically waits for a promise to settle, and returns the fulfillment value of that promise. A simple example:</p>
<pre><code class="language-javascript">async function getToDo(toDoId) {
  let response = await fetch(`https://jsonplaceholder.typicode.com/todos/${toDoId}`);
  /*
  toDo is going to be the json object:
  { userId: 1, id: 1, title: &#39;delectus aut autem&#39;, completed: false }
  */
  let toDo = await response.json();
  return toDo.completed;
}
</code></pre>
<p>Here, the return value itself will be a promise, so it feels like we need to use <code>await</code> for it. Like this:</p>
<pre><code class="language-javascript">let isCompleted = await getToDo(1); // Not really...
</code></pre>
<p>But remember, <code>await</code> can be used inside another <code>async</code> function! Now that we can&#39;t use <code>await</code>, we need to handle this thing with our good friends <code>.then()</code> and <code>.catch()</code>:</p>
<pre><code class="language-javascript">getToDo(1)
  .then(isCompleted =&gt; console.log(isCompleted))
  .catch(e =&gt; { throw e });
</code></pre>
<p>The important thing to point out is that <code>await</code> just waits for its promise to settle and pauses the execution of the function. It is what <code>await</code> does, it just waits. So if there are multiple <code>await</code> expressions in succession, each of them will be executed sequentially, instead of running in parallel. It could be a good thing if each of them depends on the expression before it, but when it is not the case, it might create a performance issue where the execution of the code is slower.</p>
<p>In the <code>getToDo()</code> example, <code>todo</code> needs <code>response</code>, so it makes sense to use <code>await</code> one after the other. But, let&#39;s say we have multiple URLs to fetch, multiple <code>toDos</code>, and they are all independent of each other. In that case, we want them to run in parallel. We can use <code>Promise.all()</code> with <code>await</code> to do that:</p>
<pre><code class="language-javascript">async function getToDos(toDoIds) {
  let responses = toDoIds.map(async (id) =&gt; await fetch(`https://jsonplaceholder.typicode.com/todos/${id}`));
  let [response1, response2, response3] = await Promise.all(responses);
  let toDos = await Promise.all([response1.json(), response2.json(), response3.json()])
  return toDos.map(toDo =&gt; toDo.completed);
}

let ids = [1, 2, 3];

getToDos(ids)
  .then(toDosCompletedStatus =&gt; console.log(toDosCompletedStatus))
  .catch(e =&gt; { throw e });
</code></pre>
<p>Inside <code>getToDos()</code>, it seems like a lot going on, but it is actually simple to reason about. We take an array of <code>ids</code> as argument, and map them to their <code>fetch</code> responses of their corresponding URLs. Here, notice that we use an arrow function inside <code>.map()</code> that is defined as <code>async</code>.<br>Then, we use <code>await Promise.all(responses)</code> to get the fulfillment values of <code>responses</code>. After that, we get each response&#39;s <code>.json()</code> value, since <code>.json()</code> returns a promise, we again use <code>Promise.all()</code> with <code>await</code>. At this point, what we have is the fulfillment values of <code>toDos</code>, and we map them to the <code>completed</code> property of each. </p>
<p>And, here is the beauty of <code>async</code> and <code>await</code>, our code looks like it is synchronous, hence easier to read and think about.</p>
<p>Although using <code>async</code> and <code>await</code> is just a &quot;better&quot; way to use promises, and there is almost no difference between them, <code>async</code> and <code>await</code> might have a slight performance advantage when it comes to <a href="https://v8.dev/" target="_blank" rel="noopener noreferrer">V8 JavaScript engine</a> as the stack trace is not captured and stored when using <code>await</code>. Read more about it here: <a href="https://mathiasbynens.be/notes/async-stack-traces" target="_blank" rel="noopener noreferrer">https://mathiasbynens.be/notes/async-stack-traces</a></p>
<p>We have seen that promises were there to save us from callback hell, and that async functions make our code even better and simpler for us to read and write. Remember that there is always a &quot;better&quot; solution, depending on how you look at it, and of course, there is always the <a href="https://tc39.es/ecma262/" target="_blank" rel="noopener noreferrer">spec</a> and perhaps the friendlier <a href="https://developer.mozilla.org/en-US/" target="_blank" rel="noopener noreferrer">docs</a> to consult. 💜</p>
]]></description>
            <link>https://rivea0.github.io/blog/async-and-await-promises-simplified</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/async-and-await-promises-simplified</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Tue, 07 Mar 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[JavaScript Promises]]></title>
            <description><![CDATA[<p>Pour a hot cup of coffee, and find a comfy chair, because it is time for learning about promises in JavaScript!<br>First off, let&#39;s take a look at the <em>shape</em> of the code below: </p>
<pre><code class="language-javascript">fs.readdir(source, function (err, files) {
  if (err) {
    console.log(&#39;Error finding files: &#39; + err)
  } else {
    files.forEach(function (filename, fileIndex) {
      console.log(filename)
      gm(source + filename).size(function (err, values) {
        if (err) {
          console.log(&#39;Error identifying file size: &#39; + err)
        } else {
          console.log(filename + &#39; : &#39; + values)
          aspect = (values.width / values.height)
          widths.forEach(function (width, widthIndex) {
            height = Math.round(width / aspect)
            console.log(&#39;resizing &#39; + filename + &#39;to &#39; + height + &#39;x&#39; + height)
            this.resize(width, height).write(dest + &#39;w&#39; + width + &#39;_&#39; + filename, function(err) {
              if (err) console.log(&#39;Error writing file: &#39; + err)
            })
          }.bind(this))
        }
      })
    })
  }
})
</code></pre>
<p>This is an example of <a href="http://callbackhell.com/" target="_blank" rel="noopener noreferrer">callback hell</a> ― in fact, taken directly from that site. No one certainly wants to read, let alone write, such code. One clean way to deal with situations like these is through using promises. But, what is a <em>promise</em> in the first place?</p>
<p>Let&#39;s take a look at <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises" target="_blank" rel="noopener noreferrer">MDN</a>:</p>
<blockquote>
<p>A <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener noreferrer"><code>Promise</code></a> is an object representing the eventual completion or failure of an asynchronous operation.</p>
</blockquote>
<p>Sounds clear enough. But, is it?</p>
<p>Imagine for a second the everyday promises that you make to someone. It could be anything; let&#39;s say that you have promised your friend to call them as soon as you are available.</p>
<p>Now, one of three things can happen. They might still hold on to your promise, waiting for your call. Or, you might actually call them and fulfill your promise, showing how good of a friend you are. Or, you might outright reject to call them back, breaking your promise. </p>
<p>Well, how your friendships go in terms of promises is up to you, but the idea is similar with using promises in JavaScript; a promise has one of three states:</p>
<ul>
<li><strong>pending</strong>: the initial state.</li>
<li><strong>fulfilled</strong>: a successful operation.</li>
<li><strong>rejected</strong>: a failed operation.</li>
</ul>
<p>Let&#39;s take a look at this example:</p>
<pre><code class="language-js">let isCloseFriend = true;

let goingToCallFriend = new Promise((resolve, reject) =&gt; {
  if (isCloseFriend) {
    resolve(&#39;Hello, friend!&#39;);
  } else {
    reject(new Error(&#39;I don\&#39;t want to talk.&#39;));
  }
});

goingToCallFriend
  .then((fulfilled) =&gt; { console.log(fulfilled); })
  .catch((error) =&gt; { console.log(error); });
</code></pre>
<p>Here, we define a global variable (for this example) called <code>isCloseFriend</code>, and a <code>Promise</code> object <code>goingToCallFriend</code>. It takes a function as an argument, an <em>executor</em> function. It accepts two arguments, <code>resolve</code> and <code>reject</code> ― each of which is a function.<br>Inside the body of the <em>executor</em> function, we check if they are a close friend of ours, if so, we resolve the promise with the <code>resolve</code> function, passing it the <em>value</em> <code>&#39;Hello, friend!&#39;</code>. This is the fulfillment value that we want. This is what the docs say about it:</p>
<blockquote>
<p>The argument passed to the resolve function represents the eventual value of the deferred action and can be either the actual fulfillment value or another promise which will provide the value if it is fulfilled.</p>
</blockquote>
<p>Otherwise, if they are not a close friend, we call the <code>reject</code> function to reject it, passing it an error that has a message of <code>&#39;I don\&#39;t want to talk.&#39;</code> (the backslash here is for escaping the quote). </p>
<p>Also from the documentation:</p>
<blockquote>
<p>The argument passed to the reject function is used as the rejection value of the promise. Typically it will be an Error object.</p>
</blockquote>
<Note>
  You can always refer to the docs about [the Promise constructor](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-promise-executor).
</Note>

<p>Here is the more interesting part, after defining <code>goingToCallFriend</code>, we can invoke other methods on it, like <code>.then()</code> and <code>.catch()</code>. </p>
<p><code>.then()</code> needs a function as argument which itself takes two arguments <code>onFulfilled</code> and <code>onRejected</code>. This might be a bit confusing because we usually see examples of <code>.then()</code> with one argument, the fulfilled value. It is the value that was passed to <code>resolve()</code>. Notice that <code>.then()</code> returns another promise, so we can chain many more methods.</p>
<p><code>.catch()</code> is just a syntactic sugar for  <code>.then()</code> with the first argument <code>undefined</code>, and the second being the reason of error. </p>
<pre><code class="language-js">goingToCallFriend
  .then((fulfilled) =&gt; { console.log(fulfilled); })
  .catch((error) =&gt; { console.log(error); });

// ^ the shorthand for:
goingToCallFriend
  .then((fulfilled) =&gt; { console.log(fulfilled); })
  .then((undefined, error) =&gt; { console.log(error); });
</code></pre>
<p>Finally, there is another instance method called <code>.finally()</code> that will be called no matter what is the state of the promise.</p>
<p>There is one thing to point out that a resolved promise does not necessarily mean a fulfilled promise. A promise can be resolved, but it does not mean that it is fulfilled. Just like life itself.</p>
<p>The famous <a href="https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md" target="_blank" rel="noopener noreferrer">States and Fates</a> from the original Promises proposal details the terminology, and there is a very helpful <a href="https://stackoverflow.com/a/56850392" target="_blank" rel="noopener noreferrer">Stack Overflow answer</a> that explains this. Here is the table that the author uses in the answer that illustrates it clearly:</p>
<Table>
| action | dependency | state | resolved? | settled? |
| --- | --- | --- | --- | --- | 
| `new Promise((resolve, reject) => ...)` | autonomous | pending | no | no |
| ...`resolve(thenable)` | locked-in | pending* | yes | no |
| ...`resolve(other)` | autonomous | fulfilled | yes | yes |
| ...`reject(any)` | autonomous | rejected | yes | yes |
</Table>

<br />

<blockquote>
<ul>
<li>The thenable is now in control over the future state of our promise object.</li>
</ul>
</blockquote>
<p>Oh, and a thenable is just what it sounds like — you can think of it as an object that has a <code>.then()</code> method that accepts two callbacks, <code>onFulfilled</code> and <code>onRejected</code>.</p>
<p>There are a lot more things to consider when it comes to promises, such as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#static_methods" target="_blank" rel="noopener noreferrer">the static methods</a> like <code>Promise.all()</code>, <code>Promise.any()</code>, but they are kind of self-explanatory and clear in the docs.</p>
<p>One more thing that I want to mention is that <em>promises are guaranteed to be asynchronous</em>. Take a look at the code below:</p>
<pre><code class="language-js">let theMeaning = new Promise((resolve, reject) =&gt; {
  resolve(42)
});

theMeaning.then(value =&gt; console.log(&#39;From inside .then()&#39;));

console.log(&#39;Hello from the outside&#39;);

// &gt; Hello from the outside
// &gt; From inside .then()
</code></pre>
<p><code>&#39;Hello from the outside&#39;</code> gets logged first, even though the promise is already settled.<br>The reason for this has to do with the <a href="https://javascript.info/microtask-queue" target="_blank" rel="noopener noreferrer">microtask queue</a>. What it is might be slightly confusing for absolute beginners, but to very simply put it, a <code>.then()</code> function goes inside the microtask queue and waits for the stack to be cleared. Only after the stack is cleared, it is pushed on to the stack and runs. In this case, <code>theMeaning.then(value =&gt; console.log(&#39;From inside .then()&#39;));</code> can&#39;t run before <code>console.log(&#39;Hello from the outside&#39;);</code> and everything else is popped off the stack.</p>
<p>While we are here, it is important to note that learning about the <a href="https://javascript.info/event-loop" target="_blank" rel="noopener noreferrer">event loop</a> makes everything much clear when it comes it asynchronicity.<br><a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ" target="_blank" rel="noopener noreferrer">Philip Roberts&#39;s excellent talk</a> is a good starting point, as well as <a href="https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif" target="_blank" rel="noopener noreferrer">the JavaScript Visualized article from Lydia Hallie</a>.</p>
<p>There is even more delicious way to work with promises —<a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Promises#async_and_await" target="_blank" rel="noopener noreferrer">async and await</a>— but, that is for another article.<br>Until then, happy coding.</p>
]]></description>
            <link>https://rivea0.github.io/blog/javascript-promises</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/javascript-promises</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Sun, 05 Mar 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[A Quick Refresher on DOM Node Types and Element Node]]></title>
            <description><![CDATA[<p>DOM (Document Object Model) represents the structure of the HTML document in a tree-like model. It contains many types of nodes, <em>some</em> of them are: </p>
<ul>
<li><code>ELEMENT_NODE</code> — an HTML element, for example, a <code>&lt;div&gt;</code>.</li>
<li><code>TEXT_NODE</code> — text content, for example, <code>Hey</code> in <code>&lt;div&gt;Hey&lt;/div&gt;</code>.</li>
<li><code>COMMENT_NODE</code> — a comment, for example, <code>&lt;!-- comment --&gt;</code>.</li>
<li><code>DOCUMENT_NODE</code> — <code>document</code> itself.</li>
<li><code>DOCUMENT_TYPE_NODE</code> — the document type, <code>&lt;!DOCTYPE html&gt;</code>.</li>
</ul>
<p>Other node types can be found <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType" target="_blank" rel="noopener noreferrer">here</a>.</p>
<p>Node types also have values, such as <code>1</code> corresponding to <code>ELEMENT_NODE</code>, <code>3</code> corresponding to <code>TEXT_NODE</code>, <code>8</code> for <code>COMMENT_NODE</code>, <code>9</code> for  <code>DOCUMENT_NODE</code>, and so on.</p>
<p>We can see the type of a node with its aptly named <code>nodeType</code> property. For example, let&#39;s say we have only one <code>&lt;div&gt;</code> inside the <code>&lt;body&gt;</code> of our document (I know, not <em>a real world example</em>, but bear with it):</p>
<pre><code class="language-html">&lt;body&gt;
  &lt;div&gt;Hey&lt;/div&gt;
&lt;/body&gt;
</code></pre>
<pre><code class="language-js">document.querySelector(&#39;div&#39;).nodeType; // 1
document.querySelector(&#39;div&#39;).firstChild.nodeType; // 3
</code></pre>
<p>Since it is an <code>ELEMENT_NODE</code>, the <code>nodeType</code> is <code>1</code>.<br>When we look at the <code>nodeType</code> of its <code>firstChild</code> which is the <code>Hey</code> text, we can see that it is <code>3</code>, which corresponds to a <code>TEXT_NODE</code>.</p>
<Note>
  We can see the text node (which is not an element) because we use the `firstChild` property. If we were to see only the first element child, we could have used the `firstChildElement` property. But, in this case, it would be `null` as our `<div>` does not have any child elements.
</Note>

<p>You can see the properties and methods list of a <code>Node</code> <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node" target="_blank" rel="noopener noreferrer">here</a>.</p>
<p>One thing to mention is that all documents have root nodes that even if the document is blank, they will be there. These root nodes are<br><code>html</code> (<code>document.documentElement</code>), <code>head</code> (<code>document.head</code>), and <code>body</code> (<code>document.body</code>). And, of course, <code>document</code> itself is the root of all nodes.</p>
<Note>
  `document` is a property of the `window` object. Take a look at MDN for more information: https://developer.mozilla.org/en-US/docs/Web/API/Window
</Note>


<h2>Element Nodes</h2>
<p><code>Element</code> represents all element objects. It would be pretty exhausting to list all its properties and methods, since it has a lot of them. You can always refer to <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element" target="_blank" rel="noopener noreferrer">MDN</a>.</p>
<p>One interesting aspect is that each element is constructed with a unique constructor. HTML elements inherit from <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement" target="_blank" rel="noopener noreferrer"><code>HTMLElement</code> interface</a> (as well as <code>Element</code>, <code>Node</code>, and <code>Object</code>). But, each has their own constructor. For example, <code>&lt;form&gt;</code> element is constructed with <code>HTMLFormElement</code>, <code>&lt;img&gt;</code> element with <code>HTMLImageElement</code>, and so on. Read more about them in <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API#html_element_interfaces_2" target="_blank" rel="noopener noreferrer">here</a>.</p>
<p>We can get all the elements in the document using <code>querySelectorAll</code> method:</p>
<pre><code class="language-js">document.querySelectorAll(&#39;*&#39;);
</code></pre>
<p>It returns a <a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeList#static_nodelists" target="_blank" rel="noopener noreferrer">static <code>NodeList</code></a> containing all the elements in the page.</p>
<p>To get all the child elements, we can use <code>children</code> property. Let&#39;s say our <code>body</code> now contains a <code>div</code> element with an <code>img</code> element inside of it:</p>
<pre><code class="language-html">&lt;body&gt;
  &lt;div&gt;Hey
    &lt;img src=&quot;https://unsplash.com/photos/LaNLiftpmQc&quot; alt=&quot;Oxalis triangularis&quot;&gt;
  &lt;/div&gt;
&lt;/body&gt;
</code></pre>
<p>If we look at the <code>children</code> of our <code>div</code>, it is an <code>HTMLCollection</code> that only contains the <code>img</code> element:</p>
<pre><code class="language-js">document.querySelector(&#39;div&#39;).children;
// -&gt; HTMLCollection { 0: img, length: 1 }
</code></pre>
<p>An <code>HTMLCollection</code> is live, which means that if there is any change in the document, it will be reflected dynamically.</p>
<p>Now, let&#39;s see what happens if we use <code>childNodes</code> property on our <code>div</code>:</p>
<pre><code class="language-js">document.querySelector(&#39;div&#39;).childNodes;
// -&gt; NodeList(3) [ #text, img, #text ]
</code></pre>
<p>Now, it returns a <code>NodeList</code> which is live. It&#39;s clear that our first <code>#text</code> node is <code>Hey</code>,  our <code>img</code> is there, but what about the last <code>#text</code>?</p>
<p>If we take a look at this <code>NodeList</code>, we can see what is going on:</p>
<pre><code class="language-js">0: #text &quot;Hey\n &quot;
1: &lt;img src=&quot;https://images.unsplash.…f64?width=640&amp;height=360&quot; alt=&quot;Oxalis triangularis&quot;&gt;
2: #text &quot;\n &quot;
</code></pre>
<p>Whitespace are also text nodes, and because we use line breaks in our HTML document, it is obvious that they are also counted as text nodes.</p>
<p>This is just a quick reminder of some differences between properties like <code>childNodes</code> and <code>children</code>, as their return values will have items depending on the types of nodes they include.</p>
<p>As always, when in doubt, go to <a href="https://dom.spec.whatwg.org/" target="_blank" rel="noopener noreferrer">the documentation</a>.</p>
]]></description>
            <link>https://rivea0.github.io/blog/a-quick-refresher-on-dom-node-types-and-element-node</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/a-quick-refresher-on-dom-node-types-and-element-node</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Tue, 03 Jan 2023 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[CSV Operations 101 — with Python's Own `csv` Module]]></title>
            <description><![CDATA[<p>There is a great chance that you have come across, or have to work with a CSV (comma-separated values) file. A CSV file holds data similar to a spreadsheet. It separates the values with a <em>delimiter</em> character, so it does not always have to be a comma. However, since it is a <em>comma-separated values</em> file, let&#39;s see an example as such:</p>
<pre><code># 📁 students.csv

first,last,house
Harry,Potter,Gryffindor
Hermione,Granger,Gryffindor
Luna,Lovegood,Ravenclaw
Draco,Malfoy,Slytherin
</code></pre>
<p>As in the example above, the very first row (<code>first,last,house</code>) can be used for headers as column names.</p>
<p>Python conveniently has a built-in <code>csv</code> module to work with CSV files in an efficient way. The two basic operations are reading and writing; with Python, we can do these operations using lists (or, more generally, any iterable), or dictionaries.</p>
<h2><code>csv.reader()</code></h2>
<p>To read a CSV file, one option is to use <code>csv.reader()</code> method. Let&#39;s see an example for our simple <code>students.csv</code> file:</p>
<pre><code class="language-python">import csv

with open(&#39;students.csv&#39;) as csvfile:
    reader = csv.reader(csvfile)
    for row in reader:
        if row == [&#39;first&#39;, &#39;last&#39;, &#39;house&#39;]:
            continue
        print(f&#39;{row[0]} {row[1]} is in {row[2]}.&#39;)


# Harry Potter is in Gryffindor.
# Hermione Granger is in Gryffindor.
# Luna Lovegood is in Ravenclaw.
# Draco Malfoy is in Slytherin.
</code></pre>
<p>We use a <a href="https://docs.python.org/3/glossary.html#term-context-manager" target="_blank" rel="noopener noreferrer">context manager</a> to open our file. (Note that we do not need to specify the <code>&#39;r&#39;</code> argument as the mode for the reading operation because it is the default; see <a href="https://docs.python.org/3/library/functions.html#open" target="_blank" rel="noopener noreferrer">the official docs</a>.)<br>When we use <code>csv.reader()</code>, it returns a reader object, which we store in the <code>reader</code> variable. Then, with a <code>for</code> loop, we iterate through each row, which is a list — and, because our first row is actually the headers, we pass that iteration and continue. Actually, <code>csv.DictReader()</code> has better usability for this, which we will see later on. One important point here is that each row is a <code>list</code> containing three elements, and we access them with indexing (<code>row[0]</code>, <code>row[1]</code>, <code>row[2]</code>). This is not the most elegant implementation, but a simple enough example to see how <code>csv.reader()</code> works.</p>
<h2><code>csv.writer()</code></h2>
<p>Let&#39;s say we want to add Ron Weasley to our CSV file, because we want our Golden Trio to be together. Let&#39;s see how we can go about doing it:</p>
<pre><code class="language-python">import csv

with open(&#39;students.csv&#39;, &#39;a&#39;) as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow([&#39;Ron&#39;, &#39;Weasley&#39;, &#39;Gryffindor&#39;])
</code></pre>
<p>Here, we are again using a context manager to open our CSV file, this time with the <code>&#39;a&#39;</code> argument as the mode for appending to it. After that, we use <code>csv.writer()</code>, passing into it our file object. It returns a writer object, which we store in the <code>writer</code> variable. Then, we call <code>writerow()</code> method to add Ron Weasley. One important thing is that we pass a <code>list</code> as an argument, although it does not have to be a <code>list</code> — we could have used an iterable like a tuple, but using lists is more common.</p>
<p>Now, our file looks like:</p>
<pre><code># 📁 students.csv

first,last,house
Harry,Potter,Gryffindor
Hermione,Granger,Gryffindor
Luna,Lovegood,Ravenclaw
Draco,Malfoy,Slytherin
Ron,Weasley,Gryffindor
</code></pre>
<h2><code>csv.DictReader()</code></h2>
<p>We can improve on our last example for reading our CSV file. Let&#39;s use <code>csv.DictReader()</code> this time:</p>
<pre><code class="language-python">import csv

with open(&#39;students.csv&#39;) as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        print(f&#39;{row[&quot;first&quot;]} {row[&quot;last&quot;]} is in {row[&quot;house&quot;]}.&#39;)


# Harry Potter is in Gryffindor.
# Hermione Granger is in Gryffindor.
# Luna Lovegood is in Ravenclaw.
# Draco Malfoy is in Slytherin.
# Ron Weasley is in Gryffindor.
</code></pre>
<p>Like <code>csv.reader()</code>, <code>csv.DictReader()</code> returns a reader object, but this time, as the documentation says, it &quot;maps the information in each row to a <code>dict</code> whose keys are given by the optional <em>fieldnames</em> parameter.&quot;<br>If you have realized already, we have not specified the <em>fieldnames</em> parameter, so the first row is used as default fieldnames instead. We can see it with looking at the <code>fieldnames</code> attribute of our reader object:</p>
<pre><code class="language-python">import csv

with open(&#39;students.csv&#39;) as csvfile:
    reader = csv.DictReader(csvfile)
    print(reader.fieldnames) # [&#39;first&#39;, &#39;last&#39;, &#39;house&#39;]
</code></pre>
<p><code>csv.DictReader()</code> definitely made the code more readable than the previous method before. Let&#39;s see how we can use a dictionary again, this time for writing to our file.</p>
<h2><code>csv.DictWriter()</code></h2>
<p>We have added Ron Weasley to our <code>students.csv</code> before, let&#39;s add another Weasley this time, Ginny. Let&#39;s see how we can do it with <code>csv.DictWriter()</code>:</p>
<pre><code class="language-python">import csv

with open(&#39;students.csv&#39;, &#39;a&#39;) as csvfile:
    writer = csv.DictWriter(csvfile, fieldnames=[&#39;first&#39;, &#39;last&#39;, &#39;house&#39;])
    writer.writerow({&#39;first&#39;: &#39;Ginny&#39;, &#39;last&#39;: &#39;Weasley&#39;, &#39;house&#39;: &#39;Gryffindor&#39;})
</code></pre>
<p>We are again appending to our file, like we did with <code>csv.writer()</code>. We create a writer object with <code>csv.DictWriter()</code>, of course passing into it the file object itself, then assigning the writer object returned to the variable <code>writer</code>. Notice here that we pass an argument called <code>fieldnames</code> as well, which is a list containing, well, the fieldnames. It is not an optional argument, so we have to provide it each time we use <code>csv.DictWriter()</code>.<br>We use the <code>writerow()</code> method again, but this time, we pass it a dictionary whose keys are the fieldnames we have just specified.<br>Now our file looks like this:</p>
<pre><code># 📁 students.csv

first,last,house
Harry,Potter,Gryffindor
Hermione,Granger,Gryffindor
Luna,Lovegood,Ravenclaw
Draco,Malfoy,Slytherin
Ron,Weasley,Gryffindor
Ginny,Weasley,Gryffindor
</code></pre>
<p>Now, what if inside <code>writerow()</code> you pass in a key that is not in fieldnames? Obviously, we will have a <code>ValueError</code>, but let&#39;s see with an example. They say a house is not a home, but imagine that we mistakenly write Gryffindor as Ginny&#39;s <code>home</code>, instead of her <code>house</code> as we have in the <em>fieldnames</em>. Let&#39;s see:</p>
<pre><code class="language-python">import csv

with open(&#39;students.csv&#39;, &#39;a&#39;) as csvfile:
    writer = csv.DictWriter(csvfile, fieldnames=[&#39;first&#39;, &#39;last&#39;, &#39;house&#39;])
    writer.writerow({&#39;first&#39;: &#39;Ginny&#39;, &#39;last&#39;: &#39;Weasley&#39;, &#39;home&#39;: &#39;Gryffindor&#39;})
    

# ValueError: dict contains fields not in fieldnames: &#39;home&#39;
</code></pre>
<p>This actually comes from the optional <code>extrasaction</code> parameter inside <code>csv.DictWriter()</code>. Its default value is <code>&#39;raise&#39;</code>, so when the key is not found in the <em>fieldnames</em>, it raises a <code>ValueError</code>. However, we can force it to ignore it with passing the value <code>&#39;ignore&#39;</code>. So, if we do it:</p>
<pre><code class="language-python">import csv

with open(&#39;students.csv&#39;, &#39;a&#39;) as csvfile:
    writer = csv.DictWriter(csvfile, fieldnames=[&#39;first&#39;, &#39;last&#39;, &#39;house&#39;], extrasaction=&#39;ignore&#39;)
    writer.writerow({&#39;first&#39;: &#39;Ginny&#39;, &#39;last&#39;: &#39;Weasley&#39;, &#39;home&#39;: &#39;Gryffindor&#39;})
</code></pre>
<p>In that case, we would have ignored the key altogether, resulting in our file looking like this:</p>
<pre><code># 📁 students.csv

first,last,house
Harry,Potter,Gryffindor
Hermione,Granger,Gryffindor
Luna,Lovegood,Ravenclaw
Draco,Malfoy,Slytherin
Ron,Weasley,Gryffindor
Ginny,Weasley,
</code></pre>
<p>This is not the wisest decision, though, it is better to have an error in such cases, unless we somehow have a reason to do otherwise.</p>
<p>We can also use the <code>writerows()</code> method, to pass write more than one row. It takes an iterable as argument, so let&#39;s say we have two dictionaries in a list for the Weasley twins, we can add them both at once:</p>
<pre><code class="language-python">import csv

with open(&#39;students.csv&#39;, &#39;a&#39;) as csvfile:
    writer = csv.DictWriter(csvfile, fieldnames=[&#39;first&#39;, &#39;last&#39;, &#39;house&#39;])
    twins = [
        {&#39;first&#39;: &#39;Fred&#39;, &#39;last&#39;: &#39;Weasley&#39;, &#39;house&#39;: &#39;Gryffindor&#39;},
        {&#39;first&#39;: &#39;George&#39;, &#39;last&#39;: &#39;Weasley&#39;, &#39;house&#39;: &#39;Gryffindor&#39;}
    ]
    writer.writerows(twins)
</code></pre>
<p>Now, our file looks like:</p>
<pre><code># 📁 students.csv

first,last,house
Harry,Potter,Gryffindor
Hermione,Granger,Gryffindor
Luna,Lovegood,Ravenclaw
Draco,Malfoy,Slytherin
Ron,Weasley,Gryffindor
Ginny,Weasley,Gryffindor
Fred,Weasley,Gryffindor
George,Weasley,Gryffindor
</code></pre>
<h2>Quote constants</h2>
<p>Especially when working with writer objects, we may need to specify how to quote fields — for example, to handle a situation where our fields might include the delimiter character itself. For this, we can use the optional <code>quoting</code> parameter for the writer methods, along with <code>quotechar</code> parameter to specify which character to use for quotes.</p>
<p>The <code>csv</code> module has four constants to use for <code>quoting</code>:</p>
<ul>
<li><p><code>csv.QUOTE_ALL</code>: To quote all fields.</p>
</li>
<li><p><code>csv.QUOTE_MINIMAL</code>: To quote the fields which have special characters (such as the delimiter itself).</p>
</li>
<li><p><code>csv.QUOTE_NONNUMERIC</code>: To quote all non-numeric fields.</p>
</li>
<li><p><code>csv.QUOTE_NONE</code>: To never quote fields. If the delimiter character occurs in one of the fields, then the <code>escapechar</code> character is used. If <code>escapechar</code> is not provided, it will raise an error.</p>
</li>
</ul>
<p>Let&#39;s see a simple example with <code>csv.QUOTE_ALL</code> using <code>csv.DictWriter()</code>. As you can imagine, it is going to quote all the fields:</p>
<pre><code class="language-python">import csv

with open(&#39;students.csv&#39;, &#39;a&#39;) as csvfile:
    writer = csv.DictWriter(csvfile, fieldnames=[&#39;first&#39;, &#39;last&#39;, &#39;house&#39;], quotechar=&#39;&quot;&#39;, quoting=csv.QUOTE_ALL)
    writer.writerow({&#39;first&#39;: &#39;Cho&#39;, &#39;last&#39;: &#39;Chang&#39;, &#39;house&#39;: &#39;Ravenclaw&#39;})
</code></pre>
<p>Now, Cho Chang&#39;s field is all in quotes:</p>
<pre><code># 📁 students.csv

first,last,house
Harry,Potter,Gryffindor
Hermione,Granger,Gryffindor
Luna,Lovegood,Ravenclaw
Draco,Malfoy,Slytherin
Ron,Weasley,Gryffindor
Ginny,Weasley,Gryffindor
Fred,Weasley,Gryffindor
George,Weasley,Gryffindor
&quot;Cho&quot;,&quot;Chang&quot;,&quot;Ravenclaw&quot;
</code></pre>
<h2>Conclusion</h2>
<p>The convenience that Python provides with its built-in modules is really valuable, and it is no different with the <code>csv</code> module, too. This article explored very simple operations for reading and writing CSV files, but there is always a lot more to explore, and the first stop is always <a href="https://docs.python.org/3/library/csv.html" target="_blank" rel="noopener noreferrer">the official documentation</a>. Hopefully, you now understand some of the basics of dealing with CSV files.<br>Happy coding.</p>
]]></description>
            <link>https://rivea0.github.io/blog/csv-operations-101</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/csv-operations-101</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Sun, 28 Aug 2022 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Simple Implementation of Stacks and Queues with Deque in Python]]></title>
            <description><![CDATA[<p>Two of the <a href="https://en.wikipedia.org/wiki/Abstract_data_type" target="_blank" rel="noopener noreferrer">abstract data types</a> that you are most likely to have encountered before are <a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)" target="_blank" rel="noopener noreferrer">stacks</a> and <a href="https://en.wikipedia.org/wiki/Queue_(abstract_data_type)" target="_blank" rel="noopener noreferrer">queues</a>. One important aspect is that each of them has different principles when it comes to their behavior when inserting and removing elements — LIFO (last in, first out) for stacks, FIFO (first in, first out) for queues. With a stack, the last item inserted is the first to go out, so, we <em>push</em> and <em>pop</em> from one end of the stack. With a queue, the first item inserted is going to be removed first, similar to a queue in real life, so, <em>enqueue</em> and <em>dequeue</em> operations are done from the opposite ends of the queue.</p>
<p>With a &quot;double-ended queue&quot;, or a <a href="https://en.wikipedia.org/wiki/Double-ended_queue" target="_blank" rel="noopener noreferrer">deque</a>—pronounced as &quot;deck&quot;—, we can enqueue or dequeue, or, push and pop items from both ends at any time. Implemented as a <a href="https://en.wikipedia.org/wiki/Doubly_linked_list" target="_blank" rel="noopener noreferrer">doubly-linked list</a> under the hood, insertion and deletion operations will take <em>O(1)</em>, constant time. This is also another reason why a deque is great — you can imagine that we can also use a Python <code>list</code> for the same goal, but in that case, if we want to insert and remove from the beginning (say, from the left end), the operation will take <em>O(n)</em> time, which is, well, not so good.</p>
<p>Let&#39;s take a look at it. Using a <code>list</code>, you might have seen a stack as implemented as such*:</p>
<pre><code class="language-python">class Stack:
    &quot;&quot;&quot;Stack implementation as a list.&quot;&quot;&quot;

    def __init__(self):
        &quot;&quot;&quot;Create new stack.&quot;&quot;&quot;
        self._items = []

    def is_empty(self):
        &quot;&quot;&quot;Check if the stack is empty.&quot;&quot;&quot;
        return not bool(self._items)

    def push(self, item):
        &quot;&quot;&quot;Add an item to the stack.&quot;&quot;&quot;
        self._items.append(item)

    def pop(self):
        &quot;&quot;&quot;Remove an item from the stack.&quot;&quot;&quot;
        return self._items.pop()

    def peek(self):
        &quot;&quot;&quot;Get the value of the top item in the stack.&quot;&quot;&quot;
        return self._items[-1]
    
    def size(self):
        &quot;&quot;&quot;Get the number of items in the stack.&quot;&quot;&quot;
        return len(self._items)
</code></pre>
<p>And, a queue like this:</p>
<pre><code class="language-python">class Queue:
    &quot;&quot;&quot;Queue implementation as a list.&quot;&quot;&quot;

    def __init__(self):
        &quot;&quot;&quot;Create new queue.&quot;&quot;&quot;
        self._items = []

    def is_empty(self):
        &quot;&quot;&quot;Check if the queue is empty.&quot;&quot;&quot;
        return not bool(self._items)

    def enqueue(self, item):
        &quot;&quot;&quot;Add an item to the queue.&quot;&quot;&quot;
        self._items.insert(0, item)

    def dequeue(self):
        &quot;&quot;&quot;Remove an item from the queue.&quot;&quot;&quot;
        return self._items.pop()

    def size(self):
        &quot;&quot;&quot;Get the number of items in the queue.&quot;&quot;&quot;
        return len(self._items)
</code></pre>
<p>Since we want to use a <code>deque</code> here instead of a list, let&#39;s take a simple look at it.</p>
<p>We can initialize a <code>deque</code> object with optionally passing an iterable as argument. It is in the <code>collections</code> module, so we also have to import it:</p>
<pre><code class="language-python">from collections import deque

d = deque([7, 3, 0, 1])
print(d) # deque([7, 3, 0, 1])

empty_d = deque()
print(empty_d) # deque([])
</code></pre>
<p>Also, remember that strings are sequences, in that case, our <code>deque</code> would look like this:</p>
<pre><code class="language-python">d = deque(&#39;hey&#39;)
print(d) # deque([&#39;h&#39;, &#39;e&#39;, &#39;y&#39;])
</code></pre>
<p>We can also provide a <code>maxlen</code> argument to specify the maximum length of items we want our <code>deque</code> to have — to make it <em>bounded</em>.</p>
<p>This is a trivial example, but let&#39;s get a sense of how it is working:</p>
<pre><code class="language-python">from collections import deque

d = deque([4, 5, 3, 1, 8], maxlen=3)
print(d) # deque([3, 1, 8], maxlen=3)

d = deque([4, 5, 3, 1, 8], maxlen=4)
print(d) # deque([5, 3, 1, 8], maxlen=4)
</code></pre>
<p>As the items in the iterable are appended from one end, removing the other items (in the case of <code>maxlen=3</code> example, 4 and 5) will be from the opposite end.</p>
<p>Of course, the efficiency of a <code>deque</code> also comes from its <code>appendleft()</code> and <code>popleft()</code> methods, which are aptly named, and better than a <code>list</code> in terms of time complexity.</p>
<pre><code class="language-python">from collections import deque

d = deque([7, 11])
d.appendleft(3)
print(d) # deque([3, 7, 11])

d.appendleft(1)
print(d) # deque([1, 3, 7, 11])

first_i = d.popleft()
print(first_i) # 1
print(d) # deque([3, 7, 11])
</code></pre>
<p>We also have the <code>append()</code> and <code>pop()</code> methods which do their operations to/from the right — like a regular <code>list</code>:</p>
<pre><code class="language-python">from collections import deque

d = deque([2, 4, 6])
d.append(8)
print(d) # deque([2, 4, 6, 8])

first_popped = d.pop()
second_popped = d.pop()

print(f&#39;Popped {first_popped} first, then {second_popped} second.&#39;)
# -&gt; Popped 8 first, then 6 second.

print(d) # deque([2, 4])
</code></pre>
<p>Now that we have seen the append and pop operations from both sides, let&#39;s implement a queue first, similar to the <code>list</code> version at the beginning of the article:</p>
<pre><code class="language-python">from collections import deque

class Queue:
    &quot;&quot;&quot;Queue implementation as a deque.&quot;&quot;&quot;

    def __init__(self):
        &quot;&quot;&quot;Create new queue.&quot;&quot;&quot;
        self._items = deque()

    def is_empty(self):
        &quot;&quot;&quot;Check if the queue is empty.&quot;&quot;&quot;
        return not bool(self._items)

    def enqueue(self, item):
        &quot;&quot;&quot;Add an item to the queue.&quot;&quot;&quot;
        self._items.append(item)

    def dequeue(self):
        &quot;&quot;&quot;Remove an item from the queue.&quot;&quot;&quot;
        return self._items.popleft()

    def size(self):
        &quot;&quot;&quot;Get the number of items in the queue.&quot;&quot;&quot;
        return len(self._items)
</code></pre>
<p>For the stack version, as we need to append and pop from the same end, <code>append()</code> and <code>pop()</code> methods using a <code>list</code> might seem okay at first, too. But, let&#39;s modify the previous stack version above to implement it as a <code>deque</code>:</p>
<pre><code class="language-python">from collections import deque

class Stack:
    &quot;&quot;&quot;Stack implementation as a deque.&quot;&quot;&quot;

    def __init__(self):
        &quot;&quot;&quot;Create new stack.&quot;&quot;&quot;
        self._items = deque()

    def is_empty(self):
        &quot;&quot;&quot;Check if the stack is empty.&quot;&quot;&quot;
        return not bool(self._items)

    def push(self, item):
        &quot;&quot;&quot;Add an item to the stack.&quot;&quot;&quot;
        self._items.append(item)

    def pop(self):
        &quot;&quot;&quot;Remove an item from the stack.&quot;&quot;&quot;
        return self._items.pop()

    def peek(self):
        &quot;&quot;&quot;Get the value of the top item in the stack.&quot;&quot;&quot;
        return self._items[-1]
</code></pre>
<p>Nothing much seems different, but you can also imagine using the other end, using <code>appendleft()</code> together with <code>popleft()</code> as well.</p>
<p>We have explored a very simple way to create stacks and queues using a deque, but of course, there is a lot more to dive into. <a href="https://docs.python.org/3/library/collections.html#collections.deque" target="_blank" rel="noopener noreferrer">The official documentation</a> is the first place to go, and you can also check out a <a href="https://realpython.com/python-deque/" target="_blank" rel="noopener noreferrer">Real Python article</a> on the subject. As with many things, it is up to you what you want to achieve, and a double-ended queue is just another tool in your toolkit to consider.</p>
<p>* The examples of stack and queue implementations as a list are from <a href="https://runestone.academy/ns/books/published/pythonds3/index.html" target="_blank" rel="noopener noreferrer">Brad Miller and David Ranum&#39;s wonderful book on algorithms and data structures</a>.</p>
]]></description>
            <link>https://rivea0.github.io/blog/simple-implementation-of-stacks-and-queues-with-deque-in-python</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/simple-implementation-of-stacks-and-queues-with-deque-in-python</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Sat, 06 Aug 2022 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Solving the Problem Sets of CS50's Introduction to Programming with Python — One at a Time: Final Project and Beyond]]></title>
            <description><![CDATA[<p>The final week has arrived, and today we do not have any problem sets. Before anything, give yourself a pat on the back for coming this far!<br>It has been quite a delightful journey. We have started with the basic blocks of programming, <a href="https://cs50.harvard.edu/python/2022/weeks/0/" target="_blank" rel="noopener noreferrer">variables and functions</a>, dealt with flow control using <a href="https://cs50.harvard.edu/python/2022/weeks/1/" target="_blank" rel="noopener noreferrer">conditionals</a>, iterated with <a href="https://cs50.harvard.edu/python/2022/weeks/2/" target="_blank" rel="noopener noreferrer">loops</a>, handled <a href="https://cs50.harvard.edu/python/2022/weeks/3/" target="_blank" rel="noopener noreferrer">exceptions</a>, scratched the surface of the world of Python <a href="https://cs50.harvard.edu/python/2022/weeks/4/" target="_blank" rel="noopener noreferrer">libraries</a>, written <a href="https://cs50.harvard.edu/python/2022/weeks/5/" target="_blank" rel="noopener noreferrer">tests</a> for our programs to make sure that they work as we intend them to do, worked with <a href="https://cs50.harvard.edu/python/2022/weeks/6/" target="_blank" rel="noopener noreferrer">files</a>, learned to love <a href="https://cs50.harvard.edu/python/2022/weeks/7/" target="_blank" rel="noopener noreferrer">regular expressions</a>, and last week, peeked into the realm of <a href="https://cs50.harvard.edu/python/2022/weeks/8/" target="_blank" rel="noopener noreferrer">object-oriented programming</a>. Today in <a href="https://cs50.harvard.edu/python/2022/weeks/9/" target="_blank" rel="noopener noreferrer">et cetera</a> we will be looking at some other tools in our toolkit. Phew! If you have started this journey from absolute zero, you have indeed come far! Even if you already have some knowledge before starting the course, congratulations to you as well! It is not easy to dedicate oneself through all these weeks. You can always find the posts on previous problem sets in <a href="https://rivea0.github.io/blog/" target="_blank" rel="noopener noreferrer">the archive</a> as well. </p>
<p>The theme of this series, as well as the course, has been one important point: <em>when in doubt, read the documentation</em>. Even though <a href="https://docs.python.org/3/" target="_blank" rel="noopener noreferrer">the official Python documentation</a> might not seem as friendly at first, you have been using it for many weeks and must be familiar with it already. There are lots more to discover, of course, and it is our number-one friend. Some of these things to discover are already shown in the lecture, so, let&#39;s remember them with very simple examples. (And, get ready for a bunch of Harry Potter references.)</p>
<h2>Sets</h2>
<p>A set is, at the very basic level, a data structure that has no duplicates. So, let&#39;s say you want to look at the distinct broomsticks that Harry Potter used for Quidditch. Easy to do it with a set:</p>
<pre><code class="language-python">broomsticks = [
    &#39;Nimbus 2000&#39;, 
    &#39;Nimbus 2000&#39;, 
    &#39;Firebolt&#39;,
    &#39;Firebolt&#39;, 
    &#39;Firebolt&#39;,
    &#39;Firebolt&#39;,
]

print(set(broomsticks)) # {&#39;Firebolt&#39;, &#39;Nimbus 2000&#39;}
</code></pre>
<h2>Globals</h2>
<p>Global variables are usually frowned upon; especially, using the <code>global</code> keyword is something you must avoid unless you are absolutely sure what you are doing. You can think of a global variables as simply variables outside a function. They cannot just be changed right away inside a function, but are read only in that sense. To change the value of a global variable inside a function, you use the <code>global</code> keyword. Let&#39;s say we are completing the title of our favorite book in the Harry Potter series:</p>
<pre><code class="language-python">half_title = &#39;Chamber of Secrets&#39;

def change_half_title():
    half_title = &#39;Goblet of Fire&#39;

change_half_title()

print(f&#39;Harry Potter and the {half_title}&#39;)
# -&gt; Harry Potter and the Chamber of Secrets
</code></pre>
<p>Of course, it did not change as we expected. However, with the <code>global</code> keyword, it works:</p>
<pre><code class="language-python">half_title = &#39;Chamber of Secrets&#39;

def change_half_title():
    global half_title
    half_title = &#39;Goblet of Fire&#39;

change_half_title()

print(f&#39;Harry Potter and the {half_title}&#39;)
# -&gt; Harry Potter and the Goblet of Fire
</code></pre>
<p>Again, it is not very nice to look at, so avoid this kind of implementation as much as you can.</p>
<h2>Constants</h2>
<p>If you have seen the lecture, you already know that Python do not have constant types. A &quot;constant&quot; variable, though, is indicated with capital letters:</p>
<pre><code class="language-python">SCHOOL_NAME = &#39;Hogwarts School of Witchcraft and Wizardry&#39;


def invite_student():
    return f&#39;We are pleased to inform you that you have been accepted at {SCHOOL_NAME}.&#39;


print(invite_student())
# -&gt; We are pleased to inform you that you have been accepted at Hogwarts School of Witchcraft and Wizardry.
</code></pre>
<h2>Type Hints</h2>
<p>Python is a dynamically-typed language, however, we can still use type hints to make sure we avoid <code>TypeError</code>s.</p>
<p>For example, as you can find the similar example in the <a href="https://docs.python.org/3/library/typing.html" target="_blank" rel="noopener noreferrer">documentation for typing</a>, we can indicate the expected types for arguments and return values of a function:</p>
<pre><code class="language-python">def greeting(name: str) -&gt; str:
    return f&#39;Hello, {name}!&#39;
</code></pre>
<p>Also, as mentioned in the lecture, <code>mypy</code> is a popular <a href="https://mypy.readthedocs.io/en/stable/" target="_blank" rel="noopener noreferrer">library</a> that you can use for type hinting.</p>
<h2>Docstrings</h2>
<p>Docstrings can occur in a module, a function, or a class. The simplest one-line docstring looks like this:</p>
<pre><code class="language-python">def add(n, n1):
    &quot;&quot;&quot;Add two numbers.&quot;&quot;&quot;
    return n + n1
</code></pre>
<p>The conventions on how to use docstrings can be found here in <a href="https://peps.python.org/pep-0257/" target="_blank" rel="noopener noreferrer">this PEP</a>.</p>
<h2>argparse</h2>
<p><code>argparse</code> is a <a href="https://docs.python.org/3/library/argparse.html" target="_blank" rel="noopener noreferrer">module</a> that comes built-in with Python, literally a &quot;parser for command-line options, arguments and sub-commands&quot;. </p>
<p>There is a <a href="https://docs.python.org/3/howto/argparse.html#id1" target="_blank" rel="noopener noreferrer">great tutorial</a> on the official documentation already, so, we are not going to dive deep into it here. The simplest thing you can do might look like this. Say, we have a file called <code>spell.py</code>, and we want to pass in the argument <code>-s</code> to our program to indicate the type of spell we want to create. We want the proper incantation printed on our terminal. Let&#39;s see:</p>
<pre><code class="language-python"># 📁 spell.py

import argparse


incantations = {
    &#39;patronus&#39;: &#39;Expecto Patronum!&#39;,
    &#39;summon&#39;: &#39;Accio!&#39;,
    &#39;unlock&#39;: &#39;Alohomora!&#39;,
    &#39;explode&#39;: &#39;Bombarda!&#39;,
    &#39;levitate&#39;: &#39;Wingardium Leviosa!&#39;,
    &#39;stun&#39;: &#39;Stupefy!&#39;
}

parser = argparse.ArgumentParser()
parser.add_argument(&#39;-s&#39;)
args = parser.parse_args()

print(incantations[args.s])
</code></pre>
<p>We can see it with the right command:</p>
<pre><code class="language-shell">$ python spell.py -s unlock
Alohomora!
</code></pre>
<h2>*args, **kwargs</h2>
<p>We have mentioned the unpacking operators briefly in a previous post on <a href="https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-4/" target="_blank" rel="noopener noreferrer">problem set 4</a>. The example looked like this:</p>
<pre><code class="language-python">values = [0, 5, 2]
print(*values) # 0 5 2

# Prints 0, 2, 4 respectively
for i in range(*values):
    print(i)


houses = {
    &#39;Gryffindor&#39;: &#39;courage&#39;,
    &#39;Ravenclaw&#39;: &#39;intelligence&#39;,
    &#39;Hufflepuff&#39;: &#39;loyalty&#39;,
    &#39;Slytherin&#39;: &#39;ambition&#39;
}

people = {
    &#39;Harry Potter&#39;: &#39;Gryffindor&#39;,
    &#39;Hermione Granger&#39;: &#39;Gryffindor&#39;,
    &#39;Luna Lovegood&#39;: &#39;Ravenclaw&#39;
}

print({**houses, **people}) # {&#39;Gryffindor&#39;: &#39;courage&#39;, &#39;Ravenclaw&#39;: &#39;intelligence&#39;, &#39;Hufflepuff&#39;: &#39;loyalty&#39;, &#39;Slytherin&#39;: &#39;ambition&#39;, &#39;Harry Potter&#39;: &#39;Gryffindor&#39;, &#39;Hermione Granger&#39;: &#39;Gryffindor&#39;, &#39;Luna Lovegood&#39;: &#39;Ravenclaw&#39;}
</code></pre>
<p>They are super handy for many kinds of problems you encounter, so, another great tool in our toolkits.</p>
<h2>map</h2>
<p>With the <code>map</code> function, we can <em>map</em> a function to each item of an iterable. Creating a list of the squares of each number in a &quot;numbers&quot; list might look like this:</p>
<pre><code class="language-python">numbers = [3, 5, 7, 11, 13]

squared = list(map(lambda n: n**2, numbers))

print(squared) # [9, 25, 49, 121, 169]
</code></pre>
<p>Notice that we also convert the return value of <code>map</code> to a <code>list</code>, as the <code>map</code> function returns a <code>Map</code> object.</p>
<h2>List comprehensions</h2>
<p>If you have been following the series, you already know about the list comprehensions way <a href="https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-2/" target="_blank" rel="noopener noreferrer">back in Problem Set 2</a>. It is a Pythonic way to <em>append</em> to a list, so instead of doing something like this:</p>
<pre><code class="language-python">word = &#39;CS50&#39;

digits_in_word = []

for char in word:
    if char.isdigit():
        digits_in_word.append(char)

print(digits_in_word) # [&#39;5&#39;, &#39;0&#39;]
</code></pre>
<p>Just write a one-liner that achieves the same result:</p>
<pre><code class="language-python">word = &#39;CS50&#39;

digits_in_word = [char for char in word if char.isdigit()]

print(digits_in_word) # [&#39;5&#39;, &#39;0&#39;]
</code></pre>
<h2>filter</h2>
<p>We can also filter an iterable, returning only the values we are interested in. </p>
<p>The same example above in list comprehensions can also be solved like this:</p>
<pre><code class="language-python">word = &#39;CS50&#39;

digits_in_word = list(filter(str.isdigit, word))

print(digits_in_word) # [&#39;5&#39;, &#39;0&#39;]
</code></pre>
<p>Also, just like in <code>map</code>, notice we also convert the return value to a <code>list</code>. We also do not call the <code>str.isdigit</code> inside <code>filter</code>, we only pass a reference to that function.</p>
<h2>Dictionary comprehensions</h2>
<p>Similar to list comprehensions, dictionary comprehensions are also another —sometimes elegant, sometimes not— way to create dictionaries. To implement a very simple one, let&#39;s initialize all the Hogwarts house points to 0 for the start of the term:</p>
<pre><code class="language-python">houses = [&#39;Gryffindor&#39;, &#39;Hufflepuff&#39;, &#39;Ravenclaw&#39;, &#39;Slytherin&#39;]

house_points = {house: 0 for house in houses}

print(house_points) # {&#39;Gryffindor&#39;: 0, &#39;Hufflepuff&#39;: 0, &#39;Ravenclaw&#39;: 0, &#39;Slytherin&#39;: 0}
</code></pre>
<p>It works as intended, and initializes all the house points 0.</p>
<h2>enumerate</h2>
<p>Here is a Pythonic way to iterate over an iterable. Similar to the lecture example, let&#39;s say that this time we want to print the names of the houses, also indicated with the first value of &#39;1&#39;, instead of &#39;0&#39;. We do not have to write something like this:</p>
<pre><code class="language-python">houses = [&#39;Gryffindor&#39;, &#39;Hufflepuff&#39;, &#39;Ravenclaw&#39;, &#39;Slytherin&#39;]

for i in range(len(houses)):
    print(i + 1, houses[i])

# -&gt;
# 1 Gryffindor
# 2 Hufflepuff
# 3 Ravenclaw
# 4 Slytherin
</code></pre>
<p>There is a more elegant way to do it:</p>
<pre><code class="language-python">houses = [&#39;Gryffindor&#39;, &#39;Hufflepuff&#39;, &#39;Ravenclaw&#39;, &#39;Slytherin&#39;]

for index, house in enumerate(houses, start=1):
    print(index, house)

# -&gt;
# 1 Gryffindor
# 2 Hufflepuff
# 3 Ravenclaw
# 4 Slytherin
</code></pre>
<p>Notice that the <code>enumerate</code> function also takes a <code>start</code> argument to start from the number that is passed.</p>
<h2>Generators</h2>
<p>Finally, also mentioned in the lecture, a generator function is a &quot;function that returns a generator iterator&quot;. With a generator function that <em>yields</em> as opposed <em>returns</em> a value, we can save memory with <a href="https://en.wikipedia.org/wiki/Lazy_evaluation" target="_blank" rel="noopener noreferrer">lazy evaluation</a>. The Python documentation also has a <a href="https://docs.python.org/3/howto/functional.html#generators" target="_blank" rel="noopener noreferrer">tutorial on generators</a>, and similar to the example in the lecture, the very simplest implementation might look like this:</p>
<pre><code class="language-python">def main():
    for _ in gen(1000000):
        print(_)

def gen(n):
    for _ in range(n):
        yield _

if __name__ == &#39;__main__&#39;:
    main()
</code></pre>
<p>These are all the topics we have explored this week. From now on, we are left with our very own <a href="https://cs50.harvard.edu/python/2022/project/" target="_blank" rel="noopener noreferrer">Final Project</a> to implement. For this, you are free to create anything that excites you, any kind of problem that you want to solve — of course, following the given specifications for the project. And, after that, you might think that is all, and that we are finished, but, are we?</p>
<h2>Conclusion</h2>
<p>Now, looking back, we have gathered many useful tools in our toolkit to do whatever we want to do. But, should we do whatever we want to do just because we can?<br>You probably have ideas for the answer to that question. It is easy to get excited about all kinds of things you can create once you know how to do them. But, once you start to create things, always remember that using and trusting technology as a solution to all problems is not always the case. Now that you have the power and knowledge to do so, remember that it is absolutely <em>vital</em> to create software that respects users&#39; freedom, that is open and trustworthy. Remember that <a href="https://www.privacyinternational.org/explainer/56/what-privacy" target="_blank" rel="noopener noreferrer">privacy is a human right</a>, even if there might have already been much talk about it — yet, usually without honesty. Do not underestimate your current level of knowledge, you have tremendous power in your hands with the tools you can use. And, yes, one more thing to remember — <a href="https://www.britannica.com/event/Bernstein-vs-the-US-Department-of-State" target="_blank" rel="noopener noreferrer">code is speech</a>.<br>These all might sound like out of context, why should you even bother to think about them? After all, assuming you only have taken this introductory course, and are still at the beginning of your programming journey, and have a long way to go. But, hopefully, you undoubtedly agree that we need good things in life — good software that respects human dignity and helps the progress of humanity is one of them. If you think these are some grand ideologies for a &quot;beginner&quot; like you —which, honestly, I also consider myself a &quot;beginner&quot; in many things at this point—, remember that each piece of knowledge will eventually add up to another, so, even if you are not going to pursue a programming path in your life at all; that is fine, because at least this will be how you look at things, have a stronger sense of self-agency, and a more educated opinion in the decisions that affects us all.</p>
<p>With that in mind, that is the end of the series!<br>If you have read so far, thank you. And, as always, happy coding. 💜</p>
]]></description>
            <link>https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-final</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-final</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Wed, 08 Jun 2022 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Solving the Problem Sets of CS50's Introduction to Programming with Python — One at a Time: Problem Set 8]]></title>
            <description><![CDATA[<p><a href="https://cs50.harvard.edu/python/2022/weeks/8/" target="_blank" rel="noopener noreferrer">This week</a>, we are solving <a href="https://cs50.harvard.edu/python/2022/psets/8/" target="_blank" rel="noopener noreferrer">the last problem set</a> of the course. We have covered so much, solved many beautiful problems, and after this week, are ready to implement our very own final project! I know that is a bit emotional indeed, but let me give the <strong>disclaimer</strong> one last time, that this series was intended as a guide for thinking about the problems, instead of just providing the solutions. And, as always, it is assumed you have read the problem explanations already. You can find the previous posts in this series in <a href="https://rivea0.github.io/blog/" target="_blank" rel="noopener noreferrer">the archive</a>.</p>
<p>So far, we have been writing our code <a href="https://en.wikipedia.org/wiki/Procedural_programming" target="_blank" rel="noopener noreferrer">procedurally</a>, but this time, we are going to make use of the Object-Oriented programming paradigm, which is definitely exciting as we will explore each problem. Let&#39;s dive in!</p>
<h2>Seasons of Love</h2>
<p>For <a href="https://cs50.harvard.edu/python/2022/psets/8/seasons/" target="_blank" rel="noopener noreferrer">the first problem</a> of this week, we are working with a <code>datetime</code> object, instead of writing our own classes from scratch. We need to convert days to minutes; 365 days for example, results in 525600 minutes.</p>
<p>Many hints are given for this problem, but let&#39;s take a look. For starters, we want our code to be more modular this week as we learn to appreciate the importance of <a href="https://en.wikipedia.org/wiki/Modularity" target="_blank" rel="noopener noreferrer">modularity</a> in programming. The things that we need to do, is to get an input (in the <code>YYYY-MM-DD</code> format), convert the input to a date object, calculate the difference of days between that given date and today, convert days to minutes, and finally convert minutes to words. Well, it may seem like a lot, but thinking this way actually makes our job easier.<br>First, as always we can <em>try</em> to get an input, and if we have a <code>ValueError</code>, we can <em>exit</em> the program with a string like <code>Invalid date</code> which will result in an exit status of 1. If we type <code>help(sys.exit)</code> to get information from the documentation in this case, it literally tells you that:</p>
<pre><code>Help on built-in function exit in module sys:

exit(status=None, /)
    Exit the interpreter by raising SystemExit(status).

    If the status is omitted or None, it defaults to zero (i.e., success).
    If the status is an integer, it will be used as the system exit status.
    If it is another kind of object, it will be printed and the system
    exit status will be one (i.e., failure).
</code></pre>
<p>We have been doing this for many weeks, so, no problem.</p>
<p>If the given format is okay (something like <code>2021-06-02</code>, for example), we calculate how many days have passed from <em>today</em>. Before that, remember that input returns a string, and we need integers to construct a date object, so <em>year</em>, <em>month</em>, and <em>day</em> that are <em>split</em> from the input should be integers.<br>To calculate how many days have passed, <code>datetime.date</code> has some methods that can come in handy here. It is already in the hints section, so if we <em>subtract</em> the given date from <em>today</em>, we have a <code>timedelta</code> object returned, which has its own instance attributes like, say, <em>days</em>.<br>After we have the days, we need to convert it to minutes, and how to do it is also given in the problem explanation. Literally, it is this:</p>
<pre><code class="language-python">def days_to_minutes(days):
    return days * 24 * 60
</code></pre>
<p>After we have our minutes, finally we need to convert it to a nice looking output. The <code>inflect</code> library, which I have come to fall in love with, is tremendously helpful. What we need to do is literally to convert a <em>number to words</em>, but we only want commas and <em>no &quot;and words&quot;</em>.<br>So, instead of looking like this:</p>
<pre><code class="language-python">&#39;five hundred and twenty-five thousand, six hundred&#39;
</code></pre>
<p>Our output should look like this:</p>
<pre><code class="language-python">&#39;Five hundred twenty-five thousand, six hundred minutes&#39;
</code></pre>
<p>Notice that we also want our output to be <em>capitalized</em>. Again, a way too obvious hint, but remember that the documentation is your friend. </p>
<p>After these, we have not much to do except writing our tests for our code. <em>How to Test</em> is also given in the problem explanation, all the test specifications should be enough to implement. We are already familiar with testing, and have been used to it already for many weeks, so it should be quite easy as well. Now, let&#39;s check out the next one.</p>
<h2>Cookie Jar</h2>
<p>Here we are, the time has come to write our first class in this course. In <a href="https://cs50.harvard.edu/python/2022/psets/8/jar/" target="_blank" rel="noopener noreferrer">this problem</a>, we are storing cookies in a jar. Simple, and really fun as it sounds.</p>
<p>We are given a template already, and need to implement the functions <code>__init__</code>, <code>__str__</code>, <code>deposit</code>, <code>withdraw</code>, <code>capacity</code>, and <code>size</code>. First of all, remember that <code>__init__</code> function initializes our object construction. So, let&#39;s say you have just bought a cookie jar from the store, how many cookies are in it when you first bought it? It has a capacity (which in this case, we default to 12), but since there are no cookies in it, its <em>size</em> is 0 when you initially buy it. As you deposit cookies into it, its size increases, and as you withdraw cookies, its size decreases. Therefore, for the initialization, our cookie jar has the capacity of whatever is given as capacity, and the size of 0.</p>
<p>For <code>deposit</code> and <code>withdraw</code> functions, we need to be careful with some edge cases. For example, if the total number of cookies after you deposit is more than the capacity, we should <em>raise</em> a <code>ValueError</code>. Otherwise, we increase the size. And, if the number to withdraw is more than the <em>size</em>, we also <em>raise</em> <code>ValueError</code>. Otherwise, we decrease the size.</p>
<p>Now, here is the interesting part. While working with capacity and size, you realize that we not only read their values, but also <em>set</em> their values. As the template already indicates, we will use <code>@property</code> decorator for the <em>getter</em> functions. How do we do the <em>setters</em>, then? Before answering that question, let&#39;s take a look at an example. Let&#39;s say we have created a class for a Hogwarts homework essay, and we are mainly concerned with the number of words in it. We have a default word limit of 2000 (which, I guess, would be nothing for Hermione), but it can be changed. We can add or remove words, but the important thing is how we handle the word limit and the number of words we have written already. It sounds complicated, but let&#39;s take a look at this:</p>
<pre><code class="language-python">class HogwartsEssay:
    def __init__(self, word_limit=2000):
        self.word_limit = word_limit
        self.words_written = 0

    def __str__(self):
        return f&#39;Number of words written: {self.words_written}&#39;

    def add_words(self, number_of_words_to_add):
        ...

    def remove_words(self, number_of_words_to_remove):
        ...

    @property
    def word_limit(self):
        return self._word_limit

    @word_limit.setter
    def word_limit(self, word_limit):
        if word_limit &lt; 0:
            raise ValueError
        self._word_limit = word_limit

    @property
    def words_written(self):
        return self._words_written

    @words_written.setter
    def words_written(self, words_written):
        self._words_written = words_written
</code></pre>
<p>As you can see, <code>add_words</code> and <code>remove_words</code> functions are omitted so as not to be <em>way too close</em> to the solution. But, the idea is simple. We can <em>get</em> the word limit as well as the number of words written, we can also <em>set</em> the word limit as long as it is not less than 0, and set the number of words written. It might be a weird example, but the idea is similar to the example given in the lecture. If you have seen the lecture, then you are already familiar with using getters and setters. This is really a fun problem, even though at a glance might seem complicated a bit. That is really all we need to do. And, for the tests, <em>How to Test</em> section is again your friend, as it tells you what to do almost step-by-step. </p>
<p>And, before we go into the next one, how to print the cookies? Well, we print a cookie emoji for the number of cookies in the jar, and, <a href="https://en.wikipedia.org/wiki/Guido_van_Rossum" target="_blank" rel="noopener noreferrer">thank Guido</a> that Python is an amazing language — and has a <em>string operator</em> that helps us <em>repeat</em> our strings.</p>
<p>On to the next (and the last) problem!</p>
<h2>CS50 Shirtificate</h2>
<p>The very <a href="https://cs50.harvard.edu/python/2022/psets/8/shirtificate/" target="_blank" rel="noopener noreferrer">last problem</a> to solve, is kind of customizable. We are making our very own <a href="https://cs50.harvardshop.com/collections/print/products/i-took-cs50-unisex-t-shirt" target="_blank" rel="noopener noreferrer">I took CS50 shirts</a>, with the help of <code>fpdf2</code> library.</p>
<p>Here, the mantra we have for weeks is realized, has taken shape, and stares at us in flesh: &quot;When in doubt, read the documentation.&quot; The problem has only five specifications, and beyond them, you are free to use any methods, and create any kind of shirt that you want to.</p>
<p>To be honest, though, this freedom may be a bit intimidating. Although, the bare minimum solution for this problem takes 15-20 lines of code, finding the right methods and attributes to use can be a bit of a pain. Let&#39;s see how we can manage to create a shirt with only the required specifications.</p>
<p>As the hints section suggests, we can add a subclass that inherits <code>FPDF</code> class itself to write a header. In this case, our header will be the text &quot;CS50 Shirtificate&quot; that is centered horizontally.</p>
<p>The code in the tutorial for header function <em>literally</em> helps you with that, only we <em>do not need to render a logo</em>. Inside our function for header, we can just <em>set our font</em>, <em>move cursor to right</em>, <em>print title</em> with <em>aligning it to center</em> and without a border, and <em>perform a line break</em>. These are already given to you. After the line break, we can call the <code>image</code> method to insert our image (shirtificate.png). In order to do it properly, we can set its width to <strong>e</strong>ffective <strong>p</strong>age <strong>w</strong>idth (which is just the width of the page minus the horizontal margins) to make our job easier. Notice that <a href="https://pyfpdf.github.io/fpdf2/fpdf/fpdf.html#fpdf.fpdf.FPDF.image" target="_blank" rel="noopener noreferrer">the documentation</a> has this to say for the width option for images:</p>
<blockquote>
<p><strong><code>w</code></strong> : <code>float</code></p>
<p>optional width of the image. If not specified or equal to zero, it is automatically calculated from the image size. Pass <code>pdf.epw</code> to scale horizontally to the full page width.</p>
</blockquote>
<p>We also need to put our text <code>{name} took CS50</code>, where <code>name</code> is the return value of <code>input</code>, on our shirt. We need to color our text white here. For that, you might have already checked the <a href="https://pyfpdf.github.io/fpdf2/TextStyling.html" target="_blank" rel="noopener noreferrer">documentation for text styling</a>; however, it might be still a bit confusing. </p>
<p>Now, not to deviate from the subject but, if you are really stuck (which was my experience at some point), the link to the documentation above has also a <a href="https://github.com/PyFPDF/fpdf2/blob/master/test/text/test_text_mode.py" target="_blank" rel="noopener noreferrer">link to a file</a> called <code>test_text_mode.py</code> in the library&#39;s source code. Take a look at this:</p>
<pre><code class="language-python">def test_text_modes(tmp_path):
    pdf = FPDF(format=(350, 150))
    pdf.add_page()
    pdf.set_font(&quot;Helvetica&quot;, size=80)
    with pdf.local_context(fill_color=(255, 128, 0)):
        pdf.cell(txt=&quot;FILL default&quot;)
    with pdf.local_context(text_color=(0, 128, 255)):
        pdf.cell(txt=&quot; text mode&quot;)
    pdf.ln()

    ...
</code></pre>
<p>And here it is, easy-to-use <em>text color</em> for the local context! Remember that our color should be white, whose RGB value represents all the colors to the brim. <em>With local context</em>, we create a cell, this time for the text on the shirt. Its height, as the hints in the problem explanation suggest, can be <em>negative</em> to adjust it properly, say, something like 250ish.  For the width, our old friend <strong>e</strong>ffective <strong>p</strong>age <strong>w</strong>idth is helpful. We also <em>align</em> it to the center, of course.</p>
<p>Now that our class seems to be done, it is time to create an instance, <em>add page</em> with the appropriate <em>orientation</em> and <em>format</em>, and <em>output</em> the <code>shirtificate.pdf</code>. With that, that is the end of our problem and the problem sets! </p>
<p>It has been a really fun and delightful journey, but, now that the problem sets are actually over, it does not mean that we are done, yet. Next week, for the last installment in this series, we are going to think about things we have learned so far, what more to discover, and how to continue onward to the final project and beyond.</p>
<p>Until then, happy coding.</p>
]]></description>
            <link>https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-8</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-8</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Thu, 02 Jun 2022 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Solving the Problem Sets of CS50's Introduction to Programming with Python — One at a Time: Problem Set 7]]></title>
            <description><![CDATA[<p>We are at <a href="https://cs50.harvard.edu/python/2022/weeks/7/" target="_blank" rel="noopener noreferrer">week 7</a>, and this week&#39;s topic is everyone&#39;s absolute favorite. And, what is it? Regular expressions, of course!</p>
<p>Well, excuse the sarcastic introduction, but indeed, it is pretty sure that regex can slightly be a bit of a nightmare — especially, for beginners. However, have no doubts, it is a superpower in disguise.</p>
<p><img src="https://imgs.xkcd.com/comics/regular_expressions.png" alt="xkcd: Regular Expressions"></p>
<p>Before we start, I have to give the usual <strong>disclaimer</strong> that these posts are mostly about how to approach the problems instead of giving outright the solutions. I also assume you have read the problem explanations given in the course&#39;s website, so that the references I make are clear. And, you can find all the posts on previous problem sets <a href="https://rivea0.github.io/blog/" target="_blank" rel="noopener noreferrer">in the archive</a>.</p>
<p>Without further ado, let&#39;s dive into this week&#39;s problems!</p>
<h2>NUMB3RS</h2>
<p>The first <a href="https://cs50.harvard.edu/python/2022/psets/7/numb3rs/" target="_blank" rel="noopener noreferrer">problem</a> that we need to solve is really fun. We are checking valid IPv4 addresses, which has the format <code>#.#.#.#</code> and has all its numbers in the range between 0 and 255, inclusive. The pattern is literally it; we are looking for a <em>digit</em> that can occur <em>1 to 3 times</em>, then a <em>dot</em>, then another digit 1 to 3 times, then another dot, and then another digit, again 1 to 3 times, then a dot, and finally the last digit which can also occur 1 to 3 times. </p>
<p>One thing we should be careful is that this pattern should be the whole thing — there can be nothing before or after it. So, the input we are given should have this pattern only between the <em>start</em> and the <em>end</em> of it. Getting a digit character, and &quot;1 to 3 times&quot; part is easy if you have checked the documentation, or any other resource online. You are also familiar with the starting and ending restriction characters from the lecture as well. Since we also know how to put those digits into <em>each group</em>, we can check if each of them are within 0 to 255 range inclusive. This can be done with a simple for loop, but I want to show a Python function that can come in handy here.</p>
<p>Let&#39;s say we have a tuple that has Hogwarts houses in it.<br>We want to check if <em>all</em> of the items in it are Ravenclaw, because we do not want to be bothered with any other houses. We can try this:</p>
<pre><code class="language-python">def check_all(houses):
    return all([house == &#39;Ravenclaw&#39; for house in houses])
</code></pre>
<p>It has the same idea as this:</p>
<pre><code class="language-python">def check_all(houses):
    result = []

    for house in houses:
        result.append(house == &#39;Ravenclaw&#39;)

    if False in result:
        return False
    else:
        return True
</code></pre>
<p>Maybe, not literally what is going on with <code>all</code>, but the idea is similar to this one as well, only that we are returning False early here (let&#39;s not call it <code>check_all</code>, but <code>check</code> instead):</p>
<pre><code class="language-python">def check(houses):
    for house in houses:
        if house != &#39;Ravenclaw&#39;:
            return False
    return True
</code></pre>
<p>If <code>houses</code> look like <code>(&#39;Ravenclaw&#39;, &#39;Ravenclaw&#39;, &#39;Gryfindor&#39;, &#39;Ravenclaw&#39;)</code>, <code>check_all()</code> will return <code>False</code>!</p>
<p>Notice that we have a list comprehension inside the <code>all</code> function, and appending to it a conditional. Then we check if that list has any False in it, if so we return False, but otherwise we return True if all the conditionals in our list are True. </p>
<p>Similar idea can be applied with checking if each number in the match <em>groups</em> is within the range of 0 and 255 inclusive. </p>
<p>For the test file, considering only the cases we are given in the problem explanation and <code>check50</code> is sufficient. </p>
<p>This was quite fun. Let&#39;s take a look at the next one.</p>
<h2>Watch on Youtube</h2>
<p>With a graceful Rickroll, in <a href="https://cs50.harvard.edu/python/2022/psets/7/watch/" target="_blank" rel="noopener noreferrer">this problem</a>, we are extracting and parsing YouTube URLs for being able to easily embed them. The template for our program is, again, already given, we have to implement the <code>parse()</code> function for it to be called on <code>main()</code>. For a given string, namely <code>s</code>, how can we start thinking about parsing a YouTube URL?</p>
<p>For starters, we know that in this problem specifically, the link is going to be inside an <code>iframe</code> element. We know that it is going to be look like this in its simplest form:</p>
<pre><code class="language-html">&lt;iframe src=&quot;http://www.youtube.com/embed/xvFZjo5PgG0&quot;&gt;&lt;/iframe&gt;
</code></pre>
<p>We know that it has to <em>start</em> with <code>&lt;iframe</code>, followed by a <em>space character</em>, followed by <code>src=&quot;</code>. After that comes the link, as well as the closing quotation marks, closing angle bracket <code>&gt;</code>, and the closing tag <code>&lt;/iframe&gt;</code>.</p>
<p>There is also one more thing, we might have <code>www</code> inside the link — which is to say that there can be <em>zero or more</em> characters before<br>&quot;youtube&quot;. </p>
<p>If you have been following this series, you might notice that I have already given some subtle hints. Finding the corresponding regex characters is up to you to find — which is more fun, and which you can find in <a href="https://docs.python.org/3/library/re.html" target="_blank" rel="noopener noreferrer">Python&#39;s documentation</a>. Also, there are a lot of ways to implement a regex, so how you come up with a solution will be eventually up to you. </p>
<p>Before going on, you should notice that it is an <code>http</code> link, which we should definitely turn into <code>https</code> for <a href="https://www.eff.org/encrypt-the-web" target="_blank" rel="noopener noreferrer">encryption and security</a> reasons. If you have captured that part as a group, it is easy to do it with a conditional, or replacement, however you would like to do it.</p>
<p>Let&#39;s say we have managed to get the URL <code>http://www.youtube.com/embed/xvFZjo5PgG0</code>, and everything is fine. Or, is it?</p>
<p>That was simple for one <a href="https://www.w3schools.com/tags/tag_iframe.asp" target="_blank" rel="noopener noreferrer">attribute</a>, but what if you have more than one attributes like this:</p>
<pre><code class="language-html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/xvFZjo5PgG0&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
</code></pre>
<p>You see that <code>src</code> occurs after <code>width</code> and <code>height</code>, and is followed by a bunch of other attributes. Now, if you do not do it in a non-greedy way, you might have something like this result as the URL you get:</p>
<p><code>https://www.youtube.com/embed/xvFZjo5PgG0&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture</code></p>
<p>That is definitely not a URL, nor the thing we are looking for. Notice that I mentioned the term &quot;non-greedy&quot;, what does that even mean?</p>
<p>Let&#39;s say we have a string:</p>
<pre><code class="language-python">s = &#39;&quot;A string&quot;, and &quot;another string&quot;.&#39;
</code></pre>
<p>We only want to get <code>&quot;A string&quot;</code>, not <code>&quot;another string&quot;</code>. We are literally looking for a quotation mark, one or more characters in it, and then another quotation mark. For, simplicity sake, let&#39;s do it with this pattern:</p>
<pre><code class="language-python">import re


if matches := re.search(&#39;(&quot;.+&quot;)&#39;, s):
    print(matches.group(1))
</code></pre>
<p>(If you are not familiar with it, see <a href="https://docs.python.org/3/whatsnew/3.8.html#assignment-expressions" target="_blank" rel="noopener noreferrer">assignment expressions</a> for the &quot;walrus operator&quot;).</p>
<p>However, what we see in the terminal is not what we want: <code>&quot;A string&quot;, and &quot;another string&quot;</code>.</p>
<p>What happens is that, <code>.+</code> does a <em>greedy</em> search. However, we can prevent this from turning it into a <em>lazy</em> search with just appending the question mark to it:</p>
<pre><code class="language-python">import re


if matches := re.search(&#39;(&quot;.+?&quot;)&#39;, s):
    print(matches.group(1))
</code></pre>
<p>Now we see <code>&quot;A string&quot;</code>, just like we want. You might be interested in seeing how <a href="https://rivea0.github.io/blog/a-quick-behind-the-scenes-of-greedy-and-lazy-matching/" target="_blank" rel="noopener noreferrer">greedy and lazy matching that actually works</a>.</p>
<p>Using the lazy quantifier helps us get the URL in correct form. After that, we need to turn it into a shorter version. We do that by removing <code>www</code> <em>or</em> <code>embed/</code>, <em>or</em> <code>.com</code>. In other words, we replace — or, <em>substitute</em> — these pieces of text with <em>nothing</em>. We also need to <em>substitute</em> <code>youtube</code> with <code>youtu.be</code> for the resulting string. </p>
<p>How you go on to implement these little puzzle pieces is, again, up to you as there are lots of different ways for a solution. Perhaps, one of the important takeaways is knowing the difference between greedy and lazy matching, and how to work with them. Let&#39;s see what the next one has in store.</p>
<h2>Working 9 to 5</h2>
<p>I think <a href="https://cs50.harvard.edu/python/2022/psets/7/working/" target="_blank" rel="noopener noreferrer">this problem</a> has also many different ways for a solution that you might even have an analysis paralysis (at least, this was my experience). What we need to do here is to convert 12-hour input format to 24-hour format. Our input should be in a certain form, though. For example, it has to have the word &quot;to&quot; in it, something like <code>9 AM to 5 PM</code>. We may or may not be given minutes; our input can be <code>9 AM to 5 PM</code> or <code>9:00 PM to 5:00 PM</code>. Additionally, the input can imply a night shift, so that AM and PM given might be reverse, like <code>10 PM to 8 AM</code>. All of these seem like a lot, especially if you are absolutely new to regular expressions, but again, reading the documentation and poking around might give some insights. I am not extremely satisfied with the solution I came up with, and there is definitely a more elegant way to think about it. But, let&#39;s try to understand a potential approach.</p>
<p>First, we know that we can capture not only the numbers for the hours and minutes, but also AM and PM, since their order matters for our resulting string. For the first number (that is the hour), we know that the number of digits it has can be either 1 or 2 (it could be <code>9</code> or <code>10</code>, for instance). We want a <em>digit</em> that has <em>1 to 2</em> repetitions. After that, <em>optionally</em> we can have a <em>colon</em> followed by another <em>digit</em> that has <em>1 to 2</em> repetitions as well. This second part is for the minutes so that if we are given <code>10:00</code> we can capture the <code>:00</code> part. After that we are supposed to have a <em>space character</em> followed by either <em>AM or PM</em>. This is enough for describing <code>10:00 PM</code>. What we have after that, is another <em>space character</em>, followed by the string <em>&quot;to&quot;</em>, then another <em>space character</em> followed by the pattern that we have just described for <code>10:00 PM</code>. If we capture the hour, minute, and AM/PM as <em>groups</em>, you might remember that we might also have an input where the minutes are not given — in this case, our minute group will result in <code>None</code>. However, we can clean it and replace it with a simple <code>:00</code>, since if the minutes are not given it is assumed 0. If there is no match, we should also <em>raise</em> a <code>ValueError</code>. For determining the night shift (if PM comes before AM), we can check if the AM&#39;s index comes before PM in our cleaned groups list. In that case, we can have a flag variable where we can say that &quot;night shift&quot; is True or False. After that, we need to do the actual converting part. We can separate a conditional branch for &quot;not night shift&quot; (that is to say AM before PM), or night shift (PM before AM), and work our way with the appropriate hour and minute indices. The realization when converting is that, we do not consider minutes here, just the hours. And, for AM, if the hour is 12, we should convert it to 0 instead, otherwise, keep it like it is given. For the PM hour, if it is 12 it should stay 12, but for any other number we should <em>add</em> 12 to it. Because there seem to be a lot of &quot;if conditions&quot;, I like to mention a one-liner way to do it in Python. So, it might look something like this:</p>
<pre><code class="language-python">hours_am = 0 if int(am_hour) == 12 else int(am_hour)
hours_pm = 12 if int(pm_hour) == 12 else int(pm_hour) + 12
</code></pre>
<p>The same as this:</p>
<pre><code class="language-python">if int(am_hour) == 12:
    hours_am = 0
else:
    hours_am = int(am_hour)


if int(pm_hour) == 12:
    hours_pm = 12
else:
    hours_pm = int(pm_hour) + 12
</code></pre>
<p>Of course, if it starts to get complex and reduces readability, you should avoid over-using one-liners, but it makes sense here for a small implementation.</p>
<p>We also need to check if the hours and minutes are valid — if the hours are within 0 and 12 inclusive, and the minutes are within 0 and 59 inclusive range. If either of them is invalid, we also need to <em>raise</em> a <code>ValueError</code> here as well.</p>
<p>One more thing, we also need to create a <code>test_working.py</code> file to test our code. Handling all the cases in &quot;How to Test&quot; section of the problem explanation is quite sufficient here, if not, we know that <code>check50</code> is our friend to guide us on which tests to cover. For testing if our code indeed raises  <code>ValueError</code> in the right cases, we might remember how to do that from the <a href="https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-5/" target="_blank" rel="noopener noreferrer">Refueling problem</a> from Week 5.</p>
<p>This one was a bit challenging, and I left some gaps on some points intentionally, but that is really the point of it. The thinking process might differ, this one is just the thinking process of the solution I came up with and hopefully provided you some insight. Let&#39;s look at the next one. </p>
<h2>Regular, um, Expressions</h2>
<p>In <a href="https://cs50.harvard.edu/python/2022/psets/7/um/" target="_blank" rel="noopener noreferrer">this one</a>, we are checking if the input we are given has &quot;um&quot; in it, but not counting it inside words like &quot;yummy&quot;. The important idea is that we are looking for a word, therefore it has to have some <em>boundaries</em>. As the problem explanation suggests, it has to be the boundary between a <em>word</em> and a <em>non-word</em> character. Or, it can also be at the beginning or the end of the sentence. But also, we can have an input like <code>um?</code>, which is followed by a <em>non-word</em> character, so we can have that <em>optionally</em> as well. We also need to take care of both uppercase and lowercase characters, and <code>re.IGNORECASE</code> flag takes care of that. </p>
<p>The hints section already mentions <code>re.findall()</code> function, since it returns a list of all the matches it finds, we can return the <em>length</em> of that list from our <code>count()</code> function. For the tests, the edge cases to consider are already given in the problem explanation page, which will be sufficient as well. It looks daunting at first, but really, that is all there is to it. Let&#39;s look at the last problem of this week. </p>
<h2>Response Validation</h2>
<p><a href="https://cs50.harvard.edu/python/2022/psets/7/response/" target="_blank" rel="noopener noreferrer">This problem</a> emphasizes an important habit to have: relying on <em>well-trusted</em> libraries —no need to mention the importance of reading their documentation— when the time comes. And, that time might come when you need to validate an email address. In this problem, we can choose from two libraries, <a href="https://pypi.org/project/validator-collection/" target="_blank" rel="noopener noreferrer">validator-collection</a> or <a href="https://github.com/kvesteri/validators" target="_blank" rel="noopener noreferrer">validators</a>. We do not even have to use <code>re</code> module ourselves, because these libraries handle everything for us.</p>
<p>Since this problem&#39;s solution depends on which library you use, there is nothing much that I can give a hint about. Documentation really helps you out for each of the libraries, we also do not need to write our own tests for this one as well. It is, of course, a good habit to handle errors, and that is pretty much it. </p>
<p>Dealing with regular expressions might indeed be challenging if you have never used them before. Nevertheless, we have seen that it is a superpower that comes in handy with all kinds of problems. Next week, we are going to take a look at Object-Oriented Programming. Until then, happy coding.</p>
]]></description>
            <link>https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-7</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-7</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Wed, 25 May 2022 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Solving the Problem Sets of CS50's Introduction to Programming with Python — One at a Time: Problem Set 6]]></title>
            <description><![CDATA[<p>This week on <a href="https://cs50.harvard.edu/python/2022/weeks/6/" target="_blank" rel="noopener noreferrer">File I/O</a>, we have exciting new problems to solve. Working with files programmatically is inevitable, and as always, Python makes our life easier — with many useful libraries. As always, I assume you have read the problem explanations on <a href="https://cs50.harvard.edu/python/2022/psets/6/" target="_blank" rel="noopener noreferrer">this week&#39;s Problem Set</a>, and have to give the <strong>disclaimer</strong> that you are not going to find any full solutions to these problems here, but rather gain some insights into how to think about them.</p>
<p>You can find all the previous posts on past problem sets <a href="https://rivea0.github.io/blog/" target="_blank" rel="noopener noreferrer">here in the archive</a>. Now, let&#39;s dive into this week&#39;s problems!</p>
<h2>Lines of Code</h2>
<p><a href="https://cs50.harvard.edu/python/2022/psets/6/lines/" target="_blank" rel="noopener noreferrer">This one</a> was really fun to solve, even if it might get a little complicated when we start to think about some edge cases. What we want to do here is to count valid lines of code to have an understanding about the complexity of the program. We have worked with the  <code>sys</code> module, and <code>try...except</code> blocks before, and know that they come in handy in this problem. Handling too many and too few command-line arguments is straightforward, as we have done that before; and we can also catch something like a <code>FileNotFoundError</code> at this point. The hints for the problem already tells you to consider checking if a string <em>ends with</em> a certain substring — which is useful for checking if the filename we are given is indeed a Python file. The main thing to think about here is that considering the file is now valid, we need to count only the valid lines — that being, not blank lines or comments, but just the code itself. Let&#39;s say we want to do exactly that, ignore comments and blank lines, and count the lines of our code. So, let&#39;s say our code looks extremely silly like this:</p>
<pre><code class="language-python">def get_names():
    &quot;&quot;&quot;
    Prints each name in the golden trio.
    Example output:
      1: Harry
      2: Hermione
      3: Ron
    &quot;&quot;&quot;
    # The names of the golden trio
    the_golden_trio = [&#39;Harry&#39;, &#39;Hermione&#39;, &#39;Ron&#39;]
    
    for index, name in enumerate(the_golden_trio):
        print(f&#39;{index + 1}: {name}&#39;)
</code></pre>
<p>The total number of valid lines to count should be four. Remember, we are ignoring the docstring altogether, as well as the comment (<code># The names of the golden trio</code>), and the blank line just after <code>the_golden_trio</code>. A conditional is easy to implement in this case, we are counting lines as long as they do not <em>start with</em> a hashtag, and <em>slice</em> the lines between triple quotation marks. Or, we can calculate the number of lines of docstring and decrease it from the total value of valid lines at the end. However, we need to know the indices (or, indexes) for that job. To get the indices of lines in a file, I already have given the hint of <em>enumerating</em>, which might come in handy. </p>
<p>That is okay. However, it is easy to complicate things. Consider the example below:</p>
<pre><code class="language-python">def summon_item(item):
    result = f&#39;Accio {item}!&#39; # Do the Accio spell
    return result 
</code></pre>
<p>If we were to look for a line with a hashtag in it to ignore it, in this example, we would be ignoring the line where we create the <code>result</code> variable. This is not good. And, although inline comments are <a href="https://peps.python.org/pep-0008/#inline-comments" target="_blank" rel="noopener noreferrer">not very encouraged to use in Python</a>, they exist nonetheless. The one way to get around that, of course, is to look if the <em>left</em> side of the hashtag is <em>whitespace</em> or not — which might look something like this:</p>
<pre><code class="language-python">has_inline_comment = &#39;#&#39; in line and not line.split(&#39;#&#39;)[0].isspace()
</code></pre>
<p>In this case, <code>has_inline_comment</code> is a boolean variable that checks if the left side of the hashtag contains only whitespace characters. </p>
<p>Of course, this is just one way to do it for solving this specific little issue, there are surely better ways to do it. As always, there are many ways to solve a problem, and that is the beauty of programming and computer science in general. Again, at anytime in doubt, <a href="https://docs.python.org/3/index.html" target="_blank" rel="noopener noreferrer">the documentation</a> is your friend.</p>
<h2>Pizza Py</h2>
<p><a href="https://cs50.harvard.edu/python/2022/psets/6/pizza/" target="_blank" rel="noopener noreferrer">This problem</a> is easy to implement if you have already watched the lecture. This time we work with <code>csv</code> files, with a help from Python&#39;s own <code>csv</code> module. We have two files, <code>regular.csv</code> and <code>sicilian.csv</code> which we can download into our directory with <code>wget</code> command. We are still checking for the too few or too many command-line arguments, as well as checking if the file is in the right format and catching the <code>FileNotFoundError</code>. There is no reason to go over these since we have already done implemented them exactly in the previous problem. Throughout these posts, I constantly remind the importance of the reading the documentation correctly, and again, this problem is another example to remind us of it. The <code>tabulate</code> library&#39;s <a href="https://pypi.org/project/tabulate/" target="_blank" rel="noopener noreferrer">documentation</a> <em>literally</em> tells you how to solve this problem. Using a simple <em>reader</em> object for our <code>csv</code> files — whose <em>first rows</em> we can consider as <em>headers</em> — is more than enough to tabulate it. Remember that we are using the grid <em>table format</em>, and specifying the <em>headers</em>. Enough with the hints, the solution is already <em>literally</em> in the documentation itself. Let&#39;s look at the next problem.</p>
<h2>Scourgify</h2>
<p>In <a href="https://cs50.harvard.edu/python/2022/psets/6/scourgify/" target="_blank" rel="noopener noreferrer">this problem</a>, we are casting a spell! Well, you may already be thinking that writing in Python is like magic itself — I mean, it even reads like English. However, let&#39;s not lose ourselves in the appreciation of Python, but take a look at this problem.</p>
<p>We need to clean the data that we are given. In this case, we are again working with a <code>csv</code> file. We take an input file and need to create an output as a &quot;cleaned&quot; version of the input. We have two fields, <code>name</code> and <code>house</code>. The <code>name</code> field has the first and last name of the students all in one place inside a quotation mark, and we need to <em>split</em> them. We have been splitting strings for a while, so we know what to do here. We also have been checking for similar edge cases for the previous problems this week, only remember that this time, our command-line arguments has the length of three — as we include both the input and output filenames. Now, let&#39;s think about it. How to go about creating an output file that has the clean data?</p>
<p>The one thing we need to do is to <em>open</em> up an output file to <em>write</em> on it, create a <code>DictWriter</code> instance with the appropriate <code>fieldnames</code>, and <em>write the header</em>. These are, again, given in the &quot;hints&quot; section of the problem explanation, as well as <em>literally</em> in <a href="https://docs.python.org/3/library/csv.html#csv.DictWriter" target="_blank" rel="noopener noreferrer">the documentation</a>. I mean, the documentation actually provides you with enough knowledge on how to do it, no more no less. At this point, we need to open up the input file in <em>reader</em> mode, and read each <em>row</em> so that we can split the names appropriately. But, as we read each row, we also need to <em>write a row</em> to our output file — which is, again, shown to you in the example in the documentation link above. That is actually all that we need to do. Perhaps what might be tricky is when to open the files. You might already know that using <code>with open()</code> for files closes them automatically so that you do not have to be bothered with closing the files manually. So, at some point in this problem, you may have come across with this beautiful looking error:</p>
<pre><code class="language-shell">ValueError: I/O operation on closed file.
</code></pre>
<p>Well, now that you can guess exactly the reason of that, you may consider using the <code>with open()</code> block inside another. Or, again, you can come up with many ways to solve it, this is just one way to do it. Perhaps with much more practice, we can refine our taste of solutions gradually. But now, let&#39;s take a look at the final problem of this week.</p>
<h2>CS50 P-Shirt</h2>
<p>For <a href="https://cs50.harvard.edu/python/2022/psets/6/shirt/" target="_blank" rel="noopener noreferrer">the last problem</a> of the week, we are to solve a fun problem, where we need to make Muppets wear <a href="https://cs50.harvardshop.com/products/i-took-cs50-unisex-t-shirt" target="_blank" rel="noopener noreferrer">I took CS50</a> shirts. For those who are familiar with the CS50x itself, I am also a fan of <a href="https://cs50.harvardshop.com/collections/limited-run/products/i-finished-tideman-cs50-t-shirt" target="_blank" rel="noopener noreferrer">I finished Tideman shirts</a>, which speaks a lot about <a href="https://cs50.harvard.edu/x/2022/psets/3/tideman/" target="_blank" rel="noopener noreferrer">that famous problem</a>. Passing the tests of <code>check50</code> for it is a kind of spiritual experience which I recommend to anyone who is willing to go through it, but anyway, let&#39;s not digress, and look at our problem at hand.</p>
<p>We are using the <code>Pillow</code> library, perhaps the most handy library for working with images in Python. It is vast, hence its documentation; but we are given pretty much all that we need to do in the hints of the problem explanation itself. Even if this problem looks daunting, fear not, because we are going to have fun, and only barely scratching the surface of the <code>Pillow</code> library.</p>
<p>Since the hints are already quite extensive, let&#39;s take a look at mainly the trickiest part: pasting an image onto another.</p>
<p>Consider this night sky image:</p>
<p><img src="https://images.unsplash.com/photo-1520034475321-cbe63696469a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80" alt="Night sky. Credit: Jack Weirick (@weirick) on Unsplash"></p>
<p>Let&#39;s say we want to paste this <code>png</code> image representing Saturn onto our night sky:</p>
<p><img src="https://cdn.pixabay.com/photo/2012/04/10/17/38/saturn-26618_960_720.png" alt="Saturn png image. Credit: pixabay"></p>
<p>Our code might look like this:</p>
<pre><code class="language-python">from PIL import Image, ImageOps


def main():
    saturn = Image.open(&#39;saturn.png&#39;)
    night_sky = Image.open(&#39;night-sky.jpg&#39;)
    result = ImageOps.fit(night_sky, saturn.size)
    result.paste(saturn, saturn)
    result.save(&#39;result.jpg&#39;)


if __name__ == &#39;__main__&#39;:
    main()
</code></pre>
<p>In this case, our <code>result.jpg</code> will look like this:</p>
<p><img src="/blog/post-images/2022-05-17/result.jpg" alt="Result image with Saturn pasted on Night Sky"></p>
<p>Opening the images is straightforward. If you look in <a href="https://pillow.readthedocs.io/en/stable/reference/ImageOps.html#PIL.ImageOps.fit" target="_blank" rel="noopener noreferrer">the documentation</a> for <code>ImageOps.fit()</code>, it is quite explanatory as well:</p>
<blockquote>
<p>Returns a resized and cropped version of the image, cropped to the requested aspect ratio and size.</p>
</blockquote>
<p>And, the <code>paste()</code> <a href="https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.paste" target="_blank" rel="noopener noreferrer">function</a>, takes three arguments: <code>im</code> to paste, <code>box</code> for the region to paste into, and <code>mask</code> for mask image. Since we adjusted sizes to <em>fit</em>, we do not need to specify <code>box</code>. In <code>result.paste(saturn, saturn)</code>, the first <code>saturn</code> is the image to paste, and the second one is the mask image for updating only the specific pixels in this case. From the documentation: </p>
<blockquote>
<p>If a mask is given, this method updates only the regions indicated by the mask. (...) Where the mask is 255, the given image is copied as is. Where the mask is 0, the current value is preserved.</p>
</blockquote>
<p>Because our <code>png</code> image has <a href="https://en.wikipedia.org/wiki/Alpha_compositing" target="_blank" rel="noopener noreferrer">alpha channel</a> for transparency — value of 0 usually indicates full transparency —, the original image to be pasted on will be preserved for these transparent pixels. Actually, why don&#39;t we look at some of these pixel values of our own Saturn image:</p>
<pre><code class="language-python">print(list(saturn.getdata(band=3))[:100])
</code></pre>
<p><code>band=3</code> indicates the alpha channel, and we are getting the first 100 values. We are also converting it into a <code>list</code> to see it.</p>
<p>The output looks like this:</p>
<pre><code class="language-python">[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 2, 0, 0, 0, 0, 0, 0, 3, 22, 42, 62, 82, 111, 135, 147, 160, 173, 186, 199, 211, 224, 237, 244, 242, 241, 239, 237, 236, 234, 233, 231, 230, 221, 206, 192, 179, 165, 150, 136, 122, 108, 94, 81, 67, 51, 35, 19, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 3, 2, 2, 1, 0, 0, 0, 0]
</code></pre>
<p>We have a bunch of zeroes! In this case, we know that the pixels of our original <code>jpg</code> image will not be lost when these transparent pixels are pasted onto it because the &quot;mask&quot; argument exactly takes care of that issue.</p>
<p>Since we also need to implement the error-checking (which we have done a lot and know how to think about and do at this point), and the rest is again <em>literally</em> given in the hints sections in the problem explanation, there is not much left to it at all. Now that we have even seen a little behind-the-scenes of the usage of <code>Pillow</code> library for this problem, there is nothing to stop us from being encouraged to pass the tests for this problem. You can also take a look at <a href="https://realpython.com/image-processing-with-the-python-pillow-library/#superimposition-of-images-using-imagepaste" target="_blank" rel="noopener noreferrer">this Real Python article</a> to learn more about using <code>Pillow</code>.</p>
<p>Next week, we are diving into the world of Regular Expressions, which is, admittedly, can be a bit of a nuisance for beginners. But, have no worries, it is actually a superpower in disguise, and it is going to be fun to use them in the next week&#39;s problem set. </p>
<p>Until then, happy coding.</p>
]]></description>
            <link>https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-6</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-6</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Tue, 17 May 2022 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Solving the Problem Sets of CS50's Introduction to Programming with Python — One at a Time: Problem Set 5]]></title>
            <description><![CDATA[<p>It might be true that testing code sometimes seem like a waste of time to a novice programmer. It may seem that you have to put extra effort to write some tests for your code to see if it is working properly. Maybe you have already done some &quot;testing&quot; on your own, plugging different variables here and there. So, why should you even spend another slice of your time to write tests? Well, if you have such thoughts, get ready to appreciate the value of writing tests, because, on <a href="https://cs50.harvard.edu/python/2022/weeks/5/" target="_blank" rel="noopener noreferrer">this week on Unit Tests</a>, we have some exciting problems to solve. </p>
<p>As it is pointed out in the lecture, the earlier you get into the habit of testing your code, the better. Unit tests kind of tell a story about your program, and how it should work. Writing good tests not only makes your program more robust, but it is also an indication that you have precisely defined how your program should behave and what to expect. </p>
<p>This week, we are visiting some old problems we have solved throughout this course to write tests for them. Instead of using Python&#39;s <a href="https://docs.python.org/3/library/unittest.html" target="_blank" rel="noopener noreferrer">built-in unittest module</a>, we are going to use the beautiful <a href="https://docs.pytest.org/" target="_blank" rel="noopener noreferrer">pytest library</a> to implement our tests. Actually, you are already given hints weeks ago to solve all the problems of this week, so, in this post, there will be shorter paragraphs under each problem&#39;s header — except for the first one, which we shall see the crux of this week&#39;s problem set. </p>
<p>As always, I assume you have read the problem explanations, and I have to give the <strong>disclaimer</strong> that these posts are intended as a guide, or, (like today) just musings about the problem sets. Let&#39;s begin.</p>
<h2>Testing my twttr</h2>
<p>In <a href="https://cs50.harvard.edu/python/2022/psets/5/test_twttr/" target="_blank" rel="noopener noreferrer">this problem</a>, we are reimplementing <a href="https://cs50.harvard.edu/python/2022/psets/2/twttr/" target="_blank" rel="noopener noreferrer">Setting up my twttr</a> from Problem Set 2 to write some tests for it. Since <a href="https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-2/" target="_blank" rel="noopener noreferrer">we have already seen</a> how that problem could be solved, there is no need to go over it again. We need to create two files, called <code>twttr.py</code> and <code>test_twttr.py</code>, inside a new directory called <code>test_twttr</code>.<br>We only need to restructure our code if it is different from what is given in the problem explanation, separating <code>shorten</code> and <code>main</code> functions. </p>
<p>It is kind of like you are writing <code>check50</code> for your own code, and, <code>check50</code> checks your own <code>check50</code>!</p>
<p>Now, how can we go about thinking of what kinds of tests to implement? To be honest, the answer to that question is hidden inside the <em>original</em> problem descriptions, specifically, the explanations of <em>how to test</em> them. However, there might be an issue: the tests that you write must catch the same bugs that the staff version looks for. So, this week, <code>check50</code> is the kind of the hint itself: Its tests are actually the edge cases that you should be considering. It is the ultimate test to test your tests! Pretty sure, the CS50 staff wrote tests on their own to check <code>check50</code> as well... But, that is another thing to think about later. For this week, the main thing to consider is to implement the original tests from the original problems themselves. So, if that original problem&#39;s <code>check50</code> was testing certain inputs, you should create your tests similar to those tests that once tested your code for that problem.</p>
<p>I know, it was painful to read and perhaps hard to wrap your mind around, but hopefully the idea is clear. It took me longer to figure that out!</p>
<p>So, in the first problem, we know that the <code>shorten</code> function expects a <code>str</code>, so, we can test it by <em>asserting</em> that for a given string, our function outputs the vowel-stripped version of it. I cannot outright give a hint of what other tests should look like, but you are already given the answer three weeks ago. </p>
<p>The main thing to do here is to write simple <code>assert</code> statements inside our test functions. Say, we want to test if a <code>cast_spell</code> function works:</p>
<pre><code class="language-python"># 📁 spells.py

def cast_spell(incantation):
    return f&#39;{incantation.upper()}!&#39;
</code></pre>
<p>A test for it would be like:</p>
<pre><code class="language-python"># 📁 test_spells.py

from spells import cast_spell

def test_cast_spell():
    assert cast_spell(&#39;lumos&#39;) == &#39;LUMOS!&#39;
    assert cast_spell(&#39;expecto patronum&#39;) == &#39;EXPECTO PATRONUM!&#39;
</code></pre>
<p>Also, we do not need any kind of <code>try...except</code>, because <code>pytest</code> generously takes care of that. Let&#39;s now take a look at the next one.</p>
<h2>Back to the Bank</h2>
<p>Again, in <a href="https://cs50.harvard.edu/python/2022/psets/5/test_bank/" target="_blank" rel="noopener noreferrer">this problem</a>, we are reimplementing another past problem, namely <a href="https://cs50.harvard.edu/python/2022/psets/1/bank/" target="_blank" rel="noopener noreferrer">Home Federal Savings Bank</a>. It was an easy and fun problem to solve, as <a href="https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-1/" target="_blank" rel="noopener noreferrer">we have done it before</a>. </p>
<p>We know that the <code>value</code> function should return an <code>int</code>. And, for the tests? Well, the original problem explanation literally tells you that. Three kinds of tests (<em>literally</em> given to you before) — with two variations (for uppercase and lowercase) — should suffice. </p>
<h2>Re-requesting a Vanity Plate</h2>
<p>In <a href="https://cs50.harvard.edu/python/2022/psets/5/test_plates/" target="_blank" rel="noopener noreferrer">this problem</a>, we are visiting the good old <a href="https://cs50.harvard.edu/python/2022/psets/2/plates/" target="_blank" rel="noopener noreferrer">Vanity Plates</a> from Problem Set 2. We have already <a href="https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-2/" target="_blank" rel="noopener noreferrer">went through it before</a>. The main thing is to use the kinds of tests and inputs that the staff used to check our problem — which is also given in the <em>original</em> problem explanation. If they are not enough, well, remember there was also a test for the full alphabetical string — which should be valid as long as its length is within the limits.</p>
<h2>Refueling</h2>
<p>In <a href="https://cs50.harvard.edu/python/2022/psets/5/test_fuel/" target="_blank" rel="noopener noreferrer">the last problem</a> of this week, we go back to <a href="https://cs50.harvard.edu/python/2022/psets/3/fuel/" target="_blank" rel="noopener noreferrer">Fuel Gauge</a>, which <a href="https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-3/" target="_blank" rel="noopener noreferrer">we have seen before</a> on the week on Exceptions. Again, we need to implement the same kind of tests as the <code>check50</code> for the original problem, and the cases to consider are clear in the <em>original</em> problem explanation once more. The new thing here is handling the exceptions with <code>pytest</code>. As always, <a href="https://docs.pytest.org/en/latest/how-to/assert.html#assertions-about-expected-exceptions" target="_blank" rel="noopener noreferrer">the documentation</a> itself clearly shows you how to do that. For example, we can look at how to handle a <code>ValueError</code> in our <code>cast_spell</code> function:</p>
<pre><code class="language-python"># 📁 test_spells.py

import pytest

from spells import cast_spell

def test_valid_type():
    with pytest.raises(ValueError):
        cast_spell(62442)
</code></pre>
<p>Now, <code>pytest</code> will make sure that passing <code>62442</code> as the input to <code>cast_spell</code> function results in a <code>ValueError</code>. And, that is pretty much it for this problem as well.</p>
<p>I know, this week was a bit confusing. I cannot give many hints this week, but you have a better place to go for hints: <code>check50</code> itself for the original problems. The CS50 staff has already considered many edge cases, so, you do not even have to come up with your own examples. You are only implementing the same <code>check50</code> tests that once checked your own code! It is quite satisfying to think about.</p>
<p>Next week, we are going to dive into the world of File I/O, and perhaps of some exciting libraries as well. Until then, happy coding!</p>
]]></description>
            <link>https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-5</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-5</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Wed, 11 May 2022 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Solving the Problem Sets of CS50's Introduction to Programming with Python — One at a Time: Problem Set 4]]></title>
            <description><![CDATA[<p>It is time for another problem set, and this time, we are diving into a very delicious topic: libraries.</p>
<p>When I say delicious, I mean it because of our ability to have a plethora of quality choices when it comes to modules and third-party libraries in Python. Let alone third-parties, Python itself comes with a bunch of <a href="https://docs.python.org/3/library/index.html" target="_blank" rel="noopener noreferrer">built-in modules</a> that are pretty useful for the problems you are trying to solve. With the package manager as well, these days there is a library almost for anything, and I mean, <em>anything</em>.</p>
<p><img src="https://imgs.xkcd.com/comics/python.png" alt="xkcd: Python (import antigravity)"></p>
<p>Well, maybe you cannot actually import antigravity and fly —yet—, you can at least find a lot of helpful stuff with <a href="https://pypi.org/" target="_blank" rel="noopener noreferrer">the Python Package Index</a>. (And, by the way, <code>antigravity</code> module is an easter egg. So you can actually <a href="https://pypi.org/project/antigravity/" target="_blank" rel="noopener noreferrer">import it</a>).</p>
<p>Before we start, you can find the posts on previous problem sets <a href="https://rivea0.github.io/blog/" target="_blank" rel="noopener noreferrer">here in the archive</a>. And I have to give the usual <strong>disclaimer</strong>, I do not provide full solutions here, so if you are scrolling down trying to find the code block that will make you pass the tests, you are wasting your time, and that is a bit sad, my friend. It is a much stronger dopamine rush when it is <em>you</em> who investigate and find the solutions. I am here to talk about the problem sets and to be a guide along the way.</p>
<p>With all that talk, let&#39;s take a look at the problems we need to tackle this week.</p>
<h2>Emojize</h2>
<p>In each post, I assume you have read the problem explanations already. If you did, <a href="https://cs50.harvard.edu/python/2022/psets/4/emojize/" target="_blank" rel="noopener noreferrer">this one</a> is very easy, considering you already know how to import libraries and use them. And, explanation hints out the library you are going to use, namely <code>emoji</code>. It provides <a href="https://pypi.org/project/emoji/" target="_blank" rel="noopener noreferrer">some examples</a> on how to use it. So in this case, you do not need to hunt for a specific usage, but it is literally in front of you. The main thing not to forget here, is to provide <em>aliases</em> as well.</p>
<h2>Frank, Ian and Glen’s Letters</h2>
<p>As we will see throughout the other problems this week, clear documentation is a very important thing to have when it comes to using third-party libraries. Without the hints that the <a href="https://cs50.harvard.edu/python/2022/psets/4/figlet/" target="_blank" rel="noopener noreferrer">problem explanation</a> gives, you have to look for the usage of the library <code>pyfiglet</code> reading <a href="https://pypi.org/project/pyfiglet/0.7/" target="_blank" rel="noopener noreferrer">the project description</a>. (By the way, I think the reason why CS50 put the link to an older version of the package on PyPI is that the project description is provided there. If you click on the newer version, there is no description given, but you can find <a href="https://github.com/pwaller/pyfiglet/blob/master/README" target="_blank" rel="noopener noreferrer">here on GitHub</a>).</p>
<p>We need to render an input text into a cool ASCII art version. Again, the explanation page gives a lot of hints, but let&#39;s see.</p>
<p>Before everything else, we need to do something <em>only if</em> we have zero or two command line arguments. Since the name of the program is also an argument, we have 1 command line argument by default. Such that:</p>
<pre><code class="language-shell">$ python something.py # len(sys.argv) == 1
</code></pre>
<pre><code class="language-shell">$ python something.py --someflag # len(sys.argv) == 2
</code></pre>
<p>In case of 1 argument —which is just the name of the file—, we need to make a <em>random choice</em> to get a font from all the fonts provided. Getting all the fonts is simple as we are given the hint:</p>
<pre><code class="language-python">f = Figlet()
fonts = f.getFonts() 
</code></pre>
<p>Here, <code>fonts</code> is a list that we can make a <em>random choice</em> out of. As to making that <em>choice</em>, I think I have given enough of a hint already. If you did not get it, remember that <a href="https://docs.python.org/3/library/random.html" target="_blank" rel="noopener noreferrer">the documentation</a> is always there to look things up.</p>
<p>After we have a random font and an input text as well, we just need to instantiate a Figlet, set its font, and render text (which you can just <code>print</code> to see it in terminal):</p>
<pre><code class="language-python">f = Figlet()
f.setFont(font=random_font)
print(f.renderText(text))
</code></pre>
<p>This was for the random font if the user does not provide a font themselves. If they do, we need to do these exact steps with the given font instead of <code>random_font</code> here (which you can get with something like <code>sys.argv[2]</code>). But we do it <em>only if</em> the length of the arguments is 3 (remember the filename also counts), and <code>sys.argv[1]</code> is actually either <code>-f</code> or <code>--font</code>; also as long as <code>sys.argv[2]</code> is <em>in</em> the <code>fonts</code>. You can just do it with one line of conditional, using <code>and</code> and <code>or</code> operators. I cannot give any more hints without giving outright the answer. After all that is done (if the command-line arguments do not fit into these two conditional branches), we just exit the program with <code>sys.exit(&#39;Invalid argument&#39;)</code>. </p>
<p>That was actually fun. Now let&#39;s take a look at the next one.</p>
<h2>Adieu, Adieu</h2>
<p>I cannot believe I have not heard of <a href="https://pypi.org/project/inflect/" target="_blank" rel="noopener noreferrer">this library</a> before. You know, it is just things like these that make you fall in love with Python again, and again. Thank you CS50 for introducing me to it in <a href="https://cs50.harvard.edu/python/2022/psets/4/adieu/" target="_blank" rel="noopener noreferrer">this problem</a>. </p>
<p>These kinds of problems — like joining all names and adding <code>, and</code> for the last item — can be solved in many ways, including recursion. But here, with Python, it is just one line of code. Forget antigravity, this is another kind of superpower. </p>
<p>Borrowing from the ideas of last week&#39;s problem sets, we also need to keep getting input until the user hits control-d. This is an implication of using an infinite loop and handling <code>EOFError</code> exception. And, that is really it. Considering you have looked at the project description for <code>inflect</code>, everything you need is provided for you. Just remember to start the engine for the program like this:</p>
<pre><code class="language-python">import inflect

p = inflect.engine()
</code></pre>
<p>And, all you need to do is to <em>join</em> the names you have been collecting from the inputs. All the methods you can use from the <code>inflect</code> library are in front of you. As always, learn to love the documentation. </p>
<h2>Guessing Game</h2>
<p>The only thing we need to import for <a href="https://cs50.harvard.edu/python/2022/psets/4/game/" target="_blank" rel="noopener noreferrer">this problem</a> is Python&#39;s built-in <code>random</code> module. To be honest, I do not think the solution I came up with was an elegant one. Elegant or not, if we think about it, we need to continually get one input for the level, another one for the guess. When it comes to level, we should keep asking as long as it is not a positive integer; and when it comes to guess, we should keep asking as long as it is not the correct number. There are different ways to implement the solution, the certain thing is that we need to get a <em>random integer</em> between 1 and level — which can be solved easily with Python&#39;s <code>random</code> module. One way to do it is to use a loop and <code>try...except</code> block to ensure our input is of correct value. After we generate a random integer, we can use another loop to keep asking the user for a guess. If the guess matches that number generated, we simply print <code>Just right!</code> and return or break out of the loop. For the cases that guess is less than or more than the number, we provide the appropriate outputs <code>Too small!</code> or <code>Too large!</code>, and keep asking. One thing to keep in mind is that, we need to compare the guess and that randomly generated number as long as the guess is a positive number, or just more than 0. And, that is it.<br>By the way, guessing game has a deep relationship with <a href="https://en.wikipedia.org/wiki/Binary_search_algorithm" target="_blank" rel="noopener noreferrer">binary search algorithm</a>, with which you can guess the answer correctly in <a href="https://en.wikipedia.org/wiki/Time_complexity#Logarithmic_time" target="_blank" rel="noopener noreferrer">log(n) time</a>.</p>
<h2>Little Professor</h2>
<p>I believe, with <a href="https://cs50.harvard.edu/python/2022/psets/4/professor/" target="_blank" rel="noopener noreferrer">this one</a>, this is the time the curve becomes steeper, and the problem sets we will see from now on will become slightly heavier than what we have been seen so far. But, let&#39;s not get caught up in this, and take a look at this problem.<br>We have four specifications to consider. For the first one, we should get an input for level only if it is 1, 2, or 3. Say, we have a <code>valid_inputs</code> tuple, we can check if the input value is in that collection:</p>
<pre><code class="language-python">valid_inputs = (1, 2, 3)
level = int(input(&#39;Level: &#39;)) # Let&#39;s say it is 4
print(level in valid_inputs) # False
</code></pre>
<p>And what do we do with it? After getting the valid level, we need to generate an integer with <em>level</em> number of digits. Like this:</p>
<pre><code>-&gt; level = 1:
-&gt; 0 &lt;= integer &lt;= 9

-&gt; level = 2:
-&gt; 10 &lt;= integer &lt;= 99

-&gt; level = 3:
-&gt; 100 &lt;= integer &lt;= 999
</code></pre>
<p>If the level is 1, the number we need to generate should be between 0 and 9 inclusive, and if the level is 2, the number should be between 10 and 99, and finally if the level is 3, the number should be between 100 and 999. All inclusive of course. Now, it is enticing to use conditionals, but there is always another approach. Let&#39;s try something different.</p>
<p>We want these levels to correspond with these ranges. One data structure that comes to mind for this kind of usage is a dictionary. Something like this, perhaps:</p>
<pre><code class="language-python">range_levels = {
    1: (0, 9),
    2: (10, 99),
    3: (100, 999)
}
</code></pre>
<p>That is alright. When we print <code>range_levels[1]</code> it should output <code>(0, 9)</code>. But what if we want to pass these two values, 0 and 9, separately inside a function. A function that will help us get a <em>random integer</em>. Instead of giving you the answer, I am going to mention a cool thing you can do with Python — namely, <a href="https://geekflare.com/python-unpacking-operators/" target="_blank" rel="noopener noreferrer">unpacking operators</a>. The idea is basically that you can use <code>*</code> operator to unpack an iterable, and <code>**</code> to unpack a key-value pair. Like this:</p>
<pre><code class="language-python">values = [0, 5, 2]
print(*values) # 0 5 2

# Prints 0, 2, 4 respectively
for i in range(*values):
    print(i)


houses = {
    &#39;Gryffindor&#39;: &#39;courage&#39;,
    &#39;Ravenclaw&#39;: &#39;intelligence&#39;,
    &#39;Hufflepuff&#39;: &#39;loyalty&#39;,
    &#39;Slytherin&#39;: &#39;ambition&#39;
}

people = {
    &#39;Harry Potter&#39;: &#39;Gryffindor&#39;,
    &#39;Hermione Granger&#39;: &#39;Gryffindor&#39;,
    &#39;Luna Lovegood&#39;: &#39;Ravenclaw&#39;
}

print({**houses, **people}) # {&#39;Gryffindor&#39;: &#39;courage&#39;, &#39;Ravenclaw&#39;: &#39;intelligence&#39;, &#39;Hufflepuff&#39;: &#39;loyalty&#39;, &#39;Slytherin&#39;: &#39;ambition&#39;, &#39;Harry Potter&#39;: &#39;Gryffindor&#39;, &#39;Hermione Granger&#39;: &#39;Gryffindor&#39;, &#39;Luna Lovegood&#39;: &#39;Ravenclaw&#39;}
</code></pre>
<p>(As you can see, we cannot unpack a dictionary to a single variable, but rather we can use it to merge dictionaries!)</p>
<p>To be honest, you do not need to know about the unpacking feature for this problem. It is just a cool thing to use. And look at how we can use this feature inside the <code>range</code> function for our <code>for</code> loop. <code>range</code> expects three arguments as start, end, and step. In that case, as we see in the example, <code>for i in range(*values)</code> will be the same as <code>for i in range(0, 5, 2)</code>. Amazing!</p>
<p>In the problem, we also need to print <code>EEE</code> for wrong answers, and provide the user with 3 choices in total to get a right answer. But overall, we need to ask 10 questions. So, a double loop might be reasonable to use here. If the outer loop keeps track of 10 questions, the inner loop can keep track of 3 times of the same question asked. If the user gives the correct answer, we can break out of the inner loop. If the inner loop is completely done (which means asked the same question three times), we need to print the correct answer before moving on to another question. Accordingly, we also keep the score of the user. Simply increasing a score count variable when given the correct answer is sufficient. And, there is really nothing much to it if you correctly implement <code>get_level</code> and <code>generate_integer</code>, and are careful with the loops and when you break out of them. The unpacking examples I give here are simply fun to know, even if that is not necessary to use for this problem. Now, finally, on to the last one.</p>
<h2>Bitcoin Price Index</h2>
<p><a href="https://cs50.harvard.edu/python/2022/psets/4/bitcoin/" target="_blank" rel="noopener noreferrer">This one</a> seems daunting at first, but it is really easy. If the number of command-line arguments is not 2, we need to exit the program with <code>Missing command-line argument</code>. If we cannot convert the second argument into float, we exit with <code>Command-line argument is not a number</code>. After that, using the <code>requests</code> library, we get a response from <a href="https://api.coindesk.com/v1/bpi/currentprice.json" target="_blank" rel="noopener noreferrer">the URL</a> provided in the problem explanation. Since it is in JSON format, it will be reasonable to use just the right method for that. Here is the tricky part: how to convert the <em>rate</em> string, something like 37,769.6060 into float? Well, perhaps getting rid of the comma might help us. And, how to do that? If we think of removing a character as simply <em>replacing</em> it with <em>nothing</em>, we are on the right track. Afterwards, simply calculating the amount with number of bitcoins that are provided as a command-line argument and printing the formatted result is enough to finish this problem. And how to do that is <em>literally</em> given as a hint in the problem explanation.</p>
<p>Finally, this week on libraries has come to an end as well. We have seen somewhat heavier problems this time, and to be honest, I expect the problems in the upcoming weeks to become gradually harder. But it is actually something to be excited for. I hope you have learned lots of new things this week, and —if you are like me— have fallen in love with Python once again. </p>
<p>See you next week for the problem set of Unit Tests. Happy coding!</p>
]]></description>
            <link>https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-4</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-4</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Tue, 03 May 2022 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Solving the Problem Sets of CS50's Introduction to Programming with Python — One at a Time: Problem Set 3]]></title>
            <description><![CDATA[<p>On this week&#39;s problem set on <a href="https://cs50.harvard.edu/python/2022/psets/3/" target="_blank" rel="noopener noreferrer">Exceptions</a>, we are given four problems this time, instead of five. The problem explanations are quite comprehensive; which I assume you read beforehand. Reminding the <strong>disclaimer</strong> that these blog posts are only for a walkthrough of the problems, let&#39;s tackle them one by one.</p>
<p>You can also read the previous posts on <a href="https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-0/" target="_blank" rel="noopener noreferrer">Problem Set 0</a>, <a href="https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-1/" target="_blank" rel="noopener noreferrer">Problem Set 1</a>, and <a href="https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-2/" target="_blank" rel="noopener noreferrer">Problem Set 2</a>. </p>
<h2>Fuel Gauge</h2>
<p><a href="https://cs50.harvard.edu/python/2022/psets/3/fuel/" target="_blank" rel="noopener noreferrer">This</a> is a problem where we need to take a user input which we assume to be formatted as <code>X/Y</code>, and display how much fuel left in the tank as a percentage. We are mostly dealing with integer division and exception handling here. Considering we have been getting input from the user for the past problems already, we know how to handle the input accordingly, say, for <em>splitting</em> a string with the format <code>X/Y</code>. Remember that when we split a sentence into words, the default split character is the space character. So if we want to split a string like <code>1+2</code> into two numbers, using <code>&#39;1+2&#39;.split(&#39;+&#39;)</code> will give a list containing <code>1</code>, and <code>2</code>.</p>
<p>Before we do any error checking though, we need to get the result as a percentage. And, before getting the result, it might be a better idea to check if the value of <code>x</code> is not larger than <code>y</code>; then calculating the result accordingly. You must be mostly familiar with converting decimals to percentages from elementary school math. In this case, just multiplying the result of the given fraction with 100 is enough. Then, as the problem explanation says, if the overall result is more than 99, we print <code>F</code> to indicate the fuel tank is full; if it is less than 1, we print <code>E</code> to indicate it is empty. Otherwise, we print the percentage, which is done easier with an f-string. We also need to print it with <em>zero</em> decimal places — remember putting something like <code>:.1f</code> after a float type formats it to have 1 place after the decimal, but in this case, we want <em>zero</em> decimal places.</p>
<p>The main thing to consider is handling the exceptions, of course, wrapping the code in a <code>try...except</code> block. As we also need to keep asking the user if there is a <code>ValueError</code>, or a <code>ZeroDivisionError</code>, what we need to do is similar to the example given in <a href="https://cs50.harvard.edu/python/2022/weeks/3/" target="_blank" rel="noopener noreferrer">this week&#39;s lecture</a> — wrapping the exception handling inside an infinite loop which we can break out of with returning the formatted percentage result. And, that is really all there is to it, let&#39;s look at the next one.</p>
<h2>Felipe&#39;s Taqueria</h2>
<p><a href="https://cs50.harvard.edu/python/2022/psets/3/taqueria/" target="_blank" rel="noopener noreferrer">Here</a>, we are already given the menu entrées as a dictionary, the only thing for us to do is to get the user input for an item in the menu, and <em>accumulate</em> the total result of each item that they put in. Of course, we also need to print the total result. Similar to the examples in this week&#39;s lecture and the Fuel Gauge problem, we can use an infinite loop to continue getting input from the user. We also need to convert the input into <em>titlecase</em> for it to match the keys in our given dictionary as well. In case of an invalid item which will result in a <code>KeyError</code>, say <code>Burger</code>, we can ignore it (simply, <em>pass</em>) and continue asking the user for an item. If the user hits control-d (a common way to stop the inputs) which will result in an <code>EOFError</code> (end-of-file condition), it is time to stop the program, we can do that by returning from the function after printing a newline.<br>Well, that was easy. On to the next problem.</p>
<h2>Grocery List</h2>
<p><a href="https://cs50.harvard.edu/python/2022/psets/3/grocery/" target="_blank" rel="noopener noreferrer">This problem</a> is also similar to the ones we did before, and it is very easy to implement if you like using dictionaries. Just like the previous two problems, we need to keep getting input — which we did before by putting the <code>try...except</code> block inside an infinite loop, and returning (if we use it inside a function) at the right time to break out of it. We can use a dictionary to add the items and increment each of the item&#39;s value if it is already in the dictionary. Actually, let&#39;s see something similar in action. Let&#39;s say we want to get the names of spells that Harry Potter has cast in a day, as well as how many times they are used. Perhaps the most intuitive way to do it is similar to this one:</p>
<pre><code class="language-python">spells = {}
while True:
    try:
        spell = input()
        if spell in spells:
            spells[spell] += 1
        else:
            spells[spell] = 0
    except EOFError:
        break
</code></pre>
<p>So, if our input is something like this one:</p>
<pre><code>Accio
Accio
Lumos
Expelliarmus
Expelliarmus
Expelliarmus
</code></pre>
<p>Printing each value and key in our <code>spells</code> dictionary will give this output:</p>
<pre><code>2 Accio
1 Lumos
3 Expelliarmus
</code></pre>
<p>However, we can do a one-liner instead of the one we used with an <code>if...else</code> condition. We can use this version instead:</p>
<pre><code class="language-python">spells = {}
while True:
    try:
        spell = input()
        spells[spell] = spells.get(spell, 0) + 1
    except EOFError:
        break
</code></pre>
<p>What the <code>get</code> function does here is literally getting the <code>spell</code> from the <code>spells</code> dictionary, and providing a default value of <code>0</code> if it is not in the dictionary. We add <code>1</code> to the whatever value that is returned by the <code>get</code> function to increment it. This will give the same output as above if we print each value and key of our dictionary.<br>Of course, as in the problem demo, printing the value and keys is only done after the user hits control-d — in other words, after our program has an <code>EOFError</code>. Checking the documentation as we always do before, there are many useful methods to iterate through the <em>items</em> of a dictionary. And, if we want our output to be <em>sorted</em>, well, we can <em>literally</em> check the documentation. Since I cannot give any more hints without giving out the solution itself, it is time to move on to the next problem.</p>
<h2>Outdated</h2>
<p>In <a href="https://cs50.harvard.edu/python/2022/psets/3/outdated/" target="_blank" rel="noopener noreferrer">the last problem</a> of this week, we need to get a user input for a date in the month-day-year format, and output it in the year-month-day format. The input we are given can look like <code>9/8/1636</code>, or <code>September 8, 1636</code> (yes, an Easter egg: the year Harvard University was <a href="https://www.harvard.edu/about/history/" target="_blank" rel="noopener noreferrer">founded</a>). Here, we need to do a bit of splitting and some string formatting. We can use the same idea of an infinite loop like before to keep getting the user input, only returning the result when it is appropriate. Since we have two kinds of inputs to handle — the one with forward slashes (<code>/</code>), and the other with a comma and a space (<code>, </code>) —, we can use two branches for a conditional. Hints in the problem description are quite helpful on splitting a string, which you must be pretty familiar with already. We are also given a list of months in the problem explanation page, and in order to get the value of an inputted month, we can add 1 to the index of that month in that list. Lastly, we can print the formatted result and break — or, if using a function return with the string of our result. But, we need to format the day and month to be two digits, and depending on how you implement it, you can format an int to have two leading zeroes with <code>f&#39;{n:02}&#39;</code>, or a string with a very handy <code>zfill</code> function. Taken from the documentation, what it does is this:</p>
<pre><code class="language-python">&gt;&gt;&gt; &quot;42&quot;.zfill(5)
&#39;00042&#39;
</code></pre>
<p>It is self-explanatory indeed. The main thing we always need to do is error-checking, in this case the problem description does not provide a specific exception to handle and that is mostly because you can implement the solution in many different ways. But, one thing we need to make sure of is that the month and day should be within bounds, say if a user gives an input <code>23</code> in place of the month, we should prompt them again. We can make sure of this by simply returning the result string only when this conditional is met. After that, the exceptions that you need to deal with actually depends on how your code looks like, but, it mostly makes sense that we might have a <code>ValueError</code>, perhaps an <code>IndexError</code> for dealing with the months list. Since it is you as the programmer who will decide what exception to handle, checking the documentation is the first thing to do. And here, checking out the <a href="https://docs.python.org/3/library/exceptions.html" target="_blank" rel="noopener noreferrer">built-in exceptions</a> is the way to go.</p>
<p>We are at the end of the third week, and next week we are going to finish half the course already! I cannot wait to see what problems we are going to solve for the next week on Libraries, and hope you too as well. Until then, happy coding!</p>
]]></description>
            <link>https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-3</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-3</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Tue, 26 Apr 2022 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Solving the Problem Sets of CS50's Introduction to Programming with Python — One at a Time: Problem Set 2]]></title>
            <description><![CDATA[<p>Another week, another problem set. This time, we are focusing on loops.<br>You can read the previous posts on <a href="https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-0/" target="_blank" rel="noopener noreferrer">Problem Set 0</a> and <a href="https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-1/" target="_blank" rel="noopener noreferrer">Problem Set 1</a>. To remind you of the <strong>disclaimer</strong>, these are only walkthroughs to think about the problem itself instead of providing the solution right away. With that said, let&#39;s begin!</p>
<h2>Camel Case</h2>
<p>In <a href="https://cs50.harvard.edu/python/2022/psets/2/camel/" target="_blank" rel="noopener noreferrer">this problem</a>, we need to turn a string given in camel case <code>likeThis</code> into a snake case <code>like_this</code> which is recommended in Python for variable names.</p>
<p>Well, since this week is on loops, we can loop through each character one by one. You can think of concatenating each character to a result string, which you can initialize as empty at first. When it comes to an uppercase character —you can get help from the documentation to check if a character <em>is upper</em>—, instead of merely concatenating the character to our result string, you can add an underscore and that character in lowercase.</p>
<p>One thing that Python makes it easier to write one-liners, is <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" target="_blank" rel="noopener noreferrer">list comprehensions</a>. Let&#39;s say we want to work with snake case, and turn it into a nice and readable title string. An easy way to do it would be something like this:</p>
<pre><code class="language-python">snake_case_str = &#39;a_very_important_heading&#39;

result = snake_case_str.replace(&#39;_&#39;, &#39; &#39;).title()

print(result) # A Very Important Heading
</code></pre>
<p>Replacing the underscores with spaces, can also be done in a different way:</p>
<pre><code class="language-python">snake_case_str = &#39;a_very_important_heading&#39;

result = &#39;&#39;.join([&#39; &#39; if char == &#39;_&#39; else char for char in snake_case_str]).title()

print(result) # A Very Important Heading
</code></pre>
<p>It is true that it looks uglier, but we can see how list comprehensions work. It is literally the same as this:</p>
<pre><code class="language-python">snake_case_str = &#39;a_very_important_heading&#39;
result = []

for char in snake_case_str:
    if char == &#39;_&#39;:
        result.append(&#39; &#39;)
    else:
        result.append(char)

result = &#39;&#39;.join(result).title()

print(result) # A Very Important Heading
</code></pre>
<p>The code explains itself, in the list comprehension, we simply loop over the given string, if the character is an underscore we append a space character to our <code>result</code> list, else we append the character itself.  In the end, we use <code>join</code> with an empty string to turn the list into a readable string and use <code>title</code> to make it in title case.</p>
<p>You can use a similar approach if you want to solve this one with a list comprehension. And that is all there is to it. </p>
<h2>Coke Machine</h2>
<p><a href="https://cs50.harvard.edu/python/2022/psets/2/coke/" target="_blank" rel="noopener noreferrer">This one</a> is reminiscent of the <a href="https://cs50.harvard.edu/x/2022/psets/1/cash/" target="_blank" rel="noopener noreferrer">Cash</a> problem in CS50&#39;s own Introduction to Computer Science, only perhaps a simplified version of it. What to do is simple: we, as a machine, will only accept 25 or 10 or 5 cents for a bottle of Coke we sell for 50 cents.</p>
<p>A <code>while</code> loop might sound more reasonable to use on this one, we can simply check if our amount —which is 50— is still more than 0, in this case we can keep asking the user for input and decreasing from the amount accordingly. One important thing to remember is to check for error handling; now that we are working with integers, it is better to remember that <code>input</code> returns a string, and we need to do type casting. Also, we need to check that the user should only insert either 25, or 10, or 5 cents. If that is the case, we can then decrease the given value from our amount. If they give in total 50 cents, our job is done, and we do not owe them any change. But what if the user gives more than 50 cents? In this case, you can see that if we keep decreasing the amount, we will reach a negative number. Well, since the value itself would still be the same, the <em>absolute value</em> of it would enough to solve the problem.<br>For example, if the user enters <code>25</code>, then <code>10</code>, then <code>25</code> again — we know that our change due would be <code>-10</code> if we keep decreasing the value. We need to output <code>Change owed: 10</code>, in this case, we can simply get the absolute value and be done with our work. And how to get the absolute value? Once again, when in doubt, <em>check the documentation</em>.</p>
<h2>Just setting up my twttr</h2>
<p>The title of <a href="https://cs50.harvard.edu/python/2022/psets/2/twttr/" target="_blank" rel="noopener noreferrer">this problem</a> comes from a <a href="https://twitter.com/jack/status/20?s=20&t=EdMJ7PnkB6OXvd_M74qVdQ" target="_blank" rel="noopener noreferrer">tweet</a> from Jack Dorsey back in 2006. What we need to do is get an input string and drop any characters that are vowels. Instead of checking for each vowel though, using a vowels list, and checking if the character is in that list might result in a more elegant solution. Also, list comprehensions would be nice to use as well. Actually, let&#39;s see this elegance.</p>
<p>Let&#39;s say that we do not like spaces and commas. I know it is nonsense, but, for the sake of this example, bear with it for a minute. So, we do not want to see any spaces or any commas in our string, but we are okay with everything else. And, who cares if our string looks squeezed anyway? Let&#39;s see what we can do:</p>
<pre><code class="language-python">hated_ones = [&#39; &#39;, &#39;,&#39;]

input_str = &#39;Eye of rabbit, harp string hum, turn this water into rum&#39;

cleaned = [&#39;&#39; if char in hated_ones else char for char in input_str]

result = &#39;&#39;.join(cleaned)

print(result) # Eyeofrabbitharpstringhumturnthiswaterintorum
</code></pre>
<p>Yes, I know. Sorry, had to give that <a href="https://harrypotter.fandom.com/wiki/Eye_of_rabbit,_harp_string_hum,_turn_this_water_into_rum" target="_blank" rel="noopener noreferrer">reference</a>.</p>
<p>Now that we have seen how to solve a similar looking problem, this one is quite easy as well. Next one.</p>
<h2>Vanity Plates</h2>
<p><a href="https://cs50.harvard.edu/python/2022/psets/2/plates/" target="_blank" rel="noopener noreferrer">This problem</a> requires us to check some conditionals if the given string is valid to be a vanity plate.<br>This one is slightly hard to explain without giving any spoilers. One thing I can tell you is that list comprehensions are a huge saver and makes it easier to solve the problem in a more clear way. Say, you want to see how many digits a string has. Easy:</p>
<pre><code class="language-python">s = &#39;CS50&#39;
number_of_digits = len([char for char in s if char.isdigit()])

print(number_of_digits) # 2
</code></pre>
<p>Of course, as David Malan would say, I only know the existence of <code>isdigit</code> because I <em>checked the documentation before</em>. </p>
<p>Another gem from the documentation for this problem specifically, is the checking for all the punctuation characters. While we still have not talked about libraries yet —it is coming in week 4—, if you want to go ahead, know that Python has a <a href="https://docs.python.org/3/library/string.html" target="_blank" rel="noopener noreferrer">built-in module specifically for strings</a> which makes life a whole lot easier. </p>
<p>Now, we have four specific conditions to check. The length of the input string must be within the bounds of 2 and 6 — both included. That is easy as we have done that before with a one-liner in <a href="https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-1/" target="_blank" rel="noopener noreferrer">&quot;Meal Time&quot; problem</a> last week. Another condition is to check if the first two characters are <em>alphabetical</em>. It speaks of itself, if you have checked the documentation. Another thing to check is to see if the string is clear of spaces and punctuations. I believe, list comprehensions work pretty well here too. We have actually almost done the same thing in the last problem &quot;Just setting up my twttr&quot;. And lastly, we need to check if the string ends with digits if it contains any — so that we know that the digits are not in the middle or the beginning. </p>
<p>Without giving away too much, one way to think about this would be something like this: We can get the length of the digits in our string, and check if the rest of the string from that index on is only digits. We have done that before, but it might be better understood with an example:</p>
<pre><code class="language-python">s = &#39;CS50&#39;
number_of_digits = len([char for char in s if char.isdigit()])

print(s[-number_of_digits:]) # 50
</code></pre>
<p>Using negative indexing, we can traverse the string backwards from that index which would be the length of the digit characters in this case.</p>
<p>Checking these four cases is all we need to do. I know I have talked about list comprehensions a lot, but they go very well with loops. If that is still not clear, you can always use the normal expanded version as well, as in the Camel Case example. And, to be honest, more complicated loops makes list comprehensions much more complex. Being reasonable is way to go.</p>
<h2>Nutrition Facts</h2>
<p>And, here is the perhaps easiest(?) <a href="https://cs50.harvard.edu/python/2022/psets/2/nutrition/" target="_blank" rel="noopener noreferrer">problem</a> this week, in terms of implementing logic.<br>A dictionary is the most obvious choice to use in this case. All we need to do is to create a dictionary — fruit names as keys, and their calories as values using <a href="https://cs50.harvard.edu/python/2022/psets/2/nutrition/Nutrition-Information-for-Raw-Fruits---small-PDF-Poster.pdf" target="_blank" rel="noopener noreferrer">this poster</a>, and return calories for a given fruit. The lecture video already shows how to do that, so that is it. Also, if we want to return literally nothing instead of <code>None</code>, we can return an empty string. And, this is the end of this problem as well as the end of the Problem Set 2.</p>
<p>Next week&#39;s problem set is going to be on Exceptions, and it is really exciting to wait for what kinds of problems we will be solving.<br>See you next week, and happy coding.</p>
]]></description>
            <link>https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-2</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-2</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Tue, 19 Apr 2022 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Solving the Problem Sets of CS50's Introduction to Programming with Python — One at a Time: Problem Set 1]]></title>
            <description><![CDATA[<p>This week on Conditionals, we are presented with another five problems to solve for <a href="https://cs50.harvard.edu/python/2022/psets/1/" target="_blank" rel="noopener noreferrer">Problem Set 1</a>. Let&#39;s dive in, but before I start, I should remind you of the <strong>disclaimer</strong>: I do not provide full solutions here, it is more exciting when <em>you</em> yourself come up with the answers (see <a href="https://cs50.harvard.edu/python/2022/honesty/" target="_blank" rel="noopener noreferrer">academic honesty</a>). My plan in this series is only to provide a guide to think about the problems. I also assume you read the problem set explanations, so that the references I make and the things I try to convey is more clear.</p>
<h2>Deep Thought</h2>
<p>In <a href="https://cs50.harvard.edu/python/2022/psets/1/deep/" target="_blank" rel="noopener noreferrer">this problem</a>, we only need to check if the user of our program knows the answer to the Great Question of Life, the Universe, and Everything. Simple as that.</p>
<p>One thing that the last problem set made clear was that <em>checking the documentation</em> —even if it is sometimes hard to find what you are looking for!— is vital to solve the problems. It is still something to keep in mind in this problem set as well.</p>
<p>Now that it is well known that the answer to that great question is <a href="https://en.wikipedia.org/wiki/Phrases_from_The_Hitchhiker%27s_Guide_to_the_Galaxy#Answer_to_the_Ultimate_Question_of_Life,_the_Universe,_and_Everything_(42)" target="_blank" rel="noopener noreferrer">42</a>, we need to make sure the user gives the correct answer — whether they write it literally as <code>42</code> or <code>forty-two</code>, (or <code>Forty two</code>, etc.).</p>
<p>The main thing to do here is to check for two kinds of way to write it: as <code>42</code>, or a string with letters. It is clear that we will use the <code>input</code> function to get input from the user. Another thing, if you remember from the last problem set, is that the <code>input</code> returns a string even if the user enters a number. </p>
<p>A good habit to have is cleaning user inputs, as they are supposed to be messy, or we should assume them to be so. For example, to make sure that the input is not in <a href="https://en.wikipedia.org/wiki/Alternating_caps" target="_blank" rel="noopener noreferrer">sarcasm case</a> or <a href="https://en.wikipedia.org/wiki/All_caps#Association_with_shouting" target="_blank" rel="noopener noreferrer">yelling case</a>, it is always a good idea to force the string to be in lowercase. That is done easily with <code>lower</code> method. Also, we can <em>strip</em> the input string to make sure there are no unnecessary spaces around. </p>
<p>Let&#39;s say we want our answer with formatting like this: <code>the answer</code>, but the user typed in this: <code>ThE-ansWer </code>. First step to clear it up would be to make it all lowercase and get rid of the space at the end:</p>
<pre><code class="language-python">user_input = user_input.lower().strip() 
print(user_input) # the-answer
</code></pre>
<p>And, it is <code>the-answer</code> now. If we want to get rid of the hyphen (<code>-</code>) as well, we can <em>split</em> the string with that hyphen, and <em>join</em> the resulting list into a string again. Let&#39;s continue step by step:</p>
<pre><code class="language-python">user_input = user_input.split(&#39;-&#39;)
print(user_input) # [&#39;the&#39;, &#39;answer&#39;]
user_input = &#39; &#39;.join(user_input) 
print(user_input) # the answer
</code></pre>
<p>It all depends on what you want to do, and how you would like to see the answer. Because we can accept multiple types of formatting in this problem as the answer, it makes sense to use all these methods on the user input. And the last thing to do afterwards is to check if the answer is correct; <em>if</em> so, returning <code>Yes</code>; <em>else</em>, returning <code>No</code>.</p>
<h2>Home Federal Savings Bank</h2>
<p>In this <a href="https://cs50.harvard.edu/python/2022/psets/1/bank/" target="_blank" rel="noopener noreferrer">problem</a>, we check the greeting. If it has any sign of <code>hello</code> <em>in</em> it, we do not give any money, therefore output <code>$0</code>. If the greeting <em>starts with</em> an <code>h</code> though, we can output <code>$20</code>. And these are our only constraints. To everything else we are quite generous, and output <code>$100</code>.</p>
<p>Actually, Python comes with built-in methods <em>exactly</em> and suitably <em>named</em> to implement our conditions. Again, it is the documentation we should consult. </p>
<p>One thing that might be obvious or not be obvious to beginners, is that strings are also a sequence, much like lists or tuples. What that means is that they are linear and consist of ordered items. You already might have realized it when you use indexing on a <code>str</code> type to access a character, like you use indexing to get an item from a list. The implication is that, sometimes lists —or, any other sequence— behaves similarly to <code>str</code> type, and some operations are applicable to both of them. <code>in</code> for example, is one operator you can use with lists. Enough for a clue, I guess. As to checking if a string <em>starts with</em> some character, that is also self-explanatory. You might also be interested in a <a href="https://rivea0.github.io/blog/custom-endswith-and-startswith-functions/" target="_blank" rel="noopener noreferrer">custom implementation of it</a>.</p>
<h2>File Extensions</h2>
<p>This <a href="https://cs50.harvard.edu/python/2022/psets/1/extensions/" target="_blank" rel="noopener noreferrer">one</a> is probably my favorite so far. It incorporates formatting the <a href="https://en.wikipedia.org/wiki/Media_type" target="_blank" rel="noopener noreferrer">MIME types</a> (or, media types) that are in an <a href="https://en.wikipedia.org/wiki/List_of_HTTP_header_fields" target="_blank" rel="noopener noreferrer">HTTP header</a>, which determines how they are displayed on the web. In this problem, we need to get an input for a file name, and return the appropriate MIME type for that file, depending on what extension it has, if it has any.</p>
<p>There are many ways one can solve this problem. The main resource this time —besides the Python documentation, of course—, is the list of <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types" target="_blank" rel="noopener noreferrer">common MIME types</a> from MDN. To start off, you can see that we have two default types: <code>text/plain</code> for textual files (with the extension of <code>txt</code>), and <code>application/octet-stream</code> for everything else. For all the other types to consider in this problem, instead of hard-coding a conditional for each type and extension, we can create a mapping similar to the one below:</p>
<pre><code class="language-python">extensions_mapping = {
    &#39;image&#39;: [&#39;gif&#39;, &#39;jpg&#39;, &#39;jpeg&#39;, &#39;png&#39;],
    &#39;application&#39;: [&#39;pdf&#39;, &#39;zip&#39;],
}
</code></pre>
<p>Of course, first we need to get the extension of the filename. This could be done in different ways, we can <em>slice</em> the string from the index of where the dot is, or <em>split</em> it to get the part after the dot. We also need to clear the input string to handle messy inputs. As we have done that before in Deep Thought, we can <em>lower</em> the string for consistency, <em>strip</em> it to get rid of unnecessary spacing. If we use a mapping, the only thing that is left to do would be to check if the extension is <em>in</em> the values of a type (which would be our <em>key</em>), if so, simply printing the <em>key</em> and the <em>value</em> with the format of <code>[mime_type]/[extension]</code>. For example, if the filename is <code>cat.png</code>, our program should print <code>image/png</code>.</p>
<p>There is one catch, though. For the <code>jpg</code> extension, the MIME type is <code>image/jpeg</code>, instead of <code>image/jpg</code>. We can handle that with a simple conditional as well:</p>
<pre><code class="language-python">if extension == &#39;jpg&#39;:
    return &#39;image/jpeg&#39;
</code></pre>
<p>(Of course, if you do not use a function, you can simply print the string instead of using a return statement.)</p>
<p>And, that is all that necessary to solve the problem. On to the next one.</p>
<h2>Math Interpreter</h2>
<p>Here <a href="https://cs50.harvard.edu/python/2022/psets/1/interpreter/" target="_blank" rel="noopener noreferrer">in this problem</a>, the conditionals <em>if</em>/<em>elif</em>/<em>else</em> really shine. We only need to do simple arithmetic with two operands. We also need to format our output string as a float, having one decimal place. A hint of <em>splitting</em> the input string is already given in the explanation. If the user types in <code>5 + 4</code>, the result of our split would be <code>[&#39;5&#39;, &#39;+&#39;, &#39;4&#39;]</code> (remember, the input always returns a string). The only thing that is left to do is to check the given operator for each of the four operators (<code>*</code>, <code>/</code>, <code>+</code>, <code>-</code>) and do the arithmetic. The float formatting works like below:</p>
<pre><code class="language-python">x = 6.5418
print(f&#39;{x:.2f}&#39;) # 6.54
</code></pre>
<p>Instead of 2, we need to do format it as having <em>one</em> place. This, and a chain of conditions is all that there is to it.</p>
<h2>Meal Time</h2>
<p>This <a href="https://cs50.harvard.edu/python/2022/psets/1/meal/" target="_blank" rel="noopener noreferrer">one</a> was also quite enjoyable, even though at first glance it seems to be more complicated than others before. The first thing to think about is that we only have three options to consider: a time range of <code>7:00 - 8:00</code> which indicates <code>breakfast time</code>, <code>12:00 - 13:00</code> which means <code>lunch time</code>, and finally, <code>18:00 - 19:00</code> which is <code>dinner time</code>. When we ask the time to user, the input might be in the format of <code>#:##</code> or <code>##:##</code>. The program structure is also given to us, with a <code>main</code> function and a <code>convert</code> function, which we can call inside <code>main</code>. Let&#39;s think about how we can do the converting.</p>
<p>For a given time with the formatting <code>#:##</code> or <code>##:##</code>, we need to get the hour and minutes — which indicates that we need to <em>split</em> our string, so that the first item of the result of that split would be the hour, and the second one would be the minutes.</p>
<p>Since the hour can be written as <code>07</code>, we can check if it <em>starts with</em> 0, so that we can <em>slice</em> it appropriately. </p>
<p>Say, the user input is <code>07:30</code>. What does that mean? It is simply 7 hours and a half. Since an hour is 60 minutes, we can denote that part as a division. So, <code>30 / 60</code> in this case, would be <code>0.5</code>.  Then, all we need to do is to add the hour and minutes, converting any of them to <code>int</code> if necessary. But, if the input is <code>07:32</code>, you can imagine doing the division <code>32 / 60</code> would result in a not-so-nice-looking output, namely that of <code>0.5333333333333333</code>. One thing we can do in that case, is to use the <code>round</code> function. Since we are checking clear-cut boundaries for meal hours, we can round the whole operation, so that it would be like:</p>
<pre><code class="language-python">round(hour + minutes / 60)
</code></pre>
<p>(We do not need to put parentheses around <code>minutes / 60</code> since the order of operations takes care of that.) </p>
<p>After that, the rest is easy. We need to check for each meal time to see if the given time is between a certain meal time. Here, Python makes it easy to use comparison operators in one line, and our code is more elegant as a result. An example:</p>
<pre><code class="language-python">time_total = 7.5

print(7 &lt;= time_total &lt;= 8) # True
</code></pre>
<p>We do not need to use an <code>and</code> operator in that case. It is pretty neat.</p>
<p>The only thing left to do is to return the appropriate meal time for each condition. And, that is all. For the challenge part handling time inputs with <code>a.m.</code> and <code>p.m.</code>, you would like to do another split on the minute part after you have already split hours and minutes. You can check for <code>p.m.</code>, and if it is so, you can simply add 12 to the hour variable. Considering you have <strong>already</strong> split the time to hour and minute parts, dealing with <code>p.m.</code> would be similar to this:</p>
<pre><code class="language-python">if &#39; &#39; in minute:
    abbr = minute.split(&#39; &#39;)[1]
    minute = int(minute.split(&#39; &#39;)[0])
    if abbr == &#39;p.m.&#39;:
         hour = int(hour) + 12

print(hour, minute, after) # 19 30 p.m.
</code></pre>
<p>For <code>a.m.</code>, you do not have to do additional arithmetic, just continue as before.</p>
<p>And, that is all for this week&#39;s problem set. Perhaps a bit more slightly challenging than the last week, but entertaining nonetheless. We will see what will the next week&#39;s problems be like.</p>
]]></description>
            <link>https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-1</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-1</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Tue, 12 Apr 2022 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Solving the Problem Sets of CS50's Introduction to Programming with Python — One at a Time: Problem Set 0]]></title>
            <description><![CDATA[<p>Being one of the biggest online courses (and, <a href="https://www.newyorker.com/news/our-local-correspondents/how-harvards-star-computer-science-professor-built-a-distance-learning-empire" target="_blank" rel="noopener noreferrer">one of the most popular courses of Harvard</a>) is not the only thing that defines CS50. Having absolutely zero knowledge on anything related to computer science beforehand, when I finished the course last year with a <a href="https://www.youtube.com/watch?v=atriZIc7y8c" target="_blank" rel="noopener noreferrer">final project</a> that surprisingly exceeded my expectations, and managed to create a <a href="https://heap.pythonanywhere.com/" target="_blank" rel="noopener noreferrer">demo site</a> for it, it was a big dopamine rush. If you literally start taking the course without any prior experience, understanding and finally being able to solve the problem sets of the course is almost like a spiritual experience. David J. Malan is a phenomenal lecturer who helps you internalize concepts that seem difficult for a beginner.</p>
<p>CS50 is now not a single course on Introduction to Computer Programming, but has turned into a bigger ecosystem for different courses with various flavors, be it Web Programming, Artificial Intelligence, or, Mobile App Development.<br>Its latest, Introduction to Programming with Python, does not exactly focus on theoretical computer science concepts, but is a more general programming course using Python. I love Python, and I was really excited to see the new problems that CS50 would provide for us to solve in this new course.</p>
<p>Before I start, here is a disclaimer: <strong>I am not going to provide full solutions to Problem Sets</strong>. See <a href="https://cs50.harvard.edu/python/2022/honesty/" target="_blank" rel="noopener noreferrer">academic honesty</a>. </p>
<p>I am planning to write about how to start thinking about a given problem, maybe as a kind of guidance, and how one might go about solving it. I assume you already read the problem set explanations, as I might allude to them. Generally, the problems start easy and perhaps more friendly, then the curve becomes steeper. It is a nice challenge, though, that is how you realize that you are actually learning.</p>
<h2>Indoor Voice</h2>
<p><a href="https://cs50.harvard.edu/python/2022/psets/0/indoor/" target="_blank" rel="noopener noreferrer">The first problem</a> seems pretty straightforward. Our given input just has to be &quot;quiet&quot; instead of being in &quot;yelling case&quot;. What that means is, if <code>&#39;THIS IS YELLING&#39;</code>, then <code>&#39;this is not yelling&#39;</code>. And, here is the importance of reading the documentation of the tool that you are using, in this case, Python. Because we work with <code>str</code> data types in the problem, we simply have to look up if Python comes with built-in <code>str</code> methods — and, it does. A lot of them. For example, it has <code>capitalize()</code>, <code>lower()</code>, <code>upper()</code> among many others. Let&#39;s see how these would work:</p>
<pre><code class="language-python">s = &#39;This is CS50.&#39;

print(s.capitalize()) # This is CS50.
print(s.lower()) # this is cs50.
print(s.upper()) # THIS IS CS50.
</code></pre>
<p>With that example, you might already see how to totally &quot;quiet down&quot; a given string. As for the <code>input()</code>, again, the documentation helps. In the Python interpreter, for example, typing <code>help(input)</code> enlightens you on how to use it.</p>
<h2>Playback Speed</h2>
<p><a href="https://cs50.harvard.edu/python/2022/psets/0/playback/" target="_blank" rel="noopener noreferrer">This problem</a> wants us to simulate a slower playback, replacing spaces with <code>...</code> (three dots). What we want to do is to split a given input string into words, and to join them back again with three dots. Or, we can simply <em>replace</em> the space characters with three dots. As with all kinds of problems, there are different ways for a solution. Here, the documentation again is important. We are working with <code>str</code> types again, there are methods named for <em>exactly</em> what we want to do in this case, no matter which method you choose to implement. Simply seek, and you will find them.</p>
<h2>Making Faces</h2>
<p>With <a href="https://cs50.harvard.edu/python/2022/psets/0/faces/" target="_blank" rel="noopener noreferrer">this one</a>, we need to replace any occurrence of <code>:)</code> with the emoji <code>🙂</code> and <code>:(</code> with 🙁. One of the most important things to realize here is that the emojis are also <code>str</code> type in this case. What we want to do is, well, literally <em>replace</em> characters of a given string with other characters. Again, consulting the documentation helps with what we exactly want to do.</p>
<p>This problem set also emphasizes the concept of modularity, splitting code into functions. For example, instead of doing everything on a <code>main()</code> function like this:</p>
<pre><code class="language-python">def main():
    incantation = &#39;Expecto Patronum&#39;
    print(f&#39;{incantation.upper()}!&#39;)

main() # EXPECTO PATRONUM!
</code></pre>
<p>There is a slightly better way to do it:</p>
<pre><code class="language-python">def say_incantation(incantation):
    return f&#39;{incantation.upper()}!&#39;

def main():
    incantation = &#39;Expecto Patronum&#39;
    print(say_incantation(incantation))

main() # EXPECTO PATRONUM!
</code></pre>
<p>And similarly in this problem, we have to split the implementation using a <code>convert</code> function to convert emoticons to emojis, and a <code>main</code> function to call <code>convert</code> inside of it.</p>
<h2>Einstein</h2>
<p>This <a href="https://cs50.harvard.edu/python/2022/psets/0/einstein/" target="_blank" rel="noopener noreferrer">problem set</a> uses Einstein&#39;s mass-energy equivalence formula <code>E = mc^2</code>. For a given mass, we need to output the energy in Joules.<br><code>c</code> in the formula, is the constant speed of light that is measured approximately as 300000000 (meters per second). The main thing to do is to plug in the variables to their equivalents in the formula, but one thing to remember is how the <code>input</code> function works. Because, in this problem we do not mostly do operations with <code>str</code> types this time, but rather with the <code>int</code> data type. So, for any kind of string in our program, <a href="https://en.wikipedia.org/wiki/Type_conversion" target="_blank" rel="noopener noreferrer">type casting</a> is a helpful thing to do as we only want integers. For example:</p>
<pre><code class="language-python"># This would not work
year = &#39;2022&#39;
print(year - 22) # TypeError
</code></pre>
<pre><code class="language-python"># But this would work
year = int(&#39;2022&#39;)
print(year - 22) # 2000
</code></pre>
<p>Perhaps, why the <code>int</code> type is great and not a slight headache like <code>float</code>s can be appreciated more in later problem sets.</p>
<h2>Tip Calculator</h2>
<p>The last <a href="https://cs50.harvard.edu/python/2022/psets/0/tip/" target="_blank" rel="noopener noreferrer">problem</a> is mostly done, only the remaining two functions are waiting for us to be implemented. </p>
<p>What <code>dollars_to_float</code> and <code>percents_to_float</code> expect as inputs are similar in terms of formatting. The first one expects an input like <code>$50.00</code> and the second one needs an input like <code>15%</code>, of course, both being strings. Just like in the Einstein problem, type casting is a useful thing to do in this problem. But, before that, we need to get rid of <code>$</code> (the dollar sign) and <code>%</code> (the percent sign). Realize that what we need to do in the first case is to <em>remove a prefix</em> (leading characters from the left), and in the second case, to <em>remove a suffix</em> (ending characters from the right). There are more than one way to do these things, we can even slice the string ourselves instead of using any built-in method. And, there is really not much to the solution except these. We do not need to think about edge cases yet, as the explanation says that the input values are assumed to be given in expected formats.</p>
<p>I do not want to give away too much, because the crux of these problems is that <em>you</em> should be the investigator. And, I guess the moral of the story for this problem set is a phrase that might sound annoying to some, but it is what it is: <em>read the documentation</em>. Or, simply, look for the thing that you need and learn to find it in the documentation. For the Problem Set 0, looking up built-in <code>str</code> methods, and some type casting would suffice.</p>
<p>We will see what the next problem set will bring. </p>
<p>Until then, happy coding. 💜</p>
]]></description>
            <link>https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-0</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/solving-the-problem-sets-of-cs50s-introduction-to-programming-with-python-problem-set-0</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Tue, 05 Apr 2022 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[A Quick Behind the Scenes of Greedy and Lazy Matching]]></title>
            <description><![CDATA[<p>Regular expressions can be a bit of a nightmare — if you encounter them for the first time.</p>
<p>That was what I used to think as well, before I eventually started to like them. You could sense the power of regular expressions, and they seemed to be ubiquitous — they show up in all kinds of places, and you know that there is no escaping from a regular expression (or, a regex). And, one of the things you would keep hearing on your encounters is the concept of a <em>greedy</em> versus <em>lazy</em> matching. Just when you think you finally grasp them somehow, they might seem to be those mysterious concepts once again a week later. So, let&#39;s see what is happening here.</p>
<p>Let&#39;s say we have a string: <code>&#39;One said: &quot;The flag is moving.&quot; The other said: &quot;The wind is moving.&quot; They argued but could not agree.&#39;</code>. (If you&#39;re not familiar with the <a href="https://en.wikipedia.org/wiki/Koan" target="_blank" rel="noopener noreferrer">koan</a> — <em>not the wind, not the flag; <a href="https://en.wikisource.org/wiki/The_Gateless_Gate/Not_The_Wind,_Not_The_Flag" target="_blank" rel="noopener noreferrer">mind is moving</a></em>.) </p>
<p>What we want to do is to match each of the quoted sentences: <code>&quot;The flag is moving.&quot;</code> and <code>&quot;The wind is moving.&quot;</code>. Using JavaScript, the first thing comes to mind is to perhaps use something like this regex to get a match:</p>
<pre><code class="language-js">let regex = /&quot;.+&quot;/g;
</code></pre>
<p>However, if you try this, it gets a match for everything after the first quote:</p>
<pre><code class="language-js">let s = &#39;One said: &quot;The flag is moving.&quot; The other said: &quot;The wind is moving.&quot; They argued but could not agree.&#39;;

let regex = /&quot;.+&quot;/g;

s.match(regex);
// -&gt; [ &#39;&quot;The flag is moving.&quot; The other said: &quot;The wind is moving.&quot;&#39; ]
</code></pre>
<p>This is not what we want. But, why that happens is because of the <em>greedy algorithm</em> that our regex uses. What it does is basically going to the next position if there is no match for a given position. Let&#39;s see what that means.</p>
<p>The first character of the pattern <code>&quot;.+&quot;</code> to match is <code>&quot;</code>.<br>The regex engine starts with the 0th index of the string, which is <code>O</code>, therefore gets no match. If there is no match, remember, it goes to the next position. It is <code>n</code>, still no match. It continues advancing until it finds <code>&quot;</code> at index 10:</p>
<p><em>One said: <mark>&quot;</mark>The flag is moving.&quot; The other said: &quot;The wind is moving.&quot; They argued but could not agree.</em></p>
<p>Now that the regex engine has found it, it tries to match the next part of the pattern, which is the dot (<code>.</code>) character. The dot is a special quantifier that will match &quot;any character except a newline.&quot; The character after the first quote on our string was <code>T</code>, so, it matches. Because of the <code>+</code> quantifier after the dot, it will repeat as long as a character matches the dot — which will be all the rest of the characters in the string in this case:</p>
<p><em>One said: <mark>&quot;The flag is moving.&quot; The other said: &quot;The wind is moving.&quot; They argued but could not agree.</mark></em></p>
<p>Next, the rest of the pattern (<code>&quot;</code> at the end) needs to match as well. However, we are at the end of the string already. So, what happens now is, that the engine <em>backtracks</em>. It goes back one character, and will try to match from that character onwards:</p>
<p><em>One said: <mark>&quot;The flag is moving.&quot; The other said: &quot;The wind is moving.&quot; They argued but could not agree</mark>.</em></p>
<p>Since the character after the match is not a quote (<code>&quot;</code>), it does not match. Therefore, it backtracks again:</p>
<p><em>One said: <mark>&quot;The flag is moving.&quot; The other said: &quot;The wind is moving.&quot; They argued but could not agre</mark>e.</em></p>
<p>Now, <code>e</code> is not <code>&quot;</code> as well. The engine backtracks again and again until it finds the <code>&quot;</code>:</p>
<p><em>One said: <mark>&quot;The flag is moving.&quot; The other said: &quot;The wind is moving.&quot;</mark> They argued but could not agree.</em></p>
<p>Our regex engine has found it, and is happy now.<br>Though, we have a <code>g</code> flag for global match, and the search would continue searching for the pattern again after the first match. But, the rest of the string (<code>They argued but could not agree.</code>) has no other quotes (<code>&quot;</code>) — therefore, we don&#39;t get any more results.</p>
<p>Now that we know that was not our intention to get this result, let&#39;s take a look at lazy matching.</p>
<p>We can do the lazy match with the quantifier <code>?</code> after the <code>+</code>. So, our new regex would be:</p>
<pre><code class="language-js">let regex = /&quot;.+?&quot;/g;
</code></pre>
<p>It means that we want to repeat as little as possible. Now it works as intended:</p>
<pre><code class="language-js">let s = &#39;One said: &quot;The flag is moving.&quot; The other said: &quot;The wind is moving.&quot; They argued but could not agree.&#39;;

let regex = /&quot;.+?&quot;/g;

s.match(regex);
// -&gt; [ &#39;&quot;The flag is moving.&quot;&#39;, &#39;&quot;The wind is moving.&quot;&#39; ]
</code></pre>
<p>The first thing it does is to look for the quote (<code>&quot;</code>) to match the first character in the pattern <code>&quot;.+?&quot;</code>. Similar to before, it tries until it finds it at index 10:</p>
<p><em>One said: <mark>&quot;</mark>The flag is moving.&quot; The other said: &quot;The wind is moving.&quot; They argued but could not agree.</em></p>
<p>Next, it matches the dot:</p>
<p><em>One said: <mark>&quot;T</mark>he flag is moving.&quot; The other said: &quot;The wind is moving.&quot; They argued but could not agree.</em></p>
<p>Now, things are different from greedy search. Instead of matching the dot continually, the engine tries matching the rest of the pattern now. In this case, instead of trying to match <code>h</code> for the dot (<code>.</code>) first, it checks if the <code>h</code> character matches the quote  (<code>&quot;</code>). Since it does not, the engine matches it with the dot and continue:</p>
<p><em>One said: <mark>&quot;Th</mark>e flag is moving.&quot; The other said: &quot;The wind is moving.&quot; They argued but could not agree.</em></p>
<p>Now, it checks <code>e</code> for the quote (<code>&quot;</code>). No match again. It continues until finds the quote:</p>
<p><em>One said: <mark>&quot;The flag is moving.&quot;</mark> The other said: &quot;The wind is moving.&quot; They argued but could not agree.</em></p>
<p>We&#39;ve found the first match! Because of the global flag, it will start again from the end of the first match, and find another result for the pattern again eventually:</p>
<p><em>One said: <mark>&quot;The flag is moving.&quot;</mark> The other said: <mark>&quot;The wind is moving.&quot;</mark> They argued but could not agree.</em></p>
<p>Finally, we&#39;ve got the result we wanted and are now happy — thanks to understanding the difference between greedy and lazy matching.</p>
<p><strong>Note</strong>: If you&#39;re not satisfied with the koan example and still confused, here is a shorter and simpler explanation: <a href="https://stackoverflow.com/a/2301298" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/a/2301298</a>.</p>
]]></description>
            <link>https://rivea0.github.io/blog/a-quick-behind-the-scenes-of-greedy-and-lazy-matching</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/a-quick-behind-the-scenes-of-greedy-and-lazy-matching</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Thu, 31 Mar 2022 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Lexical Environment and Closures in JavaScript]]></title>
            <description><![CDATA[<p>When it feels like this is the <a href="https://www.gutenberg.org/files/98/98-h/98-h.htm#link2H_4_0001" target="_blank" rel="noopener noreferrer"><em>worst of times</em> and <em>the age of foolishness</em></a>, and you&#39;re almost certainly sure that there are darker times ahead, you might as well have a certain desire to understand how things work on a deeper level beneath the surface. </p>
<p>One of those things that are beneath the surface of JavaScript is the concept of Lexical Environment. If you&#39;re familiar with closures, it is something that helps you internalize what is really going on.</p>
<p>We can think of the Lexical Environment as an object that every function, code block, even the whole script itself, has. It not only contains the local variables and their values, but also has a reference to an <strong>outer lexical environment</strong>. </p>
<p>When you create a variable, let&#39;s say, something like this:</p>
<pre><code class="language-js">let book = &#39;Harry Potter and the Prisoner of Azkaban&#39;;
</code></pre>
<p>Think of the <code>book</code> as a property of the Lexical Environment, with the value <code>&#39;Harry Potter and the Prisoner of Azkaban&#39;</code>. Since it is inside the global Lexical Environment now, the outer reference is <code>null</code>. Maybe another way to think about this is that the global Lexical Environment is the environment of the whole script, and it has not any reference to anything <em>outer</em> than itself. </p>
<p>How the global Lexical Environment behaves is different for variables and declared functions. Let&#39;s try to understand what we mean by that.</p>
<p>The global Lexical Environment is filled with all the variables, but initially, the variables are &quot;uninitialized&quot; — which means that the engine knows about them, but they cannot be referenced until they&#39;ve been declared. So, let&#39;s say this is our script for now:</p>
<pre><code class="language-js">let book; // (1)
book = &#39;Harry Potter and the Prisoner of Azkaban&#39;; // (2)
book = &#39;Harry Potter and the Goblet of Fire&#39;; // (3)
</code></pre>
<p>What happens when the execution starts, is that the (global) Lexical Environment knows about the variable <code>book</code>, but it is uninitialized.<br>On line (1), <code>book</code> is now <code>undefined</code>.<br>On line (2), <code>book</code> is assigned a value, <code>&#39;Harry Potter and the Prisoner of Azkaban&#39;</code>.<br>On (3), the value of <code>book</code> is changed to <code>&#39;Harry Potter and the Goblet of Fire&#39;</code>.</p>
<p>However, we said that the case is different for function declarations. It also shines light on the &quot;hoisting&quot; aspect of JavaScript. Let&#39;s take a look at it.</p>
<p>When a function is declared (we&#39;re not using a function expression), it is instantly initialized so that it is ready to be used. That&#39;s why it does not matter if we declare the function after we use them — that&#39;s why something like this works:</p>
<pre><code class="language-js">console.log(add(30, 3)); // 33

function add(num, num2) {
  return num + num2;
}
</code></pre>
<p>When we say that JavaScript &quot;hoists&quot; a function, what actually happens is this: declared functions are instantly initialized when the Lexical Environment is created. But, let&#39;s look at this now:</p>
<pre><code class="language-js">let broomstick = &#39;Firebolt&#39;;

function summonItem(spell) {
  return `${spell} ${broomstick}!`;
}

console.log(summonItem(&#39;Accio&#39;)); // Accio Firebolt!
</code></pre>
<p>When the execution of the above code starts, the Lexical Environment knows both <code>broomstick</code> and <code>summonItem</code>; however, <code>broomstick</code> is uninitialized at this stage while <code>summonItem</code> is initialized and ready to use.<br>To visualize, think of the Lexical Environment as an object with properties like below:</p>
<pre><code class="language-js">{
  broomstick: &lt;uninitialized&gt;,
  summonItem: function
}
</code></pre>
<p>Also, of course, <strong>its <code>outer</code> references <code>null</code></strong> because this is the global Lexical Environment.</p>
<p>When a function starts running, a new Lexical Environment is created for it. So, when we call <code>summonItem</code> (inside the <code>console.log</code>), the Lexical Environment of that call only stores <code>spell</code> having the value <code>&#39;Accio&#39;</code>. And, it also has its <code>outer</code> referencing the global Lexical Environment itself, which stores <code>broomstick</code> and <code>summonItem</code>, with its own <code>outer</code> referencing <code>null</code>. The Lexical Environment of our function call (<code>summonItem(&#39;Accio&#39;)</code>)—the <strong>Inner Lexical Environment</strong>— references the <em>outer</em> one, the global Lexical Environment. That is, <code>spell</code> is found locally, but to reach <code>broomstick</code>, the <code>outer</code> reference is followed, and it is found there.</p>
<p>So, it is true to say that:</p>
<blockquote>
<p><strong>When the code wants to access a variable – the inner Lexical Environment is searched first, then the outer one, then the more outer one and so on until the global one.</strong> </p>
</blockquote>
<p>Now, it&#39;s time to catch our breath.</p>
<p>It may be a lot at first, but, that&#39;s learning 💁🏻.</p>
<p>This time, consider this one:</p>
<pre><code class="language-js">function powersOfTwo() {
  let start = 2;
  let count = 0;
  return function() {
    return start ** count++;
  }
}

let twoToThePower = powersOfTwo();

console.log(twoToThePower()); // 1 (2 ** 0)
console.log(twoToThePower()); // 2 (2 ** 1)
console.log(twoToThePower()); // 4 (2 ** 2)
console.log(twoToThePower()); // 8 (2 ** 3)
console.log(twoToThePower()); // 16 (2 ** 4)
console.log(twoToThePower()); // 32 (2 ** 5)
</code></pre>
<p>When the <code>powersOfTwo</code> is called, a Lexical Environment is created for it. It now has <code>start</code> and <code>count</code>, and <code>outer</code> referencing the global Lexical Environment which has <code>powersOfTwo</code> and <code>twoToThePower</code>, as well as its own <code>outer</code> referencing <code>null</code>.</p>
<p>When we call <code>twoToThePower</code> inside <code>console.log</code>, what happens is — you guessed it, a new Lexical Environment is created. Since <code>start</code> and <code>count</code> are not inside this local Lexical Environment, it follows the <code>outer</code> reference (which is the Lexical Environment of <code>powersOfTwo</code>). When it updates the <code>count</code>, it is updated inside the Lexical Environment of <code>powersOfTwo</code>. Another way to put it:</p>
<blockquote>
<p><strong>A variable is updated in the Lexical Environment where it lives.</strong></p>
</blockquote>
<p>Again, <code>start</code> and <code>count</code> lives inside the Lexical Environment of <code>powersOfTwo</code>. When we update <code>count</code>, it is updated there, not inside the Lexical Environment of the returned function which we bind to <code>twoToThePower</code>.</p>
<p>In the first call of <code>twoToThePower</code>, <code>start</code> is 2 and <code>count</code> is 0. In the second call, <code>start</code> is still 2, but <code>count</code> is updated and is now 1. And, it keeps being updated inside the Lexical Environment where it lives (<code>powersOfTwo</code>) as long as we call <code>twoToThePower</code>. </p>
<p>So, <code>twoToThePower</code> has the &quot;power&quot; to access and modify the variables inside of a Lexical Environment that its <code>outer</code> references.</p>
<p>This is what <em>closures</em> are about, a function that has access to its <code>outer</code> scope.</p>
<p>Here comes the enlightenment: Then, <em>are not all functions closures in JavaScript</em>?</p>
<p>I guess the answer is <a href="https://javascript.info/new-function#closure" target="_blank" rel="noopener noreferrer">mostly yes, with an exception</a>.</p>
<p>If you remember the <code>summonItem</code> example, it also accesses a variable (<code>broomstick</code>) from its <code>outer</code> scope, so based on the definition, we can say that it is theoretically a closure. Though, it might be better if we don&#39;t confuse ourselves a lot because when you look up closures, most basic examples you see would be similar in spirit to <code>powersOfTwo</code>. It is nevertheless a nice thing to internalize, as it was our goal all along — to see how things work beneath the surface. It is an abstract surface of course, but good to dive into.</p>
<h3>References</h3>
<ul>
<li><a href="https://javascript.info/closure" target="_blank" rel="noopener noreferrer">javascript.info</a> was my main resource while writing this article, and the quotations are taken from there. It also has great visuals to help you understand Lexical Environments better.</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures" target="_blank" rel="noopener noreferrer">MDN article for closures</a>. Because, what&#39;s a resources section without MDN?</li>
<li><a href="https://www.youtube.com/watch?v=vKJpN5FAeF4" target="_blank" rel="noopener noreferrer">Closures in 100 Seconds and Beyond</a> for a quick take.</li>
</ul>
]]></description>
            <link>https://rivea0.github.io/blog/lexical-environment-and-closures-in-javascript</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/lexical-environment-and-closures-in-javascript</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Wed, 09 Mar 2022 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Custom endsWith and startsWith Functions]]></title>
            <description><![CDATA[<p>When working with strings, there might come a time that you might want to check if the string starts with or ends with another given string. Luckily, JavaScript and Python have their own built-in function to do the job, aptly named <code>startsWith()</code> &amp; <code>endsWith()</code> in JavaScript, and <code>startswith()</code> &amp; <code>endswith()</code> in Python. However, not to reinvent the wheel, but let&#39;s say we want to implement them our own way. Because, why not?</p>
<h2>Negative Indexing</h2>
<p>One thing that might be helpful, before we start off, is the concept of negative indexing. For example, not in all languages, but the last character of a string can be accessed with the index number -1. The second to last character will be -2, and so on. Python allows the use of negative indexes for strings (and for most <a href="https://docs.python.org/3.9/glossary.html#term-iterable" target="_blank" rel="noopener noreferrer">iterables</a>), and JavaScript&#39;s <code>slice</code> method also allows negative indexing. These will come in handy.</p>
<p>Python example:</p>
<pre><code class="language-python">name = &#39;David&#39;
name[-1] # d
name[-2] # i
</code></pre>
<p>We cannot access the character directly with negative indexes in JavaScript as it will return <code>undefined</code>, but we can use <code>slice</code>:</p>
<pre><code class="language-javascript">let name = &#39;David&#39;;
name[-1] // undefined
name.slice(-1) // d
name.slice(-2) // id
</code></pre>
<h2>Implementing endsWith</h2>
<p>Now, let&#39;s check if a string ends with another given string. Now that we know that negative indexes start from the end of the string, we can try something like this:</p>
<p>Python example:</p>
<pre><code class="language-python">name = &#39;David&#39;
target = &#39;vid&#39;

name[-len(target):] == target # True
</code></pre>
<p>JavaScript example:</p>
<pre><code class="language-js">let name = &#39;David&#39;;
let target = &#39;vid&#39;;

name.slice(-target.length) === target // true
</code></pre>
<p>We can take a look at what we did one by one, so that it&#39;s more clear. The first thing we see is that we get <code>target</code>&#39;s length, which will be in our example&#39;s case, 3 (the length of <code>&#39;vid&#39;</code>). And, with negative indexing, we started from -3rd index of our original string and just compared the two. <code>name.slice(-target.length)</code> will start from the -3rd index of <code>name</code> up to the end of the string, which will be <code>&#39;vid&#39;</code> and voilà! — they&#39;re the same.</p>
<p>It is a nice, one-liner way to do it. Now let&#39;s try our hand at <code>startsWith</code>, which will be easier than this one.</p>
<h2>Implementing startsWith</h2>
<p>We&#39;ll use the same components, slicing and using the target string&#39;s length. Let&#39;s do it.</p>
<p>Python example:</p>
<pre><code class="language-python">name = &#39;David&#39;
target = &#39;Dav&#39;
name[:len(target)] == target # True
</code></pre>
<p>JavaScript example:</p>
<pre><code class="language-js">let name = &#39;David&#39;;
let target = &#39;Dav&#39;;
name.slice(0, target.length) === target // true
</code></pre>
<p>Slicing the original string from the start to the length of the target string, gives us the string with the same length of <code>target</code>. So, <code>name.slice(0, target.length)</code> in this case, starts from the start of the string and goes up to the 3rd index (length of <code>&#39;Dav&#39;</code>). We only check if the two strings are the same, and that&#39;s it.</p>
<h2>Dissecting the Implementations</h2>
<p>We have written great one-liners, and just implemented our own way to do <code>startsWith</code> and <code>endsWith</code>. Here are the functions (let&#39;s write the function names in <a href="https://en.wikipedia.org/wiki/Snake_case" target="_blank" rel="noopener noreferrer">snake case</a> so as not to confuse ourselves with the built-in ones):</p>
<p>In Python:</p>
<pre><code class="language-python">def starts_with(string, target):
    return string[:len(target)] == target
</code></pre>
<pre><code class="language-python">def ends_with(string, target):
    return string[-len(target)] == target
</code></pre>
<p>In JavaScript:</p>
<pre><code class="language-js">function starts_with(string, target) {
  return string.slice(0, target.length) === target;
}
</code></pre>
<pre><code class="language-js">function ends_with(string, target) {
  return string.slice(-target.length) === target;
}
</code></pre>
<p>These are fine, but what about implementing the same logic another way?  Maybe, with another language? One that will help us think in lower-level.</p>
<p>My initial thought was that it would be something like this in C (spoiler: it was naive.):</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;
#include &lt;stdbool.h&gt;
#include &lt;string.h&gt;

bool starts_with(char *string, char *target) {
  int target_length = strlen(target);
  for (int i = 0; i &lt; target_length; i++) {
    if (string[i] != target[i]) {
      return false;
    }
  }
  return true;
}

bool ends_with(char *string, char *target) {
  int target_length = strlen(target);
  int starting_index = strlen(string) - target_length;
  for (int i = 0; i &lt; target_length; i++) {
    if (string[starting_index + i] != target[i]) {
      return false;
    }
  }
  return true;
}
</code></pre>
<p>However, I was <a href="https://web.archive.org/web/20221225204544/https://dev.to/pauljlucas/comment/1mj0d" target="_blank" rel="noopener noreferrer">corrected</a> that this is indeed problematic.</p>
<p>Here is the simpler and correct versions of <code>starts_with</code> and <code>ends_with</code>:</p>
<pre><code class="language-c">bool starts_with(char const *string, char const *target) {
  for ( ; *target != &#39;\0&#39; &amp;&amp; *target == *string; ++target, ++string );
  return *target == &#39;\0&#39;;
}
</code></pre>
<pre><code class="language-c">bool ends_with(char const *string, char const *target) {
  char const *const t0 = target;
  for ( ; *target != &#39;\0&#39;; ++string, ++target ) {
    if ( *string == &#39;\0&#39; ) return false;
  }
  for ( ; *string != &#39;\0&#39;; ++string );
  size_t const t_len = (size_t)(target - t0);
  return strcmp( string - t_len, t0 ) == 0;
}
</code></pre>
<p>What we do in <code>starts_with</code> is the same idea, only that we compare each character of our original string and the target string until <code>target</code> ends; also handling the case if <code>target</code> is longer than <code>string</code> — in which case it would return false.</p>
<p>In <code>ends_with</code>, we first check to see if <code>target</code> is longer than <code>string</code> (in that case, we would immediately return false). Then, using the <code>target</code>&#39;s length (<code>t_len</code>), we compare the <code>string</code>&#39;s end of <code>t_len</code> characters with our target string (<code>t0</code>).</p>
<p>Here&#39;s the whole code:</p>
<pre><code class="language-c">#include &lt;stdbool.h&gt;
#include &lt;stddef.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

// Function prototypes
bool starts_with(char const *string, char const *target);
bool ends_with( char const *string, char const *target );

int main(void) {
  char const *str = &quot;David&quot;;
  char const *target_end = &quot;vid&quot;;
  char const *target_start = &quot;D&quot;;

  // prints &quot;true&quot;
  printf(&quot;%s\n&quot;, starts_with(str, target_start) ? &quot;true&quot; : &quot;false&quot;);

  // prints &quot;true&quot;
  printf(&quot;%s\n&quot;, ends_with(str, target_end) ? &quot;true&quot; : &quot;false&quot;);
}

bool starts_with(char const *string, char const *target) {
  for ( ; *target != &#39;\0&#39; &amp;&amp; *target == *string; ++target, ++string );
  return *target == &#39;\0&#39;;
}

bool ends_with( char const *string, char const *target ) {
  char const *const t0 = target;
  for ( ; *target != &#39;\0&#39;; ++string, ++target ) {
    if ( *string == &#39;\0&#39; ) return false;
  }
  for ( ; *string != &#39;\0&#39;; ++string );
  size_t const t_len = (size_t)(target - t0);
  return strcmp( string - t_len, t0 ) == 0;
}
</code></pre>
<p>And now, time for some introspection.</p>
<p>Did we reinvent the wheel? Maybe.</p>
<p>Was it a problem that already been solved? That&#39;s what it was.</p>
<p>But, have we had some fun along the way? Well, depends on you, but I certainly did.</p>
]]></description>
            <link>https://rivea0.github.io/blog/custom-endswith-and-startswith-functions</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/custom-endswith-and-startswith-functions</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Tue, 22 Feb 2022 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Don't Compare Arrays with == in JavaScript]]></title>
            <description><![CDATA[<p>I used to think that if we define two arrays with the same values in the same order, we could compare their equality of value in JavaScript (the vanilla one, that is) using <code>==</code>.</p>
<p>How wrong I was.</p>
<p>What I mean is, when you do something like this:</p>
<pre><code class="language-javascript">let x = [1, 3];
let y = [1, 3];
</code></pre>
<p>You expect something like <code>x == y</code> to be true (remember we&#39;re not using the strict equality yet as we know that they are not the same object —yes, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener noreferrer"><em>arrays are objects</em></a>—, we&#39;re only looking if they are equal value-wise). For example, in Python, while they are not the same object in memory, these two lists would equal true:</p>
<pre><code class="language-python">x = [1, 3]
y = [1, 3]
x == y # True 
x is y # (or `id(x) == id(y)`) False
</code></pre>
<p>Using <code>===</code> in JavaScript for both arrays would, of course, return false as they are not the same objects in memory. That&#39;s expected, but there is also not a special treatment for array comparison by value as there is no item-by-item comparison behind the scenes for <code>==</code> — so, stay away from using it to compare arrays&#39; value equality.</p>
<p>We can use, however, something like this function (as defined in <em>JavaScript: The Definitive Guide</em> by David Flanagan), to compare two arrays for equality:</p>
<pre><code class="language-javascript">function equalArrays(a, b) {
  if (a === b) return true; // Identical arrays are equal
  if (a.length !== b.length) return false; // Different-size arrays are not equal
  for (let i = 0; i &lt; a.length; i++) { // Loop through all elements
    if (a[i] !== b[i]) return false; // If any differ, arrays are not equal
  } return true; // Otherwise they are equal
}
</code></pre>
<p>Of course, this would not work recursively, so it would mostly be useful for simple and one-dimensional arrays.</p>
<p>Quite simple, but, something to keep in mind nonetheless.</p>
<p>Also, to learn more about how the equality operator works with objects, reading about <a href="https://javascript.info/object-toprimitive" target="_blank" rel="noopener noreferrer">object to primitive conversion</a> is a great way to spend some time learning what&#39;s going on behind the scenes.</p>
]]></description>
            <link>https://rivea0.github.io/blog/dont-compare-arrays</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/dont-compare-arrays</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Sat, 19 Feb 2022 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[There is Always a Better Way, Most Likely Waiting as a Built-In Method in the Standard Library]]></title>
            <description><![CDATA[<p>I was reading Al Sweigart&#39;s <em>Beyond the Basic Stuff with Python</em> –which I would recommend if you&#39;re already finished <em>Automate the Boring Stuff</em>– when I had a realization.<br>Consider the following terrible looking code:</p>
<pre><code class="language-python">def check_holiday(season):
    if season == &#39;Winter&#39;:
        holiday = &#39;New Year\&#39;s Day&#39; 
    elif season == &#39;Spring&#39;:
        holiday = &#39;May Day&#39; 
    elif season == &#39;Summer&#39;:
        holiday = &#39;Juneteenth&#39; 
    elif season == &#39;Fall&#39;:
        holiday = &#39;Halloween&#39; 
    else:
        holiday = &#39;Personal day off&#39;

    return holiday
</code></pre>
<p>It looks indeed not that good. Of course, what you would do if you are somewhat a beginner who simply wants to follow best practices, is to come up with a better and more elegant way of writing this same piece of code – even though it might be laughable and pitiable to your future self, and to anyone who would like to pity you anyway.</p>
<p>What I&#39;ve thought at first when I saw the code above was that I would simply use a dictionary to store the seasons as keys and corresponding holidays as their values, and that&#39;s it. And, I would loop over the whole dictionary to compare the seasons and assign the holiday. It would look like this:</p>
<pre><code class="language-python">def check_holiday(season):
    seasons = {&#39;Winter&#39;: &#39;New Year\&#39;s Day&#39;,  
               &#39;Spring&#39;: &#39;May Day&#39;,  
               &#39;Summer&#39;: &#39;Juneteenth&#39;,  
               &#39;Fall&#39;: &#39;Halloween&#39;}

    holiday = &#39;Personal day off&#39;

    for k, v in seasons.items():
        if season == k:
            holiday = v

    return holiday
</code></pre>
<p>At first glance, it seemed okay. It is definitely cleaner than the one with bunch of if-else statements. But, as always, if you have come up with a better way of doing something, know that there is even a better way of doing it. Like this:</p>
<pre><code class="language-python">def check_holiday(season):
    holiday = {&#39;Winter&#39;: &#39;New Year\&#39;s Day&#39;,  
               &#39;Spring&#39;: &#39;May Day&#39;,  
               &#39;Summer&#39;: &#39;Juneteenth&#39;,  
               &#39;Fall&#39;: &#39;Halloween&#39;}.get(season, &#39;Personal day off&#39;)
    return holiday
</code></pre>
<p>It is obvious when you realize that you&#39;ve already had that better tool in your toolkit that comes built-in for you all along, and that&#39;s embarrassing. </p>
<p>So, what this code does is the same thing, only that we use Python&#39;s built-in <code>get</code> method on a dictionary to simply return the season&#39;s value – assigning it to holiday if the season exists, if not, returning &#39;Personal day off&#39; as the default value.</p>
<p>Of course, there might be a better way of doing this, but what I&#39;ve come to realize is that there is always a better choice, and it doesn&#39;t hurt to remember that –in the case of Python– you have already tons of built-in methods in the standard library to use, which would most likely be better and more efficient than what you would write anyway. </p>
<p>This might be a trivial thing, but it is nevertheless good food for thought. So, if you think you have found a better way of doing something, there&#39;s even a better way than that. And it might be under your nose all along, simply waiting for you to remember to use it.</p>
]]></description>
            <link>https://rivea0.github.io/blog/there-is-always-a-better-way</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/there-is-always-a-better-way</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Thu, 17 Feb 2022 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Inaugural Post]]></title>
            <description><![CDATA[<blockquote>
<p>We <em>write</em> and we later <em>read</em>. We <em>save</em> and we later <em>retrieve</em>. We <em>store</em> and we later <em>access</em>. The function of memory is to keep information intact between those two events.</p>
</blockquote>
<p>As with all things, there are advantages and disadvantages to having a beginner&#39;s perspective. But I will simply write for myself to learn, because information is better retained when you write about it. So I intend to keep this blog as mostly notes to myself, but anyone is welcome to read.</p>
]]></description>
            <link>https://rivea0.github.io/blog/inaugural-post</link>
            <guid isPermaLink="false">https://rivea0.github.io/blog/inaugural-post</guid>
            <dc:creator><![CDATA[Eda Eren]]></dc:creator>
            <pubDate>Wed, 16 Feb 2022 00:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>